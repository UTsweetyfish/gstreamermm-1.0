// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/pipeline.h>
#include <gstreamermm/element.h>
#include <gstreamermm/enums.h>
#include <gstreamermm/sample.h>
#include <gstreamermm/videoinfo.h>
#include <gstreamermm/videoinfo.h>
#include <gstreamermm/taglist.h>
#include <gstreamermm/caps.h>
#include <gstreamermm/pad.h>
#include <gstreamermm/streamvolume.h>
#include <gstreamermm/videooverlay.h>
#include <gstreamermm/navigation.h>
#include <gstreamermm/colorbalance.h>
_DEFS(gstreamermm,gst)

_CONFIGINCLUDE(gstreamermmconfig.h)
_IS_DEPRECATED

namespace Gst
{

/** A Wrapper for the playbin plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */
class PlayBin
: public Gst::Pipeline, public Gst::StreamVolume, public Gst::VideoOverlay, public Gst::Navigation, public Gst::ColorBalance
{
  _CLASS_GOBJECT(PlayBin, GstPlayBin, GST_PLAY_BIN_GSTREAMERMM, Gst::Pipeline, GstPipeline)
  _IMPLEMENTS_INTERFACE(Gst::StreamVolume)
  _IMPLEMENTS_INTERFACE(Gst::VideoOverlay)
  _IMPLEMENTS_INTERFACE(Gst::Navigation)
  _IMPLEMENTS_INTERFACE(Gst::ColorBalance)

  _IS_GSTREAMERMM_PLUGIN
protected:
  PlayBin();
  explicit PlayBin(const Glib::ustring& name);

public:
  /** Creates a new playbin plugin with a unique name.
   */
  _WRAP_CREATE()

  /** Creates a new playbin plugin with the given name.
   */
  _WRAP_CREATE(const Glib::ustring& name)

  /** This is a convenience method for the action signal
   * signal_get_video_tags().
   */
  Gst::TagList get_video_tags(int arg0);

  /** This is a convenience method for the action signal
   * signal_get_audio_tags().
   */
  Gst::TagList get_audio_tags(int arg0);

  /** This is a convenience method for the action signal
   * signal_get_text_tags().
   */
  Gst::TagList get_text_tags(int arg0);

  /** This is a convenience method for the action signal
   * signal_convert_sample().
   */
  Glib::RefPtr<Gst::Sample> convert_sample(const Glib::RefPtr<Gst::Caps>& arg0);

  /** This is a convenience method for the action signal
   * signal_get_video_pad().
   */
  Glib::RefPtr<Gst::Pad> get_video_pad(int arg0);

  /** This is a convenience method for the action signal
   * signal_get_audio_pad().
   */
  Glib::RefPtr<Gst::Pad> get_audio_pad(int arg0);

  /** This is a convenience method for the action signal
   * signal_get_text_pad().
   */
  Glib::RefPtr<Gst::Pad> get_text_pad(int arg0);


  _WRAP_PROPERTY("uri", Glib::ustring)
  _WRAP_PROPERTY("current-uri", Glib::ustring)
  _WRAP_PROPERTY("suburi", Glib::ustring)
  _WRAP_PROPERTY("current-suburi", Glib::ustring)
  _WRAP_PROPERTY("source", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("flags", Gst::PlayFlags)
  _WRAP_PROPERTY("n-video", int)
  _WRAP_PROPERTY("current-video", int)
  _WRAP_PROPERTY("n-audio", int)
  _WRAP_PROPERTY("current-audio", int)
  _WRAP_PROPERTY("n-text", int)
  _WRAP_PROPERTY("current-text", int)
  _WRAP_PROPERTY("subtitle-encoding", Glib::ustring)
  _WRAP_PROPERTY("audio-sink", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("video-sink", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("vis-plugin", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("text-sink", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("video-stream-combiner", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("audio-stream-combiner", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("text-stream-combiner", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("volume", double)
  _WRAP_PROPERTY("mute", bool)
  _WRAP_PROPERTY("sample", Glib::RefPtr<Gst::Sample>)
  _WRAP_PROPERTY("subtitle-font-desc", Glib::ustring)
  _WRAP_PROPERTY("connection-speed", guint64)
  _WRAP_PROPERTY("buffer-size", int)
  _WRAP_PROPERTY("buffer-duration", gint64)
  _WRAP_PROPERTY("av-offset", gint64)
  _WRAP_PROPERTY("ring-buffer-max-size", guint64)
  _WRAP_PROPERTY("force-aspect-ratio", bool)
  _WRAP_PROPERTY("audio-filter", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("video-filter", Glib::RefPtr<Gst::Element>)
  _WRAP_PROPERTY("video-multiview-mode", Gst::VideoMultiviewFramePacking)
  _WRAP_PROPERTY("video-multiview-flags", Gst::VideoMultiviewFlags)

  _WRAP_SIGNAL(void about_to_finish(), "about-to-finish", no_default_handler)
  _WRAP_SIGNAL(void video_changed(), "video-changed", no_default_handler)
  _WRAP_SIGNAL(void audio_changed(), "audio-changed", no_default_handler)
  _WRAP_SIGNAL(void text_changed(), "text-changed", no_default_handler)
  _WRAP_SIGNAL(void video_tags_changed(int arg0), "video-tags-changed", no_default_handler)
  _WRAP_SIGNAL(void audio_tags_changed(int arg0), "audio-tags-changed", no_default_handler)
  _WRAP_SIGNAL(void text_tags_changed(int arg0), "text-tags-changed", no_default_handler)
#m4 _CONVERSION(`GstElement*', `const Glib::RefPtr<Gst::Element>&', `Glib::wrap($3, true)')
  _WRAP_SIGNAL(void source_setup(const Glib::RefPtr<Gst::Element>& arg0), "source-setup", no_default_handler)
#m4 _CONVERSION(`GstElement*', `const Glib::RefPtr<Gst::Element>&', `Glib::wrap($3, true)')
  _WRAP_SIGNAL(void element_setup(const Glib::RefPtr<Gst::Element>& arg0), "element-setup", no_default_handler)

#m4 _CONVERSION(`Gst::TagList', `GstTagList*', `($3).gobj_copy()')
#m4 _CONVERSION(`GstTagList*', `Gst::TagList', `Glib::wrap_taglist($3)')
  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_video_tags().
   */
  _WRAP_SIGNAL(Gst::TagList get_video_tags(int arg0), "get-video-tags", no_default_handler)


#m4 _CONVERSION(`Gst::TagList', `GstTagList*', `($3).gobj_copy()')
#m4 _CONVERSION(`GstTagList*', `Gst::TagList', `Glib::wrap_taglist($3)')
  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_audio_tags().
   */
  _WRAP_SIGNAL(Gst::TagList get_audio_tags(int arg0), "get-audio-tags", no_default_handler)


#m4 _CONVERSION(`Gst::TagList', `GstTagList*', `($3).gobj_copy()')
#m4 _CONVERSION(`GstTagList*', `Gst::TagList', `Glib::wrap_taglist($3)')
  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_text_tags().
   */
  _WRAP_SIGNAL(Gst::TagList get_text_tags(int arg0), "get-text-tags", no_default_handler)


#m4 _CONVERSION(`Glib::RefPtr<Gst::Sample>', `GstSample*', `($3)->gobj_copy()')
#m4 _CONVERSION(`GstSample*', `Glib::RefPtr<Gst::Sample>', `Glib::wrap($3)')
#m4 _CONVERSION(`GstCaps*', `const Glib::RefPtr<Gst::Caps>&', `Glib::wrap($3, true)')
  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, convert_sample().
   */
  _WRAP_SIGNAL(Glib::RefPtr<Gst::Sample> convert_sample(const Glib::RefPtr<Gst::Caps>& arg0), "convert-sample", no_default_handler)


#m4 _CONVERSION(`GstPad*', `Glib::RefPtr<Gst::Pad>', `Glib::wrap($3)')
  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_video_pad().
   */
  _WRAP_SIGNAL(Glib::RefPtr<Gst::Pad> get_video_pad(int arg0), "get-video-pad", no_default_handler)


#m4 _CONVERSION(`GstPad*', `Glib::RefPtr<Gst::Pad>', `Glib::wrap($3)')
  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_audio_pad().
   */
  _WRAP_SIGNAL(Glib::RefPtr<Gst::Pad> get_audio_pad(int arg0), "get-audio-pad", no_default_handler)


#m4 _CONVERSION(`GstPad*', `Glib::RefPtr<Gst::Pad>', `Glib::wrap($3)')
  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_text_pad().
   */
  _WRAP_SIGNAL(Glib::RefPtr<Gst::Pad> get_text_pad(int arg0), "get-text-pad", no_default_handler)

};

} // namespace Gst
