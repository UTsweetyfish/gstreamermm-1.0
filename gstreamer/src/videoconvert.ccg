// Generated by generate_plugin_gmmproc_file. Don't edit this file.


_PINCLUDE(gstreamermm/private/basetransform_p.h)

extern "C"
{

static GType gst_video_dither_method_get_type()
{
  static GType const type = g_type_from_name("GstVideoDitherMethod");
  return type;
}

static GType gst_video_resampler_method_get_type()
{
  static GType const type = g_type_from_name("GstVideoResamplerMethod");
  return type;
}

static GType gst_video_alpha_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoAlphaMode");
  return type;
}

static GType gst_video_chroma_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoChromaMode");
  return type;
}

static GType gst_video_matrix_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoMatrixMode");
  return type;
}

static GType gst_video_gamma_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoGammaMode");
  return type;
}

static GType gst_video_primaries_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoPrimariesMode");
  return type;
}

GType gst_video_convert_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("videoconvert");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

VideoConvert::VideoConvert()
: _CONSTRUCT("name", static_cast<char*>(0))
{}

VideoConvert::VideoConvert(const Glib::ustring& name)
: _CONSTRUCT("name", name.c_str())
{}

}
