// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/element.h>
_DEFS(gstreamermm,gst)

_CONFIGINCLUDE(gstreamermmconfig.h)
_IS_DEPRECATED

namespace Gst
{

_WRAP_ENUM(QueueLeaky,GstQueueLeaky)
_CONV_ENUM(Gst,QueueLeaky)

/** A Wrapper for the queue plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */
class Queue
: public Gst::Element
{
  _CLASS_GOBJECT(Queue, GstQueue, GST_QUEUE_GSTREAMERMM, Gst::Element, GstElement)
  _IS_GSTREAMERMM_PLUGIN
protected:
  Queue();
  explicit Queue(const Glib::ustring& name);

public:
  /** Creates a new queue plugin with a unique name.
   */
  _WRAP_CREATE()

  /** Creates a new queue plugin with the given name.
   */
  _WRAP_CREATE(const Glib::ustring& name)

  _WRAP_PROPERTY("current-level-buffers", guint)
  _WRAP_PROPERTY("current-level-bytes", guint)
  _WRAP_PROPERTY("current-level-time", guint64)
  _WRAP_PROPERTY("max-size-buffers", guint)
  _WRAP_PROPERTY("max-size-bytes", guint)
  _WRAP_PROPERTY("max-size-time", guint64)
  _WRAP_PROPERTY("min-threshold-buffers", guint)
  _WRAP_PROPERTY("min-threshold-bytes", guint)
  _WRAP_PROPERTY("min-threshold-time", guint64)
  _WRAP_PROPERTY("leaky", Gst::QueueLeaky)
  _WRAP_PROPERTY("silent", bool)
  _WRAP_PROPERTY("flush-on-eos", bool)

  _WRAP_SIGNAL(void underrun(), "underrun", no_default_handler)
  _WRAP_SIGNAL(void running(), "running", no_default_handler)
  _WRAP_SIGNAL(void overrun(), "overrun", no_default_handler)
  _WRAP_SIGNAL(void pushing(), "pushing", no_default_handler)
};

} // namespace Gst
