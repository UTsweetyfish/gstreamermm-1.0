// Generated by generate_plugin_gmmproc_file. Don't edit this file.


_PINCLUDE(gstreamermm/private/bin_p.h)

extern "C"
{

static GType gst_play_sink_send_event_mode_get_type()
{
  static GType const type = g_type_from_name("GstPlaySinkSendEventMode");
  return type;
}

GType gst_play_sink_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("playsink");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

PlaySink::PlaySink()
: _CONSTRUCT("name", static_cast<char*>(0))
{}

PlaySink::PlaySink(const Glib::ustring& name)
: _CONSTRUCT("name", name.c_str())
{}

bool PlaySink::reconfigure()
{
  gboolean result;
  g_signal_emit_by_name(gobj(), "reconfigure", &result, static_cast<void*>(0));
  return _CONVERT(`gboolean', `bool', `result');
}

Glib::RefPtr<Gst::Sample> PlaySink::convert_sample(const Glib::RefPtr<Gst::Caps>& arg0)
{
  GstSample* result;
  g_signal_emit_by_name(gobj(), "convert-sample", _CONVERT(`const Glib::RefPtr<Gst::Caps>&', `GstCaps*', `arg0'), &result, static_cast<void*>(0));
  return _CONVERT(`GstSample*', `Glib::RefPtr<Gst::Sample>', `result');
}

}
