// Generated by generate_plugin_gmmproc_file. Don't edit this file.


_PINCLUDE(gstreamermm/private/basesink_p.h)

extern "C"
{

GType gst_app_sink_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("appsink");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

AppSink::AppSink()
: _CONSTRUCT("name", static_cast<char*>(0))
{}

AppSink::AppSink(const Glib::ustring& name)
: _CONSTRUCT("name", name.c_str())
{}

Glib::RefPtr<Gst::Sample> AppSink::pull_preroll()
{
  GstSample* result;
  g_signal_emit_by_name(gobj(), "pull-preroll", &result, static_cast<void*>(0));
  return _CONVERT(`GstSample*', `Glib::RefPtr<Gst::Sample>', `result');
}

Glib::RefPtr<Gst::Sample> AppSink::pull_sample()
{
  GstSample* result;
  g_signal_emit_by_name(gobj(), "pull-sample", &result, static_cast<void*>(0));
  return _CONVERT(`GstSample*', `Glib::RefPtr<Gst::Sample>', `result');
}

Glib::RefPtr<Gst::Sample> AppSink::try_pull_preroll(guint64 arg0)
{
  GstSample* result;
  g_signal_emit_by_name(gobj(), "try-pull-preroll", _CONVERT(`guint64', `guint64', `arg0'), &result, static_cast<void*>(0));
  return _CONVERT(`GstSample*', `Glib::RefPtr<Gst::Sample>', `result');
}

Glib::RefPtr<Gst::Sample> AppSink::try_pull_sample(guint64 arg0)
{
  GstSample* result;
  g_signal_emit_by_name(gobj(), "try-pull-sample", _CONVERT(`guint64', `guint64', `arg0'), &result, static_cast<void*>(0));
  return _CONVERT(`GstSample*', `Glib::RefPtr<Gst::Sample>', `result');
}

}
