// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_PUSHSRC_H
#define _GSTREAMERMM_PUSHSRC_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/base/gstpushsrc.h>
#include <gstreamermm/basesrc.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstPushSrc = struct _GstPushSrc;
using GstPushSrcClass = struct _GstPushSrcClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class PushSrc_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{
/** A base class for push based source elements.
 * This class is mostly useful for elements that cannot do random access, or at
 * least very slowly. The source usually prefers to push out a fixed size
 * buffer.
 *
 * Subclasses usually operate in a format that is different from the default
 * Gst::FORMAT_BYTES format of Gst::BaseSrc.
 *
 * Classes extending this base class will usually be scheduled in a push based
 * mode. If the peer accepts to operate without offsets and within the limits
 * of the allowed block size, this class can operate in getrange based mode
 * automatically. To make this possible, the subclass should override the
 * Gst::BaseSrc::check_get_range_vfunc() method.
 *
 * The subclass should extend the methods from the baseclass in addition to the
 * GstBaseSrc::create_vfunc() method.
 *
 * Seeking, flushing, scheduling and sync is all handled by this base class.
 *
 * Last reviewed on 2006-07-04 (0.10.9).
 *
 * @ingroup GstBaseClasses
 */

class PushSrc
: public BaseSrc
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = PushSrc;
  using CppClassType = PushSrc_Class;
  using BaseObjectType = GstPushSrc;
  using BaseClassType = GstPushSrcClass;

  // noncopyable
  PushSrc(const PushSrc&) = delete;
  PushSrc& operator=(const PushSrc&) = delete;

private:  friend class PushSrc_Class;
  static CppClassType pushsrc_class_;

protected:
  explicit PushSrc(const Glib::ConstructParams& construct_params);
  explicit PushSrc(GstPushSrc* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  PushSrc(PushSrc&& src) noexcept;
  PushSrc& operator=(PushSrc&& src) noexcept;

  ~PushSrc() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstPushSrc*       gobj()       { return reinterpret_cast<GstPushSrc*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstPushSrc* gobj() const { return reinterpret_cast<GstPushSrc*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstPushSrc* gobj_copy();

private:


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} //namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::PushSrc
   */
  Glib::RefPtr<Gst::PushSrc> wrap(GstPushSrc* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_PUSHSRC_H */

