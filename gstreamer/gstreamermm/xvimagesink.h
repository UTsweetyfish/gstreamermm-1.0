// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_XVIMAGESINK_H
#define _GSTREAMERMM_XVIMAGESINK_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/videosink.h>
#include <gstreamermm/navigation.h>
#include <gstreamermm/videooverlay.h>
#include <gstreamermm/colorbalance.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstXvImageSink = struct _GstXvImageSink;
using GstXvImageSinkClass = struct _GstXvImageSinkClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class XvImageSink_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the xvimagesink plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class XvImageSink
: public Gst::VideoSink, public Gst::Navigation, public Gst::VideoOverlay, public Gst::ColorBalance
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = XvImageSink;
  using CppClassType = XvImageSink_Class;
  using BaseObjectType = GstXvImageSink;
  using BaseClassType = GstXvImageSinkClass;

  // noncopyable
  XvImageSink(const XvImageSink&) = delete;
  XvImageSink& operator=(const XvImageSink&) = delete;

private:  friend class XvImageSink_Class;
  static CppClassType xvimagesink_class_;

protected:
  explicit XvImageSink(const Glib::ConstructParams& construct_params);
  explicit XvImageSink(GstXvImageSink* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  XvImageSink(XvImageSink&& src) noexcept;
  XvImageSink& operator=(XvImageSink&& src) noexcept;

  ~XvImageSink() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstXvImageSink*       gobj()       { return reinterpret_cast<GstXvImageSink*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstXvImageSink* gobj() const { return reinterpret_cast<GstXvImageSink*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstXvImageSink* gobj_copy();

private:

  
protected:
  XvImageSink();
  explicit XvImageSink(const Glib::ustring& name);

public:
  /** Creates a new xvimagesink plugin with a unique name.
   */
  
  static Glib::RefPtr<XvImageSink> create();


  /** Creates a new xvimagesink plugin with the given name.
   */
  
  static Glib::RefPtr<XvImageSink> create(const Glib::ustring& name);


  /** The contrast of the video.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_contrast() ;

/** The contrast of the video.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_contrast() const;

  /** The brightness of the video.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_brightness() ;

/** The brightness of the video.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_brightness() const;

  /** The hue of the video.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_hue() ;

/** The hue of the video.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_hue() const;

  /** The saturation of the video.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_saturation() ;

/** The saturation of the video.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_saturation() const;

  /** X Display name.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_display() ;

/** X Display name.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_display() const;

  /** When enabled, runs the X display in synchronous mode. (unrelated to A/V sync, used only for debugging).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_synchronous() ;

/** When enabled, runs the X display in synchronous mode. (unrelated to A/V sync, used only for debugging).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_synchronous() const;

  /** The pixel aspect ratio of the device.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_pixel_aspect_ratio() ;

/** The pixel aspect ratio of the device.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_pixel_aspect_ratio() const;

  /** When enabled, scaling will respect original aspect ratio.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_force_aspect_ratio() ;

/** When enabled, scaling will respect original aspect ratio.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_force_aspect_ratio() const;

  /** When enabled, XEvents will be selected and handled.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_handle_events() ;

/** When enabled, XEvents will be selected and handled.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_handle_events() const;

  /** The number of the video adaptor.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_device() ;

/** The number of the video adaptor.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_device() const;

  /** The name of the video adaptor.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_device_name() const;


  /** When enabled, the current frame will always be drawn in response to X Expose events.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_handle_expose() ;

/** When enabled, the current frame will always be drawn in response to X Expose events.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_handle_expose() const;

  /** Whether to double-buffer the output.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_double_buffer() ;

/** Whether to double-buffer the output.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_double_buffer() const;

  /** Whether to autofill overlay with colorkey.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_autopaint_colorkey() ;

/** Whether to autofill overlay with colorkey.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_autopaint_colorkey() const;

  /** Color to use for the overlay mask.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_colorkey() ;

/** Color to use for the overlay mask.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_colorkey() const;

  /** Draw black borders to fill unused area in force-aspect-ratio mode.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_draw_borders() ;

/** Draw black borders to fill unused area in force-aspect-ratio mode.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_draw_borders() const;

  /** Width of the window.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_window_width() const;


  /** Height of the window.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_window_height() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::XvImageSink
   */
  Glib::RefPtr<Gst::XvImageSink> wrap(GstXvImageSink* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_XVIMAGESINK_H */

