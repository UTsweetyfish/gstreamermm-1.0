// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_TOCSETTER_H
#define _GSTREAMERMM_TOCSETTER_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2013-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <gst/gsttocsetter.h>
#include <glibmm/interface.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstTocSetter = struct _GstTocSetter;
using GstTocSetterClass = struct _GstTocSetterClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class TocSetter_Class; } // namespace Gst
#endif // DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{
class Toc;

/** An interface that allows setting and retrieval of the TOC.
 *
 * Elements that support some kind of chapters or editions (or tracks like in
 * the FLAC cue sheet) will implement this interface.
 *
 * If you just want to retrieve the TOC in your application then all you
 * need to do is watch for TOC messages on your pipeline's bus (or you can
 * perform TOC query). This interface is only for setting TOC data, not for
 * extracting it. To set TOC from the application, find proper tocsetter element
 * and set TOC using set_toc().
 *
 * Elements implementing the Gst::TocSetter interface can extend existing TOC
 * by getting extend UID for that (you can use gst_toc_find_entry() to retrieve it)
 * with any TOC entries received from downstream.
 *
 * Last reviewed on 2016-08-27 (1.8.0)
 *
 * @ingroup GstInterfaces
 */

class TocSetter : public Glib::Interface
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = TocSetter;
  using CppClassType = TocSetter_Class;
  using BaseObjectType = GstTocSetter;
  using BaseClassType = GstTocSetterInterface;

  // noncopyable
  TocSetter(const TocSetter&) = delete;
  TocSetter& operator=(const TocSetter&) = delete;

private:
  friend class TocSetter_Class;
  static CppClassType tocsetter_class_;

#endif /* DOXYGEN_SHOULD_SKIP_THIS */
protected:
  /**
   * You should derive from this class to use it.
   */
  TocSetter();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  /** Called by constructors of derived classes. Provide the result of
   * the Class init() function to ensure that it is properly
   * initialized.
   *
   * @param interface_class The Class object for the derived type.
   */
  explicit TocSetter(const Glib::Interface_Class& interface_class);

public:
  // This is public so that C++ wrapper instances can be
  // created for C instances of unwrapped types.
  // For instance, if an unexpected C type implements the C interface.
  explicit TocSetter(GstTocSetter* castitem);

protected:
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  TocSetter(TocSetter&& src) noexcept;
  TocSetter& operator=(TocSetter&& src) noexcept;

  ~TocSetter() noexcept override;

  static void add_interface(GType gtype_implementer);

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstTocSetter*       gobj()       { return reinterpret_cast<GstTocSetter*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstTocSetter* gobj() const { return reinterpret_cast<GstTocSetter*>(gobject_); }

private:


public:
  
  /** Set the given TOC on the setter. Previously set TOC will be
   * unreffed before setting a new one.
   * 
   * @param toc A Gst::Toc to set.
   */
  void set_toc(const Glib::RefPtr<Gst::Toc>& toc);
  
  /** Return current TOC the setter uses. The TOC should not be
   * modified without making it writable first.
   * 
   * @return TOC set, or <tt>nullptr</tt>. Unref with
   * gst_toc_unref() when no longer needed.
   */
  Glib::RefPtr<Gst::Toc> get_toc() const;
  
  /** Reset the internal TOC. Elements should call this from within the
   * state-change handler.
   */
  void reset();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};
}


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::TocSetter
   */
  Glib::RefPtr<Gst::TocSetter> wrap(GstTocSetter* object, bool take_copy = false);

} // namespace Glib


#endif /* _GSTREAMERMM_TOCSETTER_H */

