// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/basesrc.h>
#include <gstreamermm/private/basesrc_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/caps.h>
#include <gstreamermm/buffer.h>


#define IGNORE_RESULT(x) { auto release_value = x; (void)release_value; }

namespace Gst
{

gboolean BaseSrc_Class::do_seek_vfunc_callback(GstBaseSrc* self, GstSegment* segment)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      Gst::Segment cpp_segment(segment, true);
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->do_seek_vfunc(cpp_segment));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->do_seek)
    return (*base->do_seek)(self, segment);


  typedef gboolean RType;
  return RType();
}
bool Gst::BaseSrc::do_seek_vfunc(Gst::Segment& segment)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->do_seek)
    return (*base->do_seek)(gobj(),(segment).gobj());

  typedef bool RType;
  return RType();
}
gboolean BaseSrc_Class::prepare_seek_segment_vfunc_callback(GstBaseSrc* self, GstEvent* seek, GstSegment* segment)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        Gst::Segment cpp_segment(segment, true);
        return static_cast<int>(obj->prepare_seek_segment_vfunc(Glib::wrap(seek, true) , cpp_segment));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->prepare_seek_segment)
    return (*base->prepare_seek_segment)(self, seek, segment);


  typedef gboolean RType;
  return RType();
}
bool Gst::BaseSrc::prepare_seek_segment_vfunc(const Glib::RefPtr<Gst::Event>& seek, Gst::Segment& segment)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->prepare_seek_segment)
    return (*base->prepare_seek_segment)(gobj(),Glib::unwrap(seek),(segment).gobj());

  typedef bool RType;
  return RType();
}
GstFlowReturn BaseSrc_Class::create_vfunc_callback(GstBaseSrc* self, guint64 offset, guint size, GstBuffer** buf)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        Glib::RefPtr<Gst::Buffer> cpp_buffer;
        // Call the virtual member method, which derived classes might override.
        GstFlowReturn const result = static_cast<GstFlowReturn>(obj->create_vfunc(offset, size, cpp_buffer));
        *buf = cpp_buffer ? cpp_buffer->gobj_copy() : 0;
        return result;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->create)
    return (*base->create)(self, offset, size, buf);


  typedef GstFlowReturn RType;
  return RType();
}
FlowReturn Gst::BaseSrc::create_vfunc(guint64 offset, guint size, Glib::RefPtr<Gst::Buffer>& buffer)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->create)
  {
    GstBuffer* gst_buffer = NULL;
    Gst::FlowReturn const result =
      static_cast<FlowReturn>((*base->create)(gobj(),offset, size,&gst_buffer));
    buffer = Glib::wrap(gst_buffer, false); // Don't take copy because callback returns a newly created copy.
    return result;
  }

  typedef FlowReturn RType;
  return RType();
}

Glib::RefPtr<Allocator> BaseSrc::get_allocator(AllocationParams& params)
{
  GstAllocator* alloc;
  gst_base_src_get_allocator(gobj(), &alloc, params.gobj());
  return Glib::wrap(alloc, false);
}

gboolean BaseSrc_Class::query_vfunc_callback(GstBaseSrc* self, GstQuery* query)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        auto query_cpp = Glib::wrap(query, false);
        int ret = static_cast<int>(obj->base_src_query_vfunc(query_cpp));
        IGNORE_RESULT(query_cpp.release());
        return ret;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->query)
  {
    gboolean retval = (*base->query)(self, query);
    return retval;
  }

  typedef gboolean RType;
  return RType();
}

bool Gst::BaseSrc::base_src_query_vfunc(const Glib::RefPtr<Gst::Query>& query)
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->query)
  {
    bool retval((*base->query)(const_cast<GstBaseSrc*>(gobj()),Glib::unwrap(query)));
    return retval;
  }

  typedef bool RType;
  return RType();
}

GstFlowReturn BaseSrc_Class::alloc_vfunc_callback(GstBaseSrc* self, guint64 offset, guint size, GstBuffer** buf)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        Glib::RefPtr<Gst::Buffer> cpp_buffer;
        // Call the virtual member method, which derived classes might override.
        GstFlowReturn const result = static_cast<GstFlowReturn>(obj->alloc_vfunc(offset, size, cpp_buffer));
        *buf = cpp_buffer ? cpp_buffer->gobj_copy() : 0;
        return result;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->alloc)
    return (*base->alloc)(self, offset, size, buf);


  typedef GstFlowReturn RType;
  return RType();
}
FlowReturn Gst::BaseSrc::alloc_vfunc(guint64 offset, guint size, Glib::RefPtr<Gst::Buffer>& buffer)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->alloc)
  {
    GstBuffer* gst_buffer = NULL;
    Gst::FlowReturn const result =
      static_cast<FlowReturn>((*base->alloc)(gobj(),offset, size,&gst_buffer));
    buffer = Glib::wrap(gst_buffer, false); // Don't take copy because callback returns a newly created copy.
    return result;
  }

  typedef FlowReturn RType;
  return RType();
}


} // namespace Gst

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::BaseSrc> wrap(GstBaseSrc* object, bool take_copy)
{
  return Glib::RefPtr<Gst::BaseSrc>( dynamic_cast<Gst::BaseSrc*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& BaseSrc_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &BaseSrc_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_base_src_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void BaseSrc_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

  klass->get_caps = &get_caps_vfunc_callback;
  klass->set_caps = &set_caps_vfunc_callback;
  klass->negotiate = &negotiate_vfunc_callback;
  klass->stop = &stop_vfunc_callback;
  klass->start = &start_vfunc_callback;
  klass->get_times = &get_times_vfunc_callback;
  klass->get_size = &get_size_vfunc_callback;
  klass->is_seekable = &is_seekable_vfunc_callback;
  klass->unlock = &unlock_vfunc_callback;
  klass->event = &event_vfunc_callback;
  klass->fixate = &fixate_vfunc_callback;
  klass->unlock_stop = &unlock_stop_vfunc_callback;
  klass->decide_allocation = &decide_allocation_vfunc_callback;
  klass->fill = &fill_vfunc_callback;
  klass->do_seek = &do_seek_vfunc_callback;
  klass->prepare_seek_segment = &prepare_seek_segment_vfunc_callback;
  klass->create = &create_vfunc_callback;
  klass->query = &query_vfunc_callback;
  klass->alloc = &alloc_vfunc_callback;
  
}

GstCaps* BaseSrc_Class::get_caps_vfunc_callback(GstBaseSrc* self, GstCaps* filter)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return Glib::unwrap_copy(obj->get_caps_vfunc(Glib::wrap(filter, true)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->get_caps)
    return (*base->get_caps)(self, filter);

  using RType = GstCaps*;
  return RType();
}
gboolean BaseSrc_Class::set_caps_vfunc_callback(GstBaseSrc* self, GstCaps* caps)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->set_caps_vfunc(Glib::wrap(caps, true)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->set_caps)
    return (*base->set_caps)(self, caps);

  using RType = gboolean;
  return RType();
}
gboolean BaseSrc_Class::negotiate_vfunc_callback(GstBaseSrc* self)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->negotiate_vfunc());
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->negotiate)
    return (*base->negotiate)(self);

  using RType = gboolean;
  return RType();
}
gboolean BaseSrc_Class::stop_vfunc_callback(GstBaseSrc* self)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->stop_vfunc());
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->stop)
    return (*base->stop)(self);

  return static_cast<int>(true);
}
gboolean BaseSrc_Class::start_vfunc_callback(GstBaseSrc* self)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->start_vfunc());
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->start)
    return (*base->start)(self);

  return static_cast<int>(true);
}
void BaseSrc_Class::get_times_vfunc_callback(GstBaseSrc* self, GstBuffer* buffer, GstClockTime* start, GstClockTime* end)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->get_times_vfunc(Glib::wrap(buffer, true)
, *(start)
, *(end)
);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->get_times)
    (*base->get_times)(self, buffer, start, end);
}
gboolean BaseSrc_Class::get_size_vfunc_callback(GstBaseSrc* self, guint64* size)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->get_size_vfunc(*(size)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->get_size)
    return (*base->get_size)(self, size);

  using RType = gboolean;
  return RType();
}
gboolean BaseSrc_Class::is_seekable_vfunc_callback(GstBaseSrc* self)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->is_seekable_vfunc());
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->is_seekable)
    return (*base->is_seekable)(self);

  using RType = gboolean;
  return RType();
}
gboolean BaseSrc_Class::unlock_vfunc_callback(GstBaseSrc* self)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->unlock_vfunc());
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->unlock)
    return (*base->unlock)(self);

  using RType = gboolean;
  return RType();
}
gboolean BaseSrc_Class::event_vfunc_callback(GstBaseSrc* self, GstEvent* event)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->event_vfunc(Glib::wrap(event, true)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->event)
    return (*base->event)(self, event);

  using RType = gboolean;
  return RType();
}
GstCaps* BaseSrc_Class::fixate_vfunc_callback(GstBaseSrc* self, GstCaps* caps)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return Glib::unwrap_copy(obj->fixate_vfunc(Glib::wrap(caps, true)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->fixate)
    return (*base->fixate)(self, caps);

  using RType = GstCaps*;
  return RType();
}
gboolean BaseSrc_Class::unlock_stop_vfunc_callback(GstBaseSrc* self)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->unlock_stop_vfunc());
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->unlock_stop)
    return (*base->unlock_stop)(self);

  using RType = gboolean;
  return RType();
}
gboolean BaseSrc_Class::decide_allocation_vfunc_callback(GstBaseSrc* self, GstQuery* query)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->decide_allocation_vfunc(Glib::wrap(query, true)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->decide_allocation)
    return (*base->decide_allocation)(self, query);

  using RType = gboolean;
  return RType();
}
GstFlowReturn BaseSrc_Class::fill_vfunc_callback(GstBaseSrc* self, guint64 offset, guint size, GstBuffer* buf)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return ((GstFlowReturn)(obj->fill_vfunc(offset, size, Glib::wrap(buf, true)
)));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->fill)
    return (*base->fill)(self, offset, size, buf);

  using RType = GstFlowReturn;
  return RType();
}


Glib::ObjectBase* BaseSrc_Class::wrap_new(GObject* object)
{
  return new BaseSrc((GstBaseSrc*)object);
}


/* The implementation: */

GstBaseSrc* BaseSrc::gobj_copy()
{
  reference();
  return gobj();
}

BaseSrc::BaseSrc(const Glib::ConstructParams& construct_params)
:
  Element(construct_params)
{

}

BaseSrc::BaseSrc(GstBaseSrc* castitem)
:
  Element((GstElement*)(castitem))
{}


BaseSrc::BaseSrc(BaseSrc&& src) noexcept
: Element(std::move(src))
{}

BaseSrc& BaseSrc::operator=(BaseSrc&& src) noexcept
{
  Element::operator=(std::move(src));
  return *this;
}


BaseSrc::~BaseSrc() noexcept
{}


BaseSrc::CppClassType BaseSrc::basesrc_class_; // initialize static member

GType BaseSrc::get_type()
{
  return basesrc_class_.init().get_type();
}


GType BaseSrc::get_base_type()
{
  return gst_base_src_get_type();
}


FlowReturn BaseSrc::wait_playing()
{
  return ((FlowReturn)(gst_base_src_wait_playing(gobj())));
}

bool BaseSrc::is_live() const
{
  return gst_base_src_is_live(const_cast<GstBaseSrc*>(gobj()));
}

void BaseSrc::set_live(bool live)
{
  gst_base_src_set_live(gobj(), static_cast<int>(live));
}

void BaseSrc::set_format(Format format)
{
  gst_base_src_set_format(gobj(), ((GstFormat)(format)));
}

bool BaseSrc::query_latency(bool& live, Gst::ClockTime& min_latency, Gst::ClockTime& max_latency) const
{
  return gst_base_src_query_latency(const_cast<GstBaseSrc*>(gobj()), ((gboolean*) &(live)), (GstClockTime*)(&min_latency), (GstClockTime*)(&max_latency));
}

guint BaseSrc::get_blocksize() const
{
  return gst_base_src_get_blocksize(const_cast<GstBaseSrc*>(gobj()));
}

void BaseSrc::set_blocksize(guint blocksize)
{
  gst_base_src_set_blocksize(gobj(), blocksize);
}

bool BaseSrc::get_do_timestamp() const
{
  return gst_base_src_get_do_timestamp(const_cast<GstBaseSrc*>(gobj()));
}

void BaseSrc::set_do_timestamp(bool timestamp)
{
  gst_base_src_set_do_timestamp(gobj(), static_cast<int>(timestamp));
}

bool BaseSrc::new_seamless_segment(gint64 start, gint64 stop, gint64 position)
{
  return gst_base_src_new_seamless_segment(gobj(), start, stop, position);
}

bool BaseSrc::set_caps(const Glib::RefPtr<Gst::Caps>& caps)
{
  return gst_base_src_set_caps(gobj(), Glib::unwrap(caps));
}

Gst::FlowReturn BaseSrc::start_wait()
{
  return ((Gst::FlowReturn)(gst_base_src_start_wait(gobj())));
}

void BaseSrc::set_dynamic_size(bool dynamic_size)
{
  gst_base_src_set_dynamic_size(gobj(), static_cast<int>(dynamic_size));
}

void BaseSrc::set_async(bool async)
{
  gst_base_src_set_async(gobj(), static_cast<int>(async));
}

bool BaseSrc::is_async() const
{
  return gst_base_src_is_async(const_cast<GstBaseSrc*>(gobj()));
}

void BaseSrc::start_complete(Gst::FlowReturn ret)
{
  gst_base_src_start_complete(gobj(), ((GstFlowReturn)(ret)));
}

void BaseSrc::set_automatic_eos(bool automatic_eos)
{
  gst_base_src_set_automatic_eos(gobj(), static_cast<int>(automatic_eos));
}

Glib::RefPtr<Gst::Pad> BaseSrc::get_src_pad()
{
  Glib::RefPtr<Gst::Pad> ref_ptr(Glib::wrap(gobj()->srcpad));

  if(ref_ptr)
    ref_ptr->reference();

  return ref_ptr;
}

Glib::RefPtr<const Gst::Pad> BaseSrc::get_src_pad() const
{
  Glib::RefPtr<const Gst::Pad> ref_ptr(Glib::wrap(gobj()->srcpad));

  if(ref_ptr)
    ref_ptr->reference();

  return ref_ptr;
}


Glib::PropertyProxy< gulong > BaseSrc::property_blocksize() 
{
  return Glib::PropertyProxy< gulong >(this, "blocksize");
}

Glib::PropertyProxy_ReadOnly< gulong > BaseSrc::property_blocksize() const
{
  return Glib::PropertyProxy_ReadOnly< gulong >(this, "blocksize");
}

Glib::PropertyProxy< bool > BaseSrc::property_do_timestamp() 
{
  return Glib::PropertyProxy< bool >(this, "do-timestamp");
}

Glib::PropertyProxy_ReadOnly< bool > BaseSrc::property_do_timestamp() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "do-timestamp");
}

Glib::PropertyProxy< int > BaseSrc::property_num_buffers() 
{
  return Glib::PropertyProxy< int >(this, "num-buffers");
}

Glib::PropertyProxy_ReadOnly< int > BaseSrc::property_num_buffers() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "num-buffers");
}

Glib::PropertyProxy< bool > BaseSrc::property_typefind() 
{
  return Glib::PropertyProxy< bool >(this, "typefind");
}

Glib::PropertyProxy_ReadOnly< bool > BaseSrc::property_typefind() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "typefind");
}


Glib::RefPtr<Gst::Caps> Gst::BaseSrc::get_caps_vfunc(const Glib::RefPtr<Gst::Caps>& caps) const
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->get_caps)
  {
    Glib::RefPtr<Gst::Caps> retval(Glib::wrap((*base->get_caps)(const_cast<GstBaseSrc*>(gobj()),Glib::unwrap(caps))));
    return retval;
  }

  using RType = Glib::RefPtr<Gst::Caps>;
  return RType();
}
bool Gst::BaseSrc::set_caps_vfunc(const Glib::RefPtr<Gst::Caps>& caps) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->set_caps)
  {
    bool retval((*base->set_caps)(gobj(),Glib::unwrap(caps)));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::BaseSrc::negotiate_vfunc() 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->negotiate)
  {
    bool retval((*base->negotiate)(gobj()));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::BaseSrc::stop_vfunc() 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->stop)
  {
    bool retval((*base->stop)(gobj()));
    return retval;
  }

  return true;
}
bool Gst::BaseSrc::start_vfunc() 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->start)
  {
    bool retval((*base->start)(gobj()));
    return retval;
  }

  return true;
}
void Gst::BaseSrc::get_times_vfunc(const Glib::RefPtr<Gst::Buffer>& buffer, Gst::ClockTime& start, Gst::ClockTime& end) const
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->get_times)
  {
    (*base->get_times)(const_cast<GstBaseSrc*>(gobj()),Glib::unwrap(buffer),(GstClockTime*)(&start),(GstClockTime*)(&end));
  }
}
bool Gst::BaseSrc::get_size_vfunc(guint64& size) const
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->get_size)
  {
    bool retval((*base->get_size)(const_cast<GstBaseSrc*>(gobj()),&(size)));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::BaseSrc::is_seekable_vfunc() const
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->is_seekable)
  {
    bool retval((*base->is_seekable)(const_cast<GstBaseSrc*>(gobj())));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::BaseSrc::unlock_vfunc() 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->unlock)
  {
    bool retval((*base->unlock)(gobj()));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::BaseSrc::event_vfunc(const Glib::RefPtr<Gst::Event>& event) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->event)
  {
    bool retval((*base->event)(gobj(),Glib::unwrap(event)));
    return retval;
  }

  using RType = bool;
  return RType();
}
Glib::RefPtr<Gst::Caps> Gst::BaseSrc::fixate_vfunc(const Glib::RefPtr<Gst::Caps>& caps) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->fixate)
  {
    Glib::RefPtr<Gst::Caps> retval(Glib::wrap((*base->fixate)(gobj(),Glib::unwrap(caps))));
    return retval;
  }

  using RType = Glib::RefPtr<Gst::Caps>;
  return RType();
}
bool Gst::BaseSrc::unlock_stop_vfunc() 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->unlock_stop)
  {
    bool retval((*base->unlock_stop)(gobj()));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::BaseSrc::decide_allocation_vfunc(const Glib::RefPtr<Gst::Query>& query) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->decide_allocation)
  {
    bool retval((*base->decide_allocation)(gobj(),Glib::unwrap(query)));
    return retval;
  }

  using RType = bool;
  return RType();
}
Gst::FlowReturn Gst::BaseSrc::fill_vfunc(guint64 offset, guint size, const Glib::RefPtr<Gst::Buffer>& buffer) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->fill)
  {
    Gst::FlowReturn retval(((Gst::FlowReturn)((*base->fill)(gobj(),offset,size,Glib::unwrap(buffer)))));
    return retval;
  }

  using RType = Gst::FlowReturn;
  return RType();
}


} // namespace Gst


