// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/videotestsrc.h>
#include <gstreamermm/private/videotestsrc_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

static GType gst_video_test_src_pattern_get_type()
{
  static GType const type = g_type_from_name("GstVideoTestSrcPattern");
  return type;
}

GType gst_video_test_src_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("videotestsrc");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

VideoTestSrc::VideoTestSrc()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::PushSrc(Glib::ConstructParams(videotestsrc_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

VideoTestSrc::VideoTestSrc(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::PushSrc(Glib::ConstructParams(videotestsrc_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{
} // anonymous namespace

// static
GType Glib::Value<Gst::VideoTestSrcPattern>::value_type()
{
  return gst_video_test_src_pattern_get_type();
}


namespace Glib
{

Glib::RefPtr<Gst::VideoTestSrc> wrap(GstVideoTestSrc* object, bool take_copy)
{
  return Glib::RefPtr<Gst::VideoTestSrc>( dynamic_cast<Gst::VideoTestSrc*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& VideoTestSrc_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &VideoTestSrc_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_video_test_src_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void VideoTestSrc_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* VideoTestSrc_Class::wrap_new(GObject* object)
{
  return new VideoTestSrc((GstVideoTestSrc*)object);
}


/* The implementation: */

GstVideoTestSrc* VideoTestSrc::gobj_copy()
{
  reference();
  return gobj();
}

VideoTestSrc::VideoTestSrc(const Glib::ConstructParams& construct_params)
:
  Gst::PushSrc(construct_params)
{

}

VideoTestSrc::VideoTestSrc(GstVideoTestSrc* castitem)
:
  Gst::PushSrc((GstPushSrc*)(castitem))
{}


VideoTestSrc::VideoTestSrc(VideoTestSrc&& src) noexcept
: Gst::PushSrc(std::move(src))
{}

VideoTestSrc& VideoTestSrc::operator=(VideoTestSrc&& src) noexcept
{
  Gst::PushSrc::operator=(std::move(src));
  return *this;
}


VideoTestSrc::~VideoTestSrc() noexcept
{}


VideoTestSrc::CppClassType VideoTestSrc::videotestsrc_class_; // initialize static member

GType VideoTestSrc::get_type()
{
  return videotestsrc_class_.init().get_type();
}


GType VideoTestSrc::get_base_type()
{
  return gst_video_test_src_gstreamermm_get_type();
}


Glib::RefPtr<VideoTestSrc> VideoTestSrc::create()
{
  return Glib::RefPtr<VideoTestSrc>( new VideoTestSrc() );
}

Glib::RefPtr<VideoTestSrc> VideoTestSrc::create(const Glib::ustring& name)
{
  return Glib::RefPtr<VideoTestSrc>( new VideoTestSrc(name) );
}


Glib::PropertyProxy< Gst::VideoTestSrcPattern > VideoTestSrc::property_pattern() 
{
  return Glib::PropertyProxy< Gst::VideoTestSrcPattern >(this, "pattern");
}

Glib::PropertyProxy_ReadOnly< Gst::VideoTestSrcPattern > VideoTestSrc::property_pattern() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::VideoTestSrcPattern >(this, "pattern");
}

Glib::PropertyProxy< gint64 > VideoTestSrc::property_timestamp_offset() 
{
  return Glib::PropertyProxy< gint64 >(this, "timestamp-offset");
}

Glib::PropertyProxy_ReadOnly< gint64 > VideoTestSrc::property_timestamp_offset() const
{
  return Glib::PropertyProxy_ReadOnly< gint64 >(this, "timestamp-offset");
}

Glib::PropertyProxy< bool > VideoTestSrc::property_is_live() 
{
  return Glib::PropertyProxy< bool >(this, "is-live");
}

Glib::PropertyProxy_ReadOnly< bool > VideoTestSrc::property_is_live() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "is-live");
}

Glib::PropertyProxy< int > VideoTestSrc::property_k0() 
{
  return Glib::PropertyProxy< int >(this, "k0");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_k0() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "k0");
}

Glib::PropertyProxy< int > VideoTestSrc::property_kx() 
{
  return Glib::PropertyProxy< int >(this, "kx");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_kx() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "kx");
}

Glib::PropertyProxy< int > VideoTestSrc::property_ky() 
{
  return Glib::PropertyProxy< int >(this, "ky");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_ky() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "ky");
}

Glib::PropertyProxy< int > VideoTestSrc::property_kt() 
{
  return Glib::PropertyProxy< int >(this, "kt");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_kt() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "kt");
}

Glib::PropertyProxy< int > VideoTestSrc::property_kxt() 
{
  return Glib::PropertyProxy< int >(this, "kxt");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_kxt() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "kxt");
}

Glib::PropertyProxy< int > VideoTestSrc::property_kyt() 
{
  return Glib::PropertyProxy< int >(this, "kyt");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_kyt() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "kyt");
}

Glib::PropertyProxy< int > VideoTestSrc::property_kxy() 
{
  return Glib::PropertyProxy< int >(this, "kxy");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_kxy() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "kxy");
}

Glib::PropertyProxy< int > VideoTestSrc::property_kx2() 
{
  return Glib::PropertyProxy< int >(this, "kx2");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_kx2() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "kx2");
}

Glib::PropertyProxy< int > VideoTestSrc::property_ky2() 
{
  return Glib::PropertyProxy< int >(this, "ky2");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_ky2() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "ky2");
}

Glib::PropertyProxy< int > VideoTestSrc::property_kt2() 
{
  return Glib::PropertyProxy< int >(this, "kt2");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_kt2() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "kt2");
}

Glib::PropertyProxy< int > VideoTestSrc::property_xoffset() 
{
  return Glib::PropertyProxy< int >(this, "xoffset");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_xoffset() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "xoffset");
}

Glib::PropertyProxy< int > VideoTestSrc::property_yoffset() 
{
  return Glib::PropertyProxy< int >(this, "yoffset");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_yoffset() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "yoffset");
}

Glib::PropertyProxy< guint > VideoTestSrc::property_foreground_color() 
{
  return Glib::PropertyProxy< guint >(this, "foreground-color");
}

Glib::PropertyProxy_ReadOnly< guint > VideoTestSrc::property_foreground_color() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "foreground-color");
}

Glib::PropertyProxy< guint > VideoTestSrc::property_background_color() 
{
  return Glib::PropertyProxy< guint >(this, "background-color");
}

Glib::PropertyProxy_ReadOnly< guint > VideoTestSrc::property_background_color() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "background-color");
}

Glib::PropertyProxy< int > VideoTestSrc::property_horizontal_speed() 
{
  return Glib::PropertyProxy< int >(this, "horizontal-speed");
}

Glib::PropertyProxy_ReadOnly< int > VideoTestSrc::property_horizontal_speed() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "horizontal-speed");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


