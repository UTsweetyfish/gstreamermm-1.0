// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/ximagesink.h>
#include <gstreamermm/private/ximagesink_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

GType gst_x_image_sink_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("ximagesink");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

XImageSink::XImageSink()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::VideoSink(Glib::ConstructParams(ximagesink_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

XImageSink::XImageSink(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::VideoSink(Glib::ConstructParams(ximagesink_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::XImageSink> wrap(GstXImageSink* object, bool take_copy)
{
  return Glib::RefPtr<Gst::XImageSink>( dynamic_cast<Gst::XImageSink*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& XImageSink_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &XImageSink_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_x_image_sink_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Gst::Navigation::add_interface(get_type());
  Gst::VideoOverlay::add_interface(get_type());

  }

  return *this;
}


void XImageSink_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* XImageSink_Class::wrap_new(GObject* object)
{
  return new XImageSink((GstXImageSink*)object);
}


/* The implementation: */

GstXImageSink* XImageSink::gobj_copy()
{
  reference();
  return gobj();
}

XImageSink::XImageSink(const Glib::ConstructParams& construct_params)
:
  Gst::VideoSink(construct_params)
{

}

XImageSink::XImageSink(GstXImageSink* castitem)
:
  Gst::VideoSink((GstVideoSink*)(castitem))
{}


XImageSink::XImageSink(XImageSink&& src) noexcept
: Gst::VideoSink(std::move(src))
  , Gst::Navigation(std::move(src))
  , Gst::VideoOverlay(std::move(src))
{}

XImageSink& XImageSink::operator=(XImageSink&& src) noexcept
{
  Gst::VideoSink::operator=(std::move(src));
  Gst::Navigation::operator=(std::move(src));
  Gst::VideoOverlay::operator=(std::move(src));
  return *this;
}


XImageSink::~XImageSink() noexcept
{}


XImageSink::CppClassType XImageSink::ximagesink_class_; // initialize static member

GType XImageSink::get_type()
{
  return ximagesink_class_.init().get_type();
}


GType XImageSink::get_base_type()
{
  return gst_x_image_sink_gstreamermm_get_type();
}


Glib::RefPtr<XImageSink> XImageSink::create()
{
  return Glib::RefPtr<XImageSink>( new XImageSink() );
}

Glib::RefPtr<XImageSink> XImageSink::create(const Glib::ustring& name)
{
  return Glib::RefPtr<XImageSink>( new XImageSink(name) );
}


Glib::PropertyProxy< Glib::ustring > XImageSink::property_display() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "display");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > XImageSink::property_display() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "display");
}

Glib::PropertyProxy< bool > XImageSink::property_synchronous() 
{
  return Glib::PropertyProxy< bool >(this, "synchronous");
}

Glib::PropertyProxy_ReadOnly< bool > XImageSink::property_synchronous() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "synchronous");
}

Glib::PropertyProxy< Glib::ustring > XImageSink::property_pixel_aspect_ratio() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "pixel-aspect-ratio");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > XImageSink::property_pixel_aspect_ratio() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "pixel-aspect-ratio");
}

Glib::PropertyProxy< bool > XImageSink::property_force_aspect_ratio() 
{
  return Glib::PropertyProxy< bool >(this, "force-aspect-ratio");
}

Glib::PropertyProxy_ReadOnly< bool > XImageSink::property_force_aspect_ratio() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "force-aspect-ratio");
}

Glib::PropertyProxy< bool > XImageSink::property_handle_events() 
{
  return Glib::PropertyProxy< bool >(this, "handle-events");
}

Glib::PropertyProxy_ReadOnly< bool > XImageSink::property_handle_events() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "handle-events");
}

Glib::PropertyProxy< bool > XImageSink::property_handle_expose() 
{
  return Glib::PropertyProxy< bool >(this, "handle-expose");
}

Glib::PropertyProxy_ReadOnly< bool > XImageSink::property_handle_expose() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "handle-expose");
}

Glib::PropertyProxy_ReadOnly< guint64 > XImageSink::property_window_width() const
{
  return Glib::PropertyProxy_ReadOnly< guint64 >(this, "window-width");
}

Glib::PropertyProxy_ReadOnly< guint64 > XImageSink::property_window_height() const
{
  return Glib::PropertyProxy_ReadOnly< guint64 >(this, "window-height");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


