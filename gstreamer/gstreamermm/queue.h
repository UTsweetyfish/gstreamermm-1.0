// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_QUEUE_H
#define _GSTREAMERMM_QUEUE_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/element.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstQueue = struct _GstQueue;
using GstQueueClass = struct _GstQueueClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class Queue_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/** 
 *
 * @ingroup gstreamermmEnums
 */
enum QueueLeaky
{
  QUEUE_LEAK_NO_LEAK = 1,
  QUEUE_LEAK_UPSTREAM = QUEUE_LEAK_NO_LEAK,
  QUEUE_LEAK_DOWNSTREAM
};

} // namespace Gst

#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::QueueLeaky> : public Glib::Value_Enum<Gst::QueueLeaky>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gst
{


/** A Wrapper for the queue plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class Queue
: public Gst::Element
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = Queue;
  using CppClassType = Queue_Class;
  using BaseObjectType = GstQueue;
  using BaseClassType = GstQueueClass;

  // noncopyable
  Queue(const Queue&) = delete;
  Queue& operator=(const Queue&) = delete;

private:  friend class Queue_Class;
  static CppClassType queue_class_;

protected:
  explicit Queue(const Glib::ConstructParams& construct_params);
  explicit Queue(GstQueue* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  Queue(Queue&& src) noexcept;
  Queue& operator=(Queue&& src) noexcept;

  ~Queue() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstQueue*       gobj()       { return reinterpret_cast<GstQueue*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstQueue* gobj() const { return reinterpret_cast<GstQueue*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstQueue* gobj_copy();

private:

  
protected:
  Queue();
  explicit Queue(const Glib::ustring& name);

public:
  /** Creates a new queue plugin with a unique name.
   */
  
  static Glib::RefPtr<Queue> create();


  /** Creates a new queue plugin with the given name.
   */
  
  static Glib::RefPtr<Queue> create(const Glib::ustring& name);


  /** Current number of buffers in the queue.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_current_level_buffers() const;


  /** Current amount of data in the queue (bytes).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_current_level_bytes() const;


  /** Current amount of data in the queue (in ns).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_current_level_time() const;


  /** Max. number of buffers in the queue (0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_max_size_buffers() ;

/** Max. number of buffers in the queue (0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_max_size_buffers() const;

  /** Max. amount of data in the queue (bytes, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_max_size_bytes() ;

/** Max. amount of data in the queue (bytes, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_max_size_bytes() const;

  /** Max. amount of data in the queue (in ns, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_max_size_time() ;

/** Max. amount of data in the queue (in ns, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_max_size_time() const;

  /** Min. number of buffers in the queue to allow reading (0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_min_threshold_buffers() ;

/** Min. number of buffers in the queue to allow reading (0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_min_threshold_buffers() const;

  /** Min. amount of data in the queue to allow reading (bytes, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_min_threshold_bytes() ;

/** Min. amount of data in the queue to allow reading (bytes, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_min_threshold_bytes() const;

  /** Min. amount of data in the queue to allow reading (in ns, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_min_threshold_time() ;

/** Min. amount of data in the queue to allow reading (in ns, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_min_threshold_time() const;

  /** Where the queue leaks, if at all.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::QueueLeaky > property_leaky() ;

/** Where the queue leaks, if at all.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::QueueLeaky > property_leaky() const;

  /** Don't emit queue signals.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_silent() ;

/** Don't emit queue signals.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_silent() const;

  /** Discard all data in the queue when an EOS event is received.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_flush_on_eos() ;

/** Discard all data in the queue when an EOS event is received.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_flush_on_eos() const;


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%underrun()</tt>
   *
   */

  Glib::SignalProxy< void > signal_underrun();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%running()</tt>
   *
   */

  Glib::SignalProxy< void > signal_running();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%overrun()</tt>
   *
   */

  Glib::SignalProxy< void > signal_overrun();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%pushing()</tt>
   *
   */

  Glib::SignalProxy< void > signal_pushing();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::Queue
   */
  Glib::RefPtr<Gst::Queue> wrap(GstQueue* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_QUEUE_H */

