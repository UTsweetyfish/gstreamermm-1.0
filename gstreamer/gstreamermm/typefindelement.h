// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_TYPEFINDELEMENT_H
#define _GSTREAMERMM_TYPEFINDELEMENT_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/element.h>
#include <gstreamermm/caps.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstTypeFindElement = struct _GstTypeFindElement;
using GstTypeFindElementClass = struct _GstTypeFindElementClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class TypeFindElement_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the typefind plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class TypeFindElement
: public Gst::Element
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = TypeFindElement;
  using CppClassType = TypeFindElement_Class;
  using BaseObjectType = GstTypeFindElement;
  using BaseClassType = GstTypeFindElementClass;

  // noncopyable
  TypeFindElement(const TypeFindElement&) = delete;
  TypeFindElement& operator=(const TypeFindElement&) = delete;

private:  friend class TypeFindElement_Class;
  static CppClassType typefindelement_class_;

protected:
  explicit TypeFindElement(const Glib::ConstructParams& construct_params);
  explicit TypeFindElement(GstTypeFindElement* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  TypeFindElement(TypeFindElement&& src) noexcept;
  TypeFindElement& operator=(TypeFindElement&& src) noexcept;

  ~TypeFindElement() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstTypeFindElement*       gobj()       { return reinterpret_cast<GstTypeFindElement*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstTypeFindElement* gobj() const { return reinterpret_cast<GstTypeFindElement*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstTypeFindElement* gobj_copy();

private:

  
protected:
  TypeFindElement();
  explicit TypeFindElement(const Glib::ustring& name);

public:
  /** Creates a new typefind plugin with a unique name.
   */
  
  static Glib::RefPtr<TypeFindElement> create();


  /** Creates a new typefind plugin with the given name.
   */
  
  static Glib::RefPtr<TypeFindElement> create(const Glib::ustring& name);


  /** detected capabilities in stream.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > property_caps() const;


  /** minimum probability required to accept caps.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_minimum() ;

/** minimum probability required to accept caps.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_minimum() const;

  /** force caps without doing a typefind.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> > property_force_caps() ;

/** force caps without doing a typefind.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > property_force_caps() const;


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%have_type(guint arg0, const Glib::RefPtr<Gst::Caps>& arg1)</tt>
   *
   */

  Glib::SignalProxy< void,guint,const Glib::RefPtr<Gst::Caps>& > signal_have_type();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::TypeFindElement
   */
  Glib::RefPtr<Gst::TypeFindElement> wrap(GstTypeFindElement* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_TYPEFINDELEMENT_H */

