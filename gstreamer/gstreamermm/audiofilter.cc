// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/audiofilter.h>
#include <gstreamermm/private/audiofilter_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/audio/gstaudiofilter.h>


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::AudioFilter> wrap(GstAudioFilter* object, bool take_copy)
{
  return Glib::RefPtr<Gst::AudioFilter>( dynamic_cast<Gst::AudioFilter*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& AudioFilter_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &AudioFilter_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_audio_filter_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void AudioFilter_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

  klass->setup = &setup_vfunc_callback;

}

gboolean AudioFilter_Class::setup_vfunc_callback(GstAudioFilter* self, const GstAudioInfo* info)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->setup_vfunc(Gst::AudioInfo(const_cast<GstAudioInfo*>(info))
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->setup)
    return (*base->setup)(self, info);

  using RType = gboolean;
  return RType();
}


Glib::ObjectBase* AudioFilter_Class::wrap_new(GObject* object)
{
  return new AudioFilter((GstAudioFilter*)object);
}


/* The implementation: */

GstAudioFilter* AudioFilter::gobj_copy()
{
  reference();
  return gobj();
}

AudioFilter::AudioFilter(const Glib::ConstructParams& construct_params)
:
  Gst::BaseTransform(construct_params)
{

}

AudioFilter::AudioFilter(GstAudioFilter* castitem)
:
  Gst::BaseTransform((GstBaseTransform*)(castitem))
{}


AudioFilter::AudioFilter(AudioFilter&& src) noexcept
: Gst::BaseTransform(std::move(src))
{}

AudioFilter& AudioFilter::operator=(AudioFilter&& src) noexcept
{
  Gst::BaseTransform::operator=(std::move(src));
  return *this;
}


AudioFilter::~AudioFilter() noexcept
{}


AudioFilter::CppClassType AudioFilter::audiofilter_class_; // initialize static member

GType AudioFilter::get_type()
{
  return audiofilter_class_.init().get_type();
}


GType AudioFilter::get_base_type()
{
  return gst_audio_filter_get_type();
}


bool Gst::AudioFilter::setup_vfunc(const Gst::AudioInfo& info) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->setup)
  {
    bool retval((*base->setup)(gobj(),info.gobj()));
    return retval;
  }

  using RType = bool;
  return RType();
}


} // namespace Gst


