// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_MULTIQUEUE_H
#define _GSTREAMERMM_MULTIQUEUE_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/element.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstMultiQueue = struct _GstMultiQueue;
using GstMultiQueueClass = struct _GstMultiQueueClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class MultiQueue_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the multiqueue plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class MultiQueue
: public Gst::Element
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = MultiQueue;
  using CppClassType = MultiQueue_Class;
  using BaseObjectType = GstMultiQueue;
  using BaseClassType = GstMultiQueueClass;

  // noncopyable
  MultiQueue(const MultiQueue&) = delete;
  MultiQueue& operator=(const MultiQueue&) = delete;

private:  friend class MultiQueue_Class;
  static CppClassType multiqueue_class_;

protected:
  explicit MultiQueue(const Glib::ConstructParams& construct_params);
  explicit MultiQueue(GstMultiQueue* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  MultiQueue(MultiQueue&& src) noexcept;
  MultiQueue& operator=(MultiQueue&& src) noexcept;

  ~MultiQueue() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstMultiQueue*       gobj()       { return reinterpret_cast<GstMultiQueue*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstMultiQueue* gobj() const { return reinterpret_cast<GstMultiQueue*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstMultiQueue* gobj_copy();

private:

  
protected:
  MultiQueue();
  explicit MultiQueue(const Glib::ustring& name);

public:
  /** Creates a new multiqueue plugin with a unique name.
   */
  
  static Glib::RefPtr<MultiQueue> create();


  /** Creates a new multiqueue plugin with the given name.
   */
  
  static Glib::RefPtr<MultiQueue> create(const Glib::ustring& name);


  /** Amount of data the queues can grow if one of them is empty (bytes, 0=disable) (NOT IMPLEMENTED).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_extra_size_bytes() ;

/** Amount of data the queues can grow if one of them is empty (bytes, 0=disable) (NOT IMPLEMENTED).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_extra_size_bytes() const;

  /** Amount of buffers the queues can grow if one of them is empty (0=disable) (NOT IMPLEMENTED).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_extra_size_buffers() ;

/** Amount of buffers the queues can grow if one of them is empty (0=disable) (NOT IMPLEMENTED).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_extra_size_buffers() const;

  /** Amount of time the queues can grow if one of them is empty (in ns, 0=disable) (NOT IMPLEMENTED).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_extra_size_time() ;

/** Amount of time the queues can grow if one of them is empty (in ns, 0=disable) (NOT IMPLEMENTED).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_extra_size_time() const;

  /** Max. amount of data in the queue (bytes, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_max_size_bytes() ;

/** Max. amount of data in the queue (bytes, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_max_size_bytes() const;

  /** Max. number of buffers in the queue (0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_max_size_buffers() ;

/** Max. number of buffers in the queue (0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_max_size_buffers() const;

  /** Max. amount of data in the queue (in ns, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_max_size_time() ;

/** Max. amount of data in the queue (in ns, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_max_size_time() const;

  /** Emit GST_MESSAGE_BUFFERING based on low-/high-percent thresholds.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_use_buffering() ;

/** Emit GST_MESSAGE_BUFFERING based on low-/high-percent thresholds.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_use_buffering() const;

  /** Low threshold for buffering to start.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_low_percent() ;

/** Low threshold for buffering to start.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_low_percent() const;

  /** High threshold for buffering to finish.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_high_percent() ;

/** High threshold for buffering to finish.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_high_percent() const;

  //gtkmmproc error: low-watermark : property defs lookup failed.
  //gtkmmproc error: high-watermark : property defs lookup failed.
  /** Synchronize deactivated or not-linked streams by running time.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_sync_by_running_time() ;

/** Synchronize deactivated or not-linked streams by running time.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_sync_by_running_time() const;

  /** Adjust time limits based on input interleave.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_use_interleave() ;

/** Adjust time limits based on input interleave.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_use_interleave() const;

  /** Extra buffering in time for unlinked streams (if 'sync-by-running-time').
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_unlinked_cache_time() ;

/** Extra buffering in time for unlinked streams (if 'sync-by-running-time').
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_unlinked_cache_time() const;


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%underrun()</tt>
   *
   */

  Glib::SignalProxy< void > signal_underrun();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%overrun()</tt>
   *
   */

  Glib::SignalProxy< void > signal_overrun();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::MultiQueue
   */
  Glib::RefPtr<Gst::MultiQueue> wrap(GstMultiQueue* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_MULTIQUEUE_H */

