// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_AUDIOTESTSRC_H
#define _GSTREAMERMM_AUDIOTESTSRC_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/basesrc.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstAudioTestSrc = struct _GstAudioTestSrc;
using GstAudioTestSrcClass = struct _GstAudioTestSrcClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class AudioTestSrc_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/** 
 *
 * @ingroup gstreamermmEnums
 */
enum AudioTestSrcWave
{
  AUDIO_TEST_SRC_WAVE_SINE,
  AUDIO_TEST_SRC_WAVE_SQUARE,
  AUDIO_TEST_SRC_WAVE_SAW,
  AUDIO_TEST_SRC_WAVE_TRIANGLE,
  AUDIO_TEST_SRC_WAVE_SILENCE,
  AUDIO_TEST_SRC_WAVE_WHITE_NOISE,
  AUDIO_TEST_SRC_WAVE_PINK_NOISE,
  AUDIO_TEST_SRC_WAVE_SINE_TAB,
  AUDIO_TEST_SRC_WAVE_TICKS,
  AUDIO_TEST_SRC_WAVE_GAUSSIAN_WHITE_NOISE,
  AUDIO_TEST_SRC_WAVE_RED_NOISE,
  AUDIO_TEST_SRC_WAVE_BLUE_NOISE,
  AUDIO_TEST_SRC_WAVE_VIOLET_NOISE
};

} // namespace Gst

#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::AudioTestSrcWave> : public Glib::Value_Enum<Gst::AudioTestSrcWave>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gst
{


/** A Wrapper for the audiotestsrc plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class AudioTestSrc
: public Gst::BaseSrc
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = AudioTestSrc;
  using CppClassType = AudioTestSrc_Class;
  using BaseObjectType = GstAudioTestSrc;
  using BaseClassType = GstAudioTestSrcClass;

  // noncopyable
  AudioTestSrc(const AudioTestSrc&) = delete;
  AudioTestSrc& operator=(const AudioTestSrc&) = delete;

private:  friend class AudioTestSrc_Class;
  static CppClassType audiotestsrc_class_;

protected:
  explicit AudioTestSrc(const Glib::ConstructParams& construct_params);
  explicit AudioTestSrc(GstAudioTestSrc* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  AudioTestSrc(AudioTestSrc&& src) noexcept;
  AudioTestSrc& operator=(AudioTestSrc&& src) noexcept;

  ~AudioTestSrc() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstAudioTestSrc*       gobj()       { return reinterpret_cast<GstAudioTestSrc*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstAudioTestSrc* gobj() const { return reinterpret_cast<GstAudioTestSrc*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstAudioTestSrc* gobj_copy();

private:

  
protected:
  AudioTestSrc();
  explicit AudioTestSrc(const Glib::ustring& name);

public:
  /** Creates a new audiotestsrc plugin with a unique name.
   */
  
  static Glib::RefPtr<AudioTestSrc> create();


  /** Creates a new audiotestsrc plugin with the given name.
   */
  
  static Glib::RefPtr<AudioTestSrc> create(const Glib::ustring& name);


  /** Number of samples in each outgoing buffer.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_samplesperbuffer() ;

/** Number of samples in each outgoing buffer.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_samplesperbuffer() const;

  /** Oscillator waveform.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::AudioTestSrcWave > property_wave() ;

/** Oscillator waveform.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::AudioTestSrcWave > property_wave() const;

  /** Frequency of test signal. The sample rate needs to be at least 4 times higher.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< double > property_freq() ;

/** Frequency of test signal. The sample rate needs to be at least 4 times higher.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< double > property_freq() const;

  /** Volume of test signal.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< double > property_volume() ;

/** Volume of test signal.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< double > property_volume() const;

  /** Whether to act as a live source.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_is_live() ;

/** Whether to act as a live source.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_is_live() const;

  /** An offset added to timestamps set on buffers (in ns).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< gint64 > property_timestamp_offset() ;

/** An offset added to timestamps set on buffers (in ns).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< gint64 > property_timestamp_offset() const;

  /** Can activate in push mode.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_can_activate_push() ;

/** Can activate in push mode.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_can_activate_push() const;

  /** Can activate in pull mode.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_can_activate_pull() ;

/** Can activate in pull mode.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_can_activate_pull() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::AudioTestSrc
   */
  Glib::RefPtr<Gst::AudioTestSrc> wrap(GstAudioTestSrc* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_AUDIOTESTSRC_H */

