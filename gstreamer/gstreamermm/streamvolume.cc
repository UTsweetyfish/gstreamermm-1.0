// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/streamvolume.h>
#include <gstreamermm/private/streamvolume_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2009 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/video/video-enumtypes.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::StreamVolume> wrap(GstStreamVolume* object, bool take_copy)
{
  return Glib::RefPtr<Gst::StreamVolume>( dynamic_cast<Gst::StreamVolume*> (Glib::wrap_auto_interface<Gst::StreamVolume> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gst
{


/* The *_Class implementation: */

const Glib::Interface_Class& StreamVolume_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &StreamVolume_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = gst_stream_volume_get_type();
  }

  return *this;
}

void StreamVolume_Class::iface_init_function(void* g_iface, void*)
{
  const auto klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != nullptr);


}


Glib::ObjectBase* StreamVolume_Class::wrap_new(GObject* object)
{
  return new StreamVolume((GstStreamVolume*)(object));
}


/* The implementation: */

StreamVolume::StreamVolume()
:
  Glib::Interface(streamvolume_class_.init())
{}

StreamVolume::StreamVolume(GstStreamVolume* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

StreamVolume::StreamVolume(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

StreamVolume::StreamVolume(StreamVolume&& src) noexcept
: Glib::Interface(std::move(src))
{}

StreamVolume& StreamVolume::operator=(StreamVolume&& src) noexcept
{
  Glib::Interface::operator=(std::move(src));
  return *this;
}

StreamVolume::~StreamVolume() noexcept
{}

// static
void StreamVolume::add_interface(GType gtype_implementer)
{
  streamvolume_class_.init().add_interface(gtype_implementer);
}

StreamVolume::CppClassType StreamVolume::streamvolume_class_; // initialize static member

GType StreamVolume::get_type()
{
  return streamvolume_class_.init().get_type();
}


GType StreamVolume::get_base_type()
{
  return gst_stream_volume_get_type();
}


double StreamVolume::get_volume(Gst::StreamVolumeFormat format)
{
  return gst_stream_volume_get_volume(gobj(), ((GstStreamVolumeFormat)(format)));
}

void StreamVolume::set_volume(Gst::StreamVolumeFormat format, double val)
{
  gst_stream_volume_set_volume(gobj(), ((GstStreamVolumeFormat)(format)), val);
}

bool StreamVolume::get_mute()
{
  return gst_stream_volume_get_mute(gobj());
}

void StreamVolume::set_mute(bool mute)
{
  gst_stream_volume_set_mute(gobj(), static_cast<int>(mute));
}

double StreamVolume::convert_volume(Gst::StreamVolumeFormat from, Gst::StreamVolumeFormat to, double val)
{
  return gst_stream_volume_convert_volume(((GstStreamVolumeFormat)(from)), ((GstStreamVolumeFormat)(to)), val);
}


Glib::PropertyProxy< bool > StreamVolume::property_mute() 
{
  return Glib::PropertyProxy< bool >(this, "mute");
}

Glib::PropertyProxy_ReadOnly< bool > StreamVolume::property_mute() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "mute");
}

Glib::PropertyProxy< double > StreamVolume::property_volume() 
{
  return Glib::PropertyProxy< double >(this, "volume");
}

Glib::PropertyProxy_ReadOnly< double > StreamVolume::property_volume() const
{
  return Glib::PropertyProxy_ReadOnly< double >(this, "volume");
}


} // namespace Gst


