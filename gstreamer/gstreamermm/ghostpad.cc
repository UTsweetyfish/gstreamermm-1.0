// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/ghostpad.h>
#include <gstreamermm/private/ghostpad_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <sstream>
#include <gst/gst.h>
#include <gstreamermm/padtemplate.h>
#include <gstreamermm/handle_error.h>


namespace Gst
{

GhostPad::GhostPad(const Glib::RefPtr<Gst::Pad>& target,
  const Glib::ustring& name)
  : // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Pad(Glib::ConstructParams(ghostpad_class_.init(), "name",(name.empty() ? static_cast<char*>(0) : name.c_str()),"direction",(target ? ((GstPadDirection) target->get_direction()) : GST_PAD_UNKNOWN), nullptr))
{
  if(!target)
    gstreamermm_handle_error("Gst::GhostPad::GhostPad(const Glib::ustring&,"
      " const Glib::RefPtr<Gst::Pad>&): "
      "Failed to construct ghost pad (name = " + name + ") from null target.");

  if(!gst_ghost_pad_construct(gobj()) ||
    !gst_ghost_pad_set_target(gobj(), target->gobj()))
  {
    gstreamermm_handle_error("Gst::GhostPad::GhostPad(const Glib::ustring&,"
      " const Glib::RefPtr<Gst::Pad>&): "
      "Unsuccessful construction of ghost pad (name = " + name +
      ", target = " + target->get_name() + ").");
  }
}

GhostPad::GhostPad( PadDirection direction, const Glib::ustring& name)
  : // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Pad(Glib::ConstructParams(ghostpad_class_.init(), "name",(name.empty() ? static_cast<char*>(0) : name.c_str()),"direction",static_cast<GstPadDirection>(direction), nullptr))
{
  if(!gst_ghost_pad_construct(gobj()))
  {
    std::stringstream int_conv_stream;
    int_conv_stream << direction;

    gstreamermm_handle_error("Gst::GhostPad::GhostPad(const Glib::ustring&, "
    "PadDirection): Unsuccessful construction of ghost pad (name = " +
    name + ", direction = " + int_conv_stream.str() + ").");
  }
}

GhostPad::GhostPad( const Glib::RefPtr<Gst::Pad>& target,
  const Glib::RefPtr<Gst::PadTemplate>& templ,
  const Glib::ustring& name)
  : // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Pad(Glib::ConstructParams(ghostpad_class_.init(), "name",(name.empty() ? static_cast<char*>(0) : name.c_str()),"direction",(target ? static_cast<GstPadDirection>(target->get_direction()) : GST_PAD_UNKNOWN),"template",Glib::unwrap(templ), nullptr))
{
  if(!target || !templ)
    gstreamermm_handle_error("Gst::GhostPad::GhostPad(const Glib::ustring&,"
      " const Glib::RefPtr<Gst::Pad>&, const Glib::RefPtr<Gst::PadTemplate>&):"
      " Failed to construct ghost pad (name = " + name + ") from null "
      "target or template.");

  if(!gst_ghost_pad_construct(gobj()) ||
    !gst_ghost_pad_set_target(gobj(), target->gobj()))
  {
    gstreamermm_handle_error("Gst::GhostPad::GhostPad(const Glib::ustring&,"
      " const Glib::RefPtr<Gst::Pad>&, const Glib::RefPtr<Gst::PadTemplate>&):"
      " Unsuccessful construction of ghost pad (name = " + name +
      ", target = " + target->get_name() + ", templ = " +
      templ->get_name_template() + ").");
  }
}

GhostPad::GhostPad( const Glib::RefPtr<Gst::PadTemplate>& templ,
  const Glib::ustring& name)
  : // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Pad(Glib::ConstructParams(ghostpad_class_.init(), "name",(name.empty() ? static_cast<char*>(0) : name.c_str()),"direction",(templ ? static_cast<GstPadDirection>(templ->get_direction()) : GST_PAD_UNKNOWN),"template",Glib::unwrap(templ), nullptr))
{
  if(!templ)
    gstreamermm_handle_error("Gst::GhostPad::GhostPad(const Glib::ustring&,"
      " const Glib::RefPtr<Gst::PadTemplate>&): "
      "Failed to construct ghost pad (name = " + name +
      ") from null template.");

  if(!gst_ghost_pad_construct(gobj()))
  {
    gstreamermm_handle_error("Gst::GhostPad::GhostPad(const Glib::ustring&,"
      " const Glib::RefPtr<Gst::PadTemplate>&): "
      "Unsuccessful construction of ghost pad (name = " + name +
      ", templ = " + templ->get_name_template() + ").");
  }
}

} //namespace Gst

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::GhostPad> wrap(GstGhostPad* object, bool take_copy)
{
  return Glib::RefPtr<Gst::GhostPad>( dynamic_cast<Gst::GhostPad*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& GhostPad_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &GhostPad_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_ghost_pad_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void GhostPad_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* GhostPad_Class::wrap_new(GObject* object)
{
  return new GhostPad((GstGhostPad*)object);
}


/* The implementation: */

GstGhostPad* GhostPad::gobj_copy()
{
  reference();
  return gobj();
}

GhostPad::GhostPad(const Glib::ConstructParams& construct_params)
:
  Pad(construct_params)
{

}

GhostPad::GhostPad(GstGhostPad* castitem)
:
  Pad((GstPad*)(castitem))
{}


GhostPad::GhostPad(GhostPad&& src) noexcept
: Pad(std::move(src))
{}

GhostPad& GhostPad::operator=(GhostPad&& src) noexcept
{
  Pad::operator=(std::move(src));
  return *this;
}


GhostPad::~GhostPad() noexcept
{}


GhostPad::CppClassType GhostPad::ghostpad_class_; // initialize static member

GType GhostPad::get_type()
{
  return ghostpad_class_.init().get_type();
}


GType GhostPad::get_base_type()
{
  return gst_ghost_pad_get_type();
}


Glib::RefPtr<GhostPad> GhostPad::create(const Glib::RefPtr<Gst::Pad>& target, const Glib::ustring& name)
{
  return Glib::RefPtr<GhostPad>( new GhostPad(target, name) );
}

Glib::RefPtr<GhostPad> GhostPad::create(PadDirection dir, const Glib::ustring& name)
{
  return Glib::RefPtr<GhostPad>( new GhostPad(dir, name) );
}

Glib::RefPtr<GhostPad> GhostPad::create(const Glib::RefPtr<Gst::Pad>& target, const Glib::RefPtr<Gst::PadTemplate>& templ, const Glib::ustring& name)
{
  return Glib::RefPtr<GhostPad>( new GhostPad(target, templ, name) );
}

Glib::RefPtr<GhostPad> GhostPad::create(const Glib::RefPtr<Gst::PadTemplate>& templ, const Glib::ustring& name)
{
  return Glib::RefPtr<GhostPad>( new GhostPad(templ, name) );
}

bool GhostPad::set_target(const Glib::RefPtr<Gst::Pad>& newtarget)
{
  return gst_ghost_pad_set_target(gobj(), Glib::unwrap(newtarget));
}

Glib::RefPtr<Gst::Pad> GhostPad::get_target()
{
  return Glib::wrap(gst_ghost_pad_get_target(gobj()));
}

Glib::RefPtr<const Gst::Pad> GhostPad::get_target() const
{
  return const_cast<GhostPad*>(this)->get_target();
}


} // namespace Gst


