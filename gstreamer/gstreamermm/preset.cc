// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/preset.h>
#include <gstreamermm/private/preset_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Gst
{

bool Preset::get_meta(const Glib::ustring& name, const Glib::ustring& tag,
  Glib::ustring& value) const
{
  gchar* meta = nullptr;

  gboolean result = gst_preset_get_meta(const_cast<GstPreset*>(gobj()),
    name.c_str(), tag.c_str(), &meta);
  value = meta;
  g_free(meta);
  return result;
}

gchar** Preset_Class::get_preset_names_vfunc_callback(GstPreset* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return const_cast<gchar**>((obj->get_preset_names_vfunc()).data());
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_preset_names)
    return (*base->get_preset_names)(self);


  typedef gchar** RType;
  return RType();
}
gchar** Preset_Class::get_property_names_vfunc_callback(GstPreset* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return const_cast<gchar**>((obj->get_property_names_vfunc()).data());
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_property_names)
    return (*base->get_property_names)(self);


  typedef gchar** RType;
  return RType();
}
gboolean Preset_Class::get_meta_vfunc_callback(GstPreset* self, const gchar* name, const gchar* tag, gchar** value)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        Glib::ustring cpp_value;
        // Call the virtual member method, which derived classes might override.
        const gboolean result = static_cast<int>(obj->get_meta_vfunc(Glib::convert_const_gchar_ptr_to_ustring(name)
, Glib::convert_const_gchar_ptr_to_ustring(tag) , cpp_value));
        *value = g_strdup(cpp_value.c_str());
        return result;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->get_meta)
    return (*base->get_meta)(self, name, tag, value);


  typedef gboolean RType;
  return RType();
}
Glib::StringArrayHandle Gst::Preset::get_preset_names_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_preset_names)
    return Glib::StringArrayHandle((*base->get_preset_names)(const_cast<GstPreset*>(gobj())), Glib::OWNERSHIP_DEEP);

  return Glib::StringArrayHandle(nullptr, Glib::OWNERSHIP_NONE);
}
Glib::StringArrayHandle Gst::Preset::get_property_names_vfunc() const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_property_names)
    return Glib::StringArrayHandle((*base->get_property_names)(const_cast<GstPreset*>(gobj())), Glib::OWNERSHIP_DEEP);

  return Glib::StringArrayHandle(nullptr, Glib::OWNERSHIP_NONE);
}
bool Gst::Preset::get_meta_vfunc(const Glib::ustring& name,
  const Glib::ustring& tag, Glib::ustring& value) const
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->get_meta)
  {
    gchar* gst_value;
    const bool result = (*base->get_meta)(const_cast<GstPreset*>(gobj()),((name).c_str()),((tag).c_str()), &gst_value);
    value = gst_value;
    g_free(gst_value);
    return result;
  }

  typedef bool RType;
  return RType();
}

}

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::Preset> wrap(GstPreset* object, bool take_copy)
{
  return Glib::RefPtr<Gst::Preset>( dynamic_cast<Gst::Preset*> (Glib::wrap_auto_interface<Gst::Preset> ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} // namespace Glib


namespace Gst
{


/* The *_Class implementation: */

const Glib::Interface_Class& Preset_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Interface_Class has to know the interface init function
    // in order to add interfaces to implementing types.
    class_init_func_ = &Preset_Class::iface_init_function;

    // We can not derive from another interface, and it is not necessary anyway.
    gtype_ = gst_preset_get_type();
  }

  return *this;
}

void Preset_Class::iface_init_function(void* g_iface, void*)
{
  const auto klass = static_cast<BaseClassType*>(g_iface);

  //This is just to avoid an "unused variable" warning when there are no vfuncs or signal handlers to connect.
  //This is a temporary fix until I find out why I can not seem to derive a GtkFileChooser interface. murrayc
  g_assert(klass != nullptr);

  klass->load_preset = &load_preset_vfunc_callback;
  klass->save_preset = &save_preset_vfunc_callback;
  klass->rename_preset = &rename_preset_vfunc_callback;
  klass->delete_preset = &delete_preset_vfunc_callback;
  klass->set_meta = &set_meta_vfunc_callback;
  klass->get_preset_names = &get_preset_names_vfunc_callback;
  klass->get_property_names = &get_property_names_vfunc_callback;
  klass->get_meta = &get_meta_vfunc_callback;
  
}

gboolean Preset_Class::load_preset_vfunc_callback(GstPreset* self, const gchar* name)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->load_preset_vfunc(Glib::convert_const_gchar_ptr_to_ustring(name)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->load_preset)
    return (*base->load_preset)(self, name);

  using RType = gboolean;
  return RType();
}
gboolean Preset_Class::save_preset_vfunc_callback(GstPreset* self, const gchar* name)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->save_preset_vfunc(Glib::convert_const_gchar_ptr_to_ustring(name)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->save_preset)
    return (*base->save_preset)(self, name);

  using RType = gboolean;
  return RType();
}
gboolean Preset_Class::rename_preset_vfunc_callback(GstPreset* self, const gchar* old_name, const gchar* new_name)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->rename_preset_vfunc(Glib::convert_const_gchar_ptr_to_ustring(old_name)
, Glib::convert_const_gchar_ptr_to_ustring(new_name)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->rename_preset)
    return (*base->rename_preset)(self, old_name, new_name);

  using RType = gboolean;
  return RType();
}
gboolean Preset_Class::delete_preset_vfunc_callback(GstPreset* self, const gchar* name)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->delete_preset_vfunc(Glib::convert_const_gchar_ptr_to_ustring(name)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->delete_preset)
    return (*base->delete_preset)(self, name);

  using RType = gboolean;
  return RType();
}
gboolean Preset_Class::set_meta_vfunc_callback(GstPreset* self, const gchar* name, const gchar* tag, const gchar* value)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        return static_cast<int>(obj->set_meta_vfunc(Glib::convert_const_gchar_ptr_to_ustring(name)
, Glib::convert_const_gchar_ptr_to_ustring(tag)
, Glib::convert_const_gchar_ptr_to_ustring(value)
));
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(self), CppObjectType::get_type()) // Get the interface.
)  );

  // Call the original underlying C function:
  if(base && base->set_meta)
    return (*base->set_meta)(self, name, tag, value);

  using RType = gboolean;
  return RType();
}


Glib::ObjectBase* Preset_Class::wrap_new(GObject* object)
{
  return new Preset((GstPreset*)(object));
}


/* The implementation: */

Preset::Preset()
:
  Glib::Interface(preset_class_.init())
{}

Preset::Preset(GstPreset* castitem)
:
  Glib::Interface((GObject*)(castitem))
{}

Preset::Preset(const Glib::Interface_Class& interface_class)
: Glib::Interface(interface_class)
{
}

Preset::Preset(Preset&& src) noexcept
: Glib::Interface(std::move(src))
{}

Preset& Preset::operator=(Preset&& src) noexcept
{
  Glib::Interface::operator=(std::move(src));
  return *this;
}

Preset::~Preset() noexcept
{}

// static
void Preset::add_interface(GType gtype_implementer)
{
  preset_class_.init().add_interface(gtype_implementer);
}

Preset::CppClassType Preset::preset_class_; // initialize static member

GType Preset::get_type()
{
  return preset_class_.init().get_type();
}


GType Preset::get_base_type()
{
  return gst_preset_get_type();
}


Glib::StringArrayHandle Preset::get_preset_names() const
{
  return Glib::StringArrayHandle(gst_preset_get_preset_names(const_cast<GstPreset*>(gobj())), Glib::OWNERSHIP_DEEP);
}

Glib::StringArrayHandle Preset::get_property_names() const
{
  return Glib::StringArrayHandle(gst_preset_get_property_names(const_cast<GstPreset*>(gobj())), Glib::OWNERSHIP_DEEP);
}

bool Preset::load_preset(const Glib::ustring& name)
{
  return gst_preset_load_preset(gobj(), name.c_str());
}

bool Preset::save_preset(const Glib::ustring& name)
{
  return gst_preset_save_preset(gobj(), name.c_str());
}

bool Preset::rename_preset(const Glib::ustring& old_name, const Glib::ustring& new_name)
{
  return gst_preset_rename_preset(gobj(), old_name.c_str(), new_name.c_str());
}

bool Preset::delete_preset(const Glib::ustring& name)
{
  return gst_preset_delete_preset(gobj(), name.c_str());
}

bool Preset::set_meta(const Glib::ustring& name, const Glib::ustring& tag, const Glib::ustring& value)
{
  return gst_preset_set_meta(gobj(), name.c_str(), tag.c_str(), value.c_str());
}

bool Preset::is_editable() const
{
  return gst_preset_is_editable(const_cast<GstPreset*>(gobj()));
}


bool Gst::Preset::load_preset_vfunc(const Glib::ustring& name) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->load_preset)
  {
    bool retval((*base->load_preset)(gobj(),name.c_str()));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::Preset::save_preset_vfunc(const Glib::ustring& name) const
{
  const auto base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->save_preset)
  {
    bool retval((*base->save_preset)(const_cast<GstPreset*>(gobj()),name.c_str()));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::Preset::rename_preset_vfunc(const Glib::ustring& old_name, const Glib::ustring& new_name) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->rename_preset)
  {
    bool retval((*base->rename_preset)(gobj(),old_name.c_str(),new_name.c_str()));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::Preset::delete_preset_vfunc(const Glib::ustring& name) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->delete_preset)
  {
    bool retval((*base->delete_preset)(gobj(),name.c_str()));
    return retval;
  }

  using RType = bool;
  return RType();
}
bool Gst::Preset::set_meta_vfunc(const Glib::ustring& name, const Glib::ustring& tag, const Glib::ustring& value) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_interface_peek_parent( // Get the parent interface of the interface (The original underlying C interface).
g_type_interface_peek(G_OBJECT_GET_CLASS(gobject_), CppObjectType::get_type()) // Get the interface.
)  );

  if(base && base->set_meta)
  {
    bool retval((*base->set_meta)(gobj(),name.c_str(),tag.c_str(),value.c_str()));
    return retval;
  }

  using RType = bool;
  return RType();
}


} // namespace Gst


