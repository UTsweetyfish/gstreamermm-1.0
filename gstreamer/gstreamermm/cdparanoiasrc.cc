// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/cdparanoiasrc.h>
#include <gstreamermm/private/cdparanoiasrc_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

static GType gst_cd_paranoia_mode_get_type()
{
  static GType const type = g_type_from_name("GstCdParanoiaMode");
  return type;
}

GType gst_cd_paranoia_src_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("cdparanoiasrc");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

CdParanoiaSrc::CdParanoiaSrc()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::PushSrc(Glib::ConstructParams(cdparanoiasrc_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

CdParanoiaSrc::CdParanoiaSrc(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::PushSrc(Glib::ConstructParams(cdparanoiasrc_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{


static void CdParanoiaSrc_signal_transport_error_callback(GstCdParanoiaSrc* self, gint p0,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,int >;

  auto obj = dynamic_cast<CdParanoiaSrc*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo CdParanoiaSrc_signal_transport_error_info =
{
  "transport-error",
  (GCallback) &CdParanoiaSrc_signal_transport_error_callback,
  (GCallback) &CdParanoiaSrc_signal_transport_error_callback
};


static void CdParanoiaSrc_signal_uncorrected_error_callback(GstCdParanoiaSrc* self, gint p0,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,int >;

  auto obj = dynamic_cast<CdParanoiaSrc*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo CdParanoiaSrc_signal_uncorrected_error_info =
{
  "uncorrected-error",
  (GCallback) &CdParanoiaSrc_signal_uncorrected_error_callback,
  (GCallback) &CdParanoiaSrc_signal_uncorrected_error_callback
};


} // anonymous namespace

// static
GType Glib::Value<Gst::CdParanoiaMode>::value_type()
{
  return gst_cd_paranoia_mode_get_type();
}


namespace Glib
{

Glib::RefPtr<Gst::CdParanoiaSrc> wrap(GstCdParanoiaSrc* object, bool take_copy)
{
  return Glib::RefPtr<Gst::CdParanoiaSrc>( dynamic_cast<Gst::CdParanoiaSrc*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& CdParanoiaSrc_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &CdParanoiaSrc_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_cd_paranoia_src_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void CdParanoiaSrc_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* CdParanoiaSrc_Class::wrap_new(GObject* object)
{
  return new CdParanoiaSrc((GstCdParanoiaSrc*)object);
}


/* The implementation: */

GstCdParanoiaSrc* CdParanoiaSrc::gobj_copy()
{
  reference();
  return gobj();
}

CdParanoiaSrc::CdParanoiaSrc(const Glib::ConstructParams& construct_params)
:
  Gst::PushSrc(construct_params)
{

}

CdParanoiaSrc::CdParanoiaSrc(GstCdParanoiaSrc* castitem)
:
  Gst::PushSrc((GstPushSrc*)(castitem))
{}


CdParanoiaSrc::CdParanoiaSrc(CdParanoiaSrc&& src) noexcept
: Gst::PushSrc(std::move(src))
{}

CdParanoiaSrc& CdParanoiaSrc::operator=(CdParanoiaSrc&& src) noexcept
{
  Gst::PushSrc::operator=(std::move(src));
  return *this;
}


CdParanoiaSrc::~CdParanoiaSrc() noexcept
{}


CdParanoiaSrc::CppClassType CdParanoiaSrc::cdparanoiasrc_class_; // initialize static member

GType CdParanoiaSrc::get_type()
{
  return cdparanoiasrc_class_.init().get_type();
}


GType CdParanoiaSrc::get_base_type()
{
  return gst_cd_paranoia_src_gstreamermm_get_type();
}


Glib::RefPtr<CdParanoiaSrc> CdParanoiaSrc::create()
{
  return Glib::RefPtr<CdParanoiaSrc>( new CdParanoiaSrc() );
}

Glib::RefPtr<CdParanoiaSrc> CdParanoiaSrc::create(const Glib::ustring& name)
{
  return Glib::RefPtr<CdParanoiaSrc>( new CdParanoiaSrc(name) );
}


Glib::SignalProxy< void,int > CdParanoiaSrc::signal_transport_error()
{
  return Glib::SignalProxy< void,int >(this, &CdParanoiaSrc_signal_transport_error_info);
}


Glib::SignalProxy< void,int > CdParanoiaSrc::signal_uncorrected_error()
{
  return Glib::SignalProxy< void,int >(this, &CdParanoiaSrc_signal_uncorrected_error_info);
}


Glib::PropertyProxy< int > CdParanoiaSrc::property_read_speed() 
{
  return Glib::PropertyProxy< int >(this, "read-speed");
}

Glib::PropertyProxy_ReadOnly< int > CdParanoiaSrc::property_read_speed() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "read-speed");
}

Glib::PropertyProxy< Gst::CdParanoiaMode > CdParanoiaSrc::property_paranoia_mode() 
{
  return Glib::PropertyProxy< Gst::CdParanoiaMode >(this, "paranoia-mode");
}

Glib::PropertyProxy_ReadOnly< Gst::CdParanoiaMode > CdParanoiaSrc::property_paranoia_mode() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::CdParanoiaMode >(this, "paranoia-mode");
}

Glib::PropertyProxy< int > CdParanoiaSrc::property_search_overlap() 
{
  return Glib::PropertyProxy< int >(this, "search-overlap");
}

Glib::PropertyProxy_ReadOnly< int > CdParanoiaSrc::property_search_overlap() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "search-overlap");
}

Glib::PropertyProxy< Glib::ustring > CdParanoiaSrc::property_generic_device() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "generic-device");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > CdParanoiaSrc::property_generic_device() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "generic-device");
}

Glib::PropertyProxy< int > CdParanoiaSrc::property_cache_size() 
{
  return Glib::PropertyProxy< int >(this, "cache-size");
}

Glib::PropertyProxy_ReadOnly< int > CdParanoiaSrc::property_cache_size() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "cache-size");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


