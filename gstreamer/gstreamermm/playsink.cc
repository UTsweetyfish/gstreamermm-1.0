// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/playsink.h>
#include <gstreamermm/private/playsink_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

static GType gst_play_sink_send_event_mode_get_type()
{
  static GType const type = g_type_from_name("GstPlaySinkSendEventMode");
  return type;
}

GType gst_play_sink_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("playsink");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

PlaySink::PlaySink()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Bin(Glib::ConstructParams(playsink_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

PlaySink::PlaySink(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Bin(Glib::ConstructParams(playsink_class_.init(), "name",name.c_str(), nullptr))
{}

bool PlaySink::reconfigure()
{
  gboolean result;
  g_signal_emit_by_name(gobj(), "reconfigure", &result, static_cast<void*>(0));
  return result;
}

Glib::RefPtr<Gst::Sample> PlaySink::convert_sample(const Glib::RefPtr<Gst::Caps>& arg0)
{
  GstSample* result;
  g_signal_emit_by_name(gobj(), "convert-sample", Glib::unwrap(arg0), &result, static_cast<void*>(0));
  return Glib::wrap(result);
}

}

namespace
{


static gboolean PlaySink_signal_reconfigure_callback(GstPlaySink* self, void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< bool >;

  auto obj = dynamic_cast<PlaySink*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return static_cast<int>((*static_cast<SlotType*>(slot))());
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static gboolean PlaySink_signal_reconfigure_notify_callback(GstPlaySink* self,  void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void >;

  auto obj = dynamic_cast<PlaySink*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))();
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static const Glib::SignalProxyInfo PlaySink_signal_reconfigure_info =
{
  "reconfigure",
  (GCallback) &PlaySink_signal_reconfigure_callback,
  (GCallback) &PlaySink_signal_reconfigure_notify_callback
};


static GstSample* PlaySink_signal_convert_sample_callback(GstPlaySink* self, GstCaps* p0,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< Glib::RefPtr<Gst::Sample>,const Glib::RefPtr<Gst::Caps>& >;

  auto obj = dynamic_cast<PlaySink*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return ((*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
))->gobj_copy();
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = GstSample*;
  return RType();
}

static GstSample* PlaySink_signal_convert_sample_notify_callback(GstPlaySink* self, GstCaps* p0, void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,const Glib::RefPtr<Gst::Caps>& >;

  auto obj = dynamic_cast<PlaySink*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = GstSample*;
  return RType();
}

static const Glib::SignalProxyInfo PlaySink_signal_convert_sample_info =
{
  "convert-sample",
  (GCallback) &PlaySink_signal_convert_sample_callback,
  (GCallback) &PlaySink_signal_convert_sample_notify_callback
};


} // anonymous namespace

// static
GType Glib::Value<Gst::PlaySinkSendEventMode>::value_type()
{
  return gst_play_sink_send_event_mode_get_type();
}


namespace Glib
{

Glib::RefPtr<Gst::PlaySink> wrap(GstPlaySink* object, bool take_copy)
{
  return Glib::RefPtr<Gst::PlaySink>( dynamic_cast<Gst::PlaySink*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& PlaySink_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &PlaySink_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_play_sink_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Gst::StreamVolume::add_interface(get_type());
  Gst::VideoOverlay::add_interface(get_type());
  Gst::Navigation::add_interface(get_type());
  Gst::ColorBalance::add_interface(get_type());

  }

  return *this;
}


void PlaySink_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* PlaySink_Class::wrap_new(GObject* object)
{
  return new PlaySink((GstPlaySink*)object);
}


/* The implementation: */

GstPlaySink* PlaySink::gobj_copy()
{
  reference();
  return gobj();
}

PlaySink::PlaySink(const Glib::ConstructParams& construct_params)
:
  Gst::Bin(construct_params)
{

}

PlaySink::PlaySink(GstPlaySink* castitem)
:
  Gst::Bin((GstBin*)(castitem))
{}


PlaySink::PlaySink(PlaySink&& src) noexcept
: Gst::Bin(std::move(src))
  , Gst::StreamVolume(std::move(src))
  , Gst::VideoOverlay(std::move(src))
  , Gst::Navigation(std::move(src))
  , Gst::ColorBalance(std::move(src))
{}

PlaySink& PlaySink::operator=(PlaySink&& src) noexcept
{
  Gst::Bin::operator=(std::move(src));
  Gst::StreamVolume::operator=(std::move(src));
  Gst::VideoOverlay::operator=(std::move(src));
  Gst::Navigation::operator=(std::move(src));
  Gst::ColorBalance::operator=(std::move(src));
  return *this;
}


PlaySink::~PlaySink() noexcept
{}


PlaySink::CppClassType PlaySink::playsink_class_; // initialize static member

GType PlaySink::get_type()
{
  return playsink_class_.init().get_type();
}


GType PlaySink::get_base_type()
{
  return gst_play_sink_gstreamermm_get_type();
}


Glib::RefPtr<PlaySink> PlaySink::create()
{
  return Glib::RefPtr<PlaySink>( new PlaySink() );
}

Glib::RefPtr<PlaySink> PlaySink::create(const Glib::ustring& name)
{
  return Glib::RefPtr<PlaySink>( new PlaySink(name) );
}


Glib::SignalProxy< bool > PlaySink::signal_reconfigure()
{
  return Glib::SignalProxy< bool >(this, &PlaySink_signal_reconfigure_info);
}


Glib::SignalProxy< Glib::RefPtr<Gst::Sample>,const Glib::RefPtr<Gst::Caps>& > PlaySink::signal_convert_sample()
{
  return Glib::SignalProxy< Glib::RefPtr<Gst::Sample>,const Glib::RefPtr<Gst::Caps>& >(this, &PlaySink_signal_convert_sample_info);
}


Glib::PropertyProxy< Gst::PlayFlags > PlaySink::property_flags() 
{
  return Glib::PropertyProxy< Gst::PlayFlags >(this, "flags");
}

Glib::PropertyProxy_ReadOnly< Gst::PlayFlags > PlaySink::property_flags() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::PlayFlags >(this, "flags");
}

Glib::PropertyProxy< bool > PlaySink::property_mute() 
{
  return Glib::PropertyProxy< bool >(this, "mute");
}

Glib::PropertyProxy_ReadOnly< bool > PlaySink::property_mute() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "mute");
}

Glib::PropertyProxy< double > PlaySink::property_volume() 
{
  return Glib::PropertyProxy< double >(this, "volume");
}

Glib::PropertyProxy_ReadOnly< double > PlaySink::property_volume() const
{
  return Glib::PropertyProxy_ReadOnly< double >(this, "volume");
}

Glib::PropertyProxy_WriteOnly< Glib::ustring > PlaySink::property_subtitle_font_desc() 
{
  return Glib::PropertyProxy_WriteOnly< Glib::ustring >(this, "subtitle-font-desc");
}

Glib::PropertyProxy< Glib::ustring > PlaySink::property_subtitle_encoding() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "subtitle-encoding");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > PlaySink::property_subtitle_encoding() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "subtitle-encoding");
}

Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > PlaySink::property_vis_plugin() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Element> >(this, "vis-plugin");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > PlaySink::property_vis_plugin() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> >(this, "vis-plugin");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Sample> > PlaySink::property_sample() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Sample> >(this, "sample");
}

Glib::PropertyProxy< gint64 > PlaySink::property_av_offset() 
{
  return Glib::PropertyProxy< gint64 >(this, "av-offset");
}

Glib::PropertyProxy_ReadOnly< gint64 > PlaySink::property_av_offset() const
{
  return Glib::PropertyProxy_ReadOnly< gint64 >(this, "av-offset");
}

Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > PlaySink::property_video_sink() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Element> >(this, "video-sink");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > PlaySink::property_video_sink() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> >(this, "video-sink");
}

Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > PlaySink::property_audio_sink() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Element> >(this, "audio-sink");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > PlaySink::property_audio_sink() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> >(this, "audio-sink");
}

Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > PlaySink::property_text_sink() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Element> >(this, "text-sink");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > PlaySink::property_text_sink() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> >(this, "text-sink");
}

Glib::PropertyProxy< Gst::PlaySinkSendEventMode > PlaySink::property_send_event_mode() 
{
  return Glib::PropertyProxy< Gst::PlaySinkSendEventMode >(this, "send-event-mode");
}

Glib::PropertyProxy_ReadOnly< Gst::PlaySinkSendEventMode > PlaySink::property_send_event_mode() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::PlaySinkSendEventMode >(this, "send-event-mode");
}

Glib::PropertyProxy< bool > PlaySink::property_force_aspect_ratio() 
{
  return Glib::PropertyProxy< bool >(this, "force-aspect-ratio");
}

Glib::PropertyProxy_ReadOnly< bool > PlaySink::property_force_aspect_ratio() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "force-aspect-ratio");
}

Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > PlaySink::property_video_filter() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Element> >(this, "video-filter");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > PlaySink::property_video_filter() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> >(this, "video-filter");
}

Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > PlaySink::property_audio_filter() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Element> >(this, "audio-filter");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > PlaySink::property_audio_filter() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> >(this, "audio-filter");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


