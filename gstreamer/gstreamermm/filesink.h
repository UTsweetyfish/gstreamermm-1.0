// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_FILESINK_H
#define _GSTREAMERMM_FILESINK_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/basesink.h>
#include <gstreamermm/urihandler.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstFileSink = struct _GstFileSink;
using GstFileSinkClass = struct _GstFileSinkClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class FileSink_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/** 
 *
 * @ingroup gstreamermmEnums
 */
enum FileSinkBufferMode
{
  FILE_SINK_BUFFER_MODE_DEFAULT = -1,
  FILE_SINK_BUFFER_MODE_FULL = _IOFBF,
  FILE_SINK_BUFFER_MODE_LINE = _IOLBF,
  FILE_SINK_BUFFER_MODE_UNBUFFERED = _IONBF
};

} // namespace Gst

#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::FileSinkBufferMode> : public Glib::Value_Enum<Gst::FileSinkBufferMode>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gst
{


/** A Wrapper for the filesink plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class FileSink
: public Gst::BaseSink, public Gst::URIHandler
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = FileSink;
  using CppClassType = FileSink_Class;
  using BaseObjectType = GstFileSink;
  using BaseClassType = GstFileSinkClass;

  // noncopyable
  FileSink(const FileSink&) = delete;
  FileSink& operator=(const FileSink&) = delete;

private:  friend class FileSink_Class;
  static CppClassType filesink_class_;

protected:
  explicit FileSink(const Glib::ConstructParams& construct_params);
  explicit FileSink(GstFileSink* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  FileSink(FileSink&& src) noexcept;
  FileSink& operator=(FileSink&& src) noexcept;

  ~FileSink() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstFileSink*       gobj()       { return reinterpret_cast<GstFileSink*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstFileSink* gobj() const { return reinterpret_cast<GstFileSink*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstFileSink* gobj_copy();

private:

  
protected:
  FileSink();
  explicit FileSink(const Glib::ustring& name);

public:
  /** Creates a new filesink plugin with a unique name.
   */
  
  static Glib::RefPtr<FileSink> create();


  /** Creates a new filesink plugin with the given name.
   */
  
  static Glib::RefPtr<FileSink> create(const Glib::ustring& name);


  /** Location of the file to write.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_location() ;

/** Location of the file to write.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_location() const;

  /** The buffering mode to use.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::FileSinkBufferMode > property_buffer_mode() ;

/** The buffering mode to use.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::FileSinkBufferMode > property_buffer_mode() const;

  /** Size of buffer in number of bytes for line or full buffer-mode.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_buffer_size() ;

/** Size of buffer in number of bytes for line or full buffer-mode.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_buffer_size() const;

  /** Append to an already existing file.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_append() ;

/** Append to an already existing file.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_append() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::FileSink
   */
  Glib::RefPtr<Gst::FileSink> wrap(GstFileSink* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_FILESINK_H */

