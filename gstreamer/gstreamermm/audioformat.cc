// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/audioformat.h>
#include <gstreamermm/private/audioformat_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Gst
{

AudioFormatInfo::AudioFormatInfo(const GstAudioFormatInfo *m_info)
: m_info(*m_info)
{
}

}

namespace
{
} // anonymous namespace

// static
GType Glib::Value<Gst::AudioFormat>::value_type()
{
  return gst_audio_format_get_type();
}

// static
GType Glib::Value<Gst::AudioFormatFlags>::value_type()
{
  return gst_audio_format_flags_get_type();
}

// static
GType Glib::Value<Gst::AudioPackFlags>::value_type()
{
  return gst_audio_pack_flags_get_type();
}


namespace Gst
{


AudioFormat AudioFormatInfo::get_format() const
{
  return ((AudioFormat)(gobj()->format));
}

void AudioFormatInfo::set_format(const AudioFormat& value)
{
  gobj()->format = ((GstAudioFormat)(value));
}

std::string AudioFormatInfo::get_name() const
{
  return Glib::convert_const_gchar_ptr_to_stdstring(gobj()->name);
}

void AudioFormatInfo::set_name(const std::string& value)
{
  gobj()->name = value.c_str();
}

std::string AudioFormatInfo::get_description() const
{
  return Glib::convert_const_gchar_ptr_to_stdstring(gobj()->description);
}

void AudioFormatInfo::set_description(const std::string& value)
{
  gobj()->description = value.c_str();
}

AudioFormatFlags AudioFormatInfo::get_flags() const
{
  return ((AudioFormatFlags)(gobj()->flags));
}

void AudioFormatInfo::set_flags(const AudioFormatFlags& value)
{
  gobj()->flags = ((GstAudioFormatFlags)(value));
}

int AudioFormatInfo::get_endianness() const
{
  return gobj()->endianness;
}

void AudioFormatInfo::set_endianness(const int& value)
{
  gobj()->endianness = value;
}

int AudioFormatInfo::get_width() const
{
  return gobj()->width;
}

void AudioFormatInfo::set_width(const int& value)
{
  gobj()->width = value;
}

int AudioFormatInfo::get_depth() const
{
  return gobj()->depth;
}

void AudioFormatInfo::set_depth(const int& value)
{
  gobj()->depth = value;
}

AudioFormat AudioFormatInfo::get_unpack_format() const
{
  return ((AudioFormat)(gobj()->unpack_format));
}

void AudioFormatInfo::set_unpack_format(const AudioFormat& value)
{
  gobj()->unpack_format = ((GstAudioFormat)(value));
}


} // namespace Gst


