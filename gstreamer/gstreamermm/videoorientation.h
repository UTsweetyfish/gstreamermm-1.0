// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_VIDEOORIENTATION_H
#define _GSTREAMERMM_VIDEOORIENTATION_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/video/videoorientation.h>
#include <glibmm/interface.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstVideoOrientation = struct _GstVideoOrientation;
using GstVideoOrientationClass = struct _GstVideoOrientationClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class VideoOrientation_Class; } // namespace Gst
#endif // DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** An interface for elements providing video orientation controls.
 * The interface allows unified access to control flipping and autocenter
 * operation of video-sources or operators.
 * @ingroup GstInterfaces
 */

class VideoOrientation : public Glib::Interface
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = VideoOrientation;
  using CppClassType = VideoOrientation_Class;
  using BaseObjectType = GstVideoOrientation;
  using BaseClassType = GstVideoOrientationInterface;

  // noncopyable
  VideoOrientation(const VideoOrientation&) = delete;
  VideoOrientation& operator=(const VideoOrientation&) = delete;

private:
  friend class VideoOrientation_Class;
  static CppClassType videoorientation_class_;

#endif /* DOXYGEN_SHOULD_SKIP_THIS */
protected:
  /**
   * You should derive from this class to use it.
   */
  VideoOrientation();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  /** Called by constructors of derived classes. Provide the result of
   * the Class init() function to ensure that it is properly
   * initialized.
   *
   * @param interface_class The Class object for the derived type.
   */
  explicit VideoOrientation(const Glib::Interface_Class& interface_class);

public:
  // This is public so that C++ wrapper instances can be
  // created for C instances of unwrapped types.
  // For instance, if an unexpected C type implements the C interface.
  explicit VideoOrientation(GstVideoOrientation* castitem);

protected:
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  VideoOrientation(VideoOrientation&& src) noexcept;
  VideoOrientation& operator=(VideoOrientation&& src) noexcept;

  ~VideoOrientation() noexcept override;

  static void add_interface(GType gtype_implementer);

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstVideoOrientation*       gobj()       { return reinterpret_cast<GstVideoOrientation*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstVideoOrientation* gobj() const { return reinterpret_cast<GstVideoOrientation*>(gobject_); }

private:


public:
  
  /** Get the horizontal centering offset from the given object.
   * 
   * @param center Return location for the result.
   * @return <tt>true</tt> in case the element supports centering.
   */
  bool get_hcenter(int& center) const;
  
  /** Get the horizontal flipping state (<tt>true</tt> for flipped) from the given object.
   * 
   * @param flip Return location for the result.
   * @return <tt>true</tt> in case the element supports flipping.
   */

  bool get_hflip(bool& flip) const;
  
  /** Get the vertical centering offset from the given object.
   * 
   * @param center Return location for the result.
   * @return <tt>true</tt> in case the element supports centering.
   */
  bool get_vcenter(int& center) const;
  
  /** Get the vertical flipping state (<tt>true</tt> for flipped) from the given object.
   * 
   * @param flip Return location for the result.
   * @return <tt>true</tt> in case the element supports flipping.
   */

  bool get_vflip(bool& flip) const;
  
  /** Set the horizontal centering offset for the given object.
   * 
   * @param center Centering offset.
   * @return <tt>true</tt> in case the element supports centering.
   */
  bool set_hcenter(int center);
  
  /** Set the horizontal flipping state (<tt>true</tt> for flipped) for the given object.
   * 
   * @param flip Use flipping.
   * @return <tt>true</tt> in case the element supports flipping.
   */
  bool set_hflip(bool flip);
  
  /** Set the vertical centering offset for the given object.
   * 
   * @param center Centering offset.
   * @return <tt>true</tt> in case the element supports centering.
   */
  bool set_vcenter(int center);
  
  /** Set the vertical flipping state (<tt>true</tt> for flipped) for the given object.
   * 
   * @param flip Use flipping.
   * @return <tt>true</tt> in case the element supports flipping.
   */
  bool set_vflip(bool flip);

  virtual bool get_hflip_vfunc(bool& flip) const;
  virtual bool get_vflip_vfunc(bool& flip) const;

    virtual bool get_hcenter_vfunc(int& center) const;

    virtual bool get_vcenter_vfunc(int& center) const;

    virtual bool set_hflip_vfunc(bool flip);

    virtual bool set_vflip_vfunc(bool flip);

    virtual bool set_hcenter_vfunc(int center);

    virtual bool set_vcenter_vfunc(int center);


protected:

  
public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::VideoOrientation
   */
  Glib::RefPtr<Gst::VideoOrientation> wrap(GstVideoOrientation* object, bool take_copy = false);

} // namespace Glib


#endif /* _GSTREAMERMM_VIDEOORIENTATION_H */

