// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_TYPEFINDFACTORY_H
#define _GSTREAMERMM_TYPEFINDFACTORY_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2009-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gst.h>
#include <gstreamermm/pluginfeature.h>
#include <glibmm/arrayhandle.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstTypeFindFactory = struct _GstTypeFindFactory;
using GstTypeFindFactoryClass = struct _GstTypeFindFactoryClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class TypeFindFactory_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

class Caps;
class TypeFind;

/** A class used to get information about registered typefind functions.
 * The methods in this class allow querying information about registered
 * typefind functions.
 *
 * Writing typefinders in C++ is not possible presently.
 *
 * Last reviewed on 2016-08-27 (1.8.0).
 */

class TypeFindFactory : public PluginFeature
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = TypeFindFactory;
  using CppClassType = TypeFindFactory_Class;
  using BaseObjectType = GstTypeFindFactory;
  using BaseClassType = GstTypeFindFactoryClass;

  // noncopyable
  TypeFindFactory(const TypeFindFactory&) = delete;
  TypeFindFactory& operator=(const TypeFindFactory&) = delete;

private:  friend class TypeFindFactory_Class;
  static CppClassType typefindfactory_class_;

protected:
  explicit TypeFindFactory(const Glib::ConstructParams& construct_params);
  explicit TypeFindFactory(GstTypeFindFactory* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  TypeFindFactory(TypeFindFactory&& src) noexcept;
  TypeFindFactory& operator=(TypeFindFactory&& src) noexcept;

  ~TypeFindFactory() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstTypeFindFactory*       gobj()       { return reinterpret_cast<GstTypeFindFactory*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstTypeFindFactory* gobj() const { return reinterpret_cast<GstTypeFindFactory*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstTypeFindFactory* gobj_copy();

private:


public:
 

  /** Gets the list of all registered typefind factories. You must free the
   * list using Gst::PluginFeature::list_free().
   * 
   * The returned factories are sorted by highest rank first, and then by
   * factory name.
   * 
   * Free-function: gst_plugin_feature_list_free
   * 
   * @return The list of all
   * registered Gst::TypeFindFactory.
   */
  static Glib::ListHandle< Glib::RefPtr<Gst::TypeFindFactory> > get_list();

 
  /** Gets the extensions associated with a Gst::TypeFindFactory. The returned
   * array should not be changed. If you need to change stuff in it, you should
   * copy it using Glib::strdupv().  This function may return <tt>nullptr</tt> to indicate
   * a 0-length list.
   * 
   * @return A <tt>nullptr</tt>-terminated array of extensions associated with this factory.
   */
  std::vector<Glib::ustring> get_extensions() const;

  
  /** Gets the Gst::Caps associated with a typefind factory.
   * 
   * @return The Gst::Caps associated with this factory.
   */
  Glib::RefPtr<Gst::Caps> get_caps();
  
  /** Gets the Gst::Caps associated with a typefind factory.
   * 
   * @return The Gst::Caps associated with this factory.
   */
  Glib::RefPtr<const Gst::Caps> get_caps() const;
  
  /** Calls the Gst::TypeFind::SlotFind associated with this factory.
   * 
   * @param find A properly setup Gst::TypeFind entry. The get_data and suggest_type
   * members must be set.
   */
  void call_slot(Gst::TypeFind& find);
  
  /** Check whether the factory has a typefind function. Typefind factories
   * without typefind functions are a last-effort fallback mechanism to
   * e.g. assume a certain media type based on the file extension.
   * 
   * @return <tt>true</tt> if the factory has a typefind functions set, otherwise <tt>false</tt>.
   */
  bool has_function() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::TypeFindFactory
   */
  Glib::RefPtr<Gst::TypeFindFactory> wrap(GstTypeFindFactory* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_TYPEFINDFACTORY_H */

