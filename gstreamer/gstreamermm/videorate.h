// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_VIDEORATE_H
#define _GSTREAMERMM_VIDEORATE_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/basetransform.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstVideoRate = struct _GstVideoRate;
using GstVideoRateClass = struct _GstVideoRateClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class VideoRate_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the videorate plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class VideoRate
: public Gst::BaseTransform
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = VideoRate;
  using CppClassType = VideoRate_Class;
  using BaseObjectType = GstVideoRate;
  using BaseClassType = GstVideoRateClass;

  // noncopyable
  VideoRate(const VideoRate&) = delete;
  VideoRate& operator=(const VideoRate&) = delete;

private:  friend class VideoRate_Class;
  static CppClassType videorate_class_;

protected:
  explicit VideoRate(const Glib::ConstructParams& construct_params);
  explicit VideoRate(GstVideoRate* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  VideoRate(VideoRate&& src) noexcept;
  VideoRate& operator=(VideoRate&& src) noexcept;

  ~VideoRate() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstVideoRate*       gobj()       { return reinterpret_cast<GstVideoRate*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstVideoRate* gobj() const { return reinterpret_cast<GstVideoRate*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstVideoRate* gobj_copy();

private:

  
protected:
  VideoRate();
  explicit VideoRate(const Glib::ustring& name);

public:
  /** Creates a new videorate plugin with a unique name.
   */
  
  static Glib::RefPtr<VideoRate> create();


  /** Creates a new videorate plugin with the given name.
   */
  
  static Glib::RefPtr<VideoRate> create(const Glib::ustring& name);


  /** Number of input frames.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_in() const;


  /** Number of output frames.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_out() const;


  /** Number of duplicated frames.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_duplicate() const;


  /** Number of dropped frames.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_drop() const;


  /** Don't emit notify for dropped and duplicated frames.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_silent() ;

/** Don't emit notify for dropped and duplicated frames.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_silent() const;

  /** Value indicating how much to prefer new frames (unused).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< double > property_new_pref() ;

/** Value indicating how much to prefer new frames (unused).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< double > property_new_pref() const;

  /** Don't produce buffers before the first one we receive.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_skip_to_first() ;

/** Don't produce buffers before the first one we receive.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_skip_to_first() const;

  /** Only drop frames, no duplicates are produced.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_drop_only() ;

/** Only drop frames, no duplicates are produced.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_drop_only() const;

  /** Period over which to average the framerate (in ns) (0 = disabled).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_average_period() ;

/** Period over which to average the framerate (in ns) (0 = disabled).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_average_period() const;

  /** Maximum framerate allowed to pass through (in frames per second, implies drop-only).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_max_rate() ;

/** Maximum framerate allowed to pass through (in frames per second, implies drop-only).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_max_rate() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::VideoRate
   */
  Glib::RefPtr<Gst::VideoRate> wrap(GstVideoRate* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_VIDEORATE_H */

