// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/decodebin.h>
#include <gstreamermm/private/decodebin_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

GType gst_decode_bin_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("decodebin");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

DecodeBin::DecodeBin()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Bin(Glib::ConstructParams(decodebin_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

DecodeBin::DecodeBin(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Bin(Glib::ConstructParams(decodebin_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{


static void DecodeBin_signal_unknown_type_callback(GstDecodeBin* self, GstPad* p0,GstCaps* p1,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo DecodeBin_signal_unknown_type_info =
{
  "unknown-type",
  (GCallback) &DecodeBin_signal_unknown_type_callback,
  (GCallback) &DecodeBin_signal_unknown_type_callback
};


static gboolean DecodeBin_signal_autoplug_continue_callback(GstDecodeBin* self, GstPad* p0,GstCaps* p1,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return static_cast<int>((*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
));
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static gboolean DecodeBin_signal_autoplug_continue_notify_callback(GstDecodeBin* self, GstPad* p0,GstCaps* p1, void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static const Glib::SignalProxyInfo DecodeBin_signal_autoplug_continue_info =
{
  "autoplug-continue",
  (GCallback) &DecodeBin_signal_autoplug_continue_callback,
  (GCallback) &DecodeBin_signal_autoplug_continue_notify_callback
};


static GValueArray* DecodeBin_signal_autoplug_factories_callback(GstDecodeBin* self, GstPad* p0,GstCaps* p1,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return ((*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
)).gobj_copy();
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = GValueArray*;
  return RType();
}

static GValueArray* DecodeBin_signal_autoplug_factories_notify_callback(GstDecodeBin* self, GstPad* p0,GstCaps* p1, void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = GValueArray*;
  return RType();
}

static const Glib::SignalProxyInfo DecodeBin_signal_autoplug_factories_info =
{
  "autoplug-factories",
  (GCallback) &DecodeBin_signal_autoplug_factories_callback,
  (GCallback) &DecodeBin_signal_autoplug_factories_notify_callback
};


static GValueArray* DecodeBin_signal_autoplug_sort_callback(GstDecodeBin* self, GstPad* p0,GstCaps* p1,GValueArray* p2,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::ValueArray& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return ((*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
, Glib::wrap(p2, true)
)).gobj_copy();
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = GValueArray*;
  return RType();
}

static GValueArray* DecodeBin_signal_autoplug_sort_notify_callback(GstDecodeBin* self, GstPad* p0,GstCaps* p1,GValueArray* p2, void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::ValueArray& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
, Glib::wrap(p2, true)
);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = GValueArray*;
  return RType();
}

static const Glib::SignalProxyInfo DecodeBin_signal_autoplug_sort_info =
{
  "autoplug-sort",
  (GCallback) &DecodeBin_signal_autoplug_sort_callback,
  (GCallback) &DecodeBin_signal_autoplug_sort_notify_callback
};


static GstAutoplugSelectResult DecodeBin_signal_autoplug_select_callback(GstDecodeBin* self, GstPad* p0,GstCaps* p1,GstElementFactory* p2,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< Gst::AutoplugSelectResult,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::RefPtr<Gst::ElementFactory>& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return ((GstAutoplugSelectResult)((*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
, Glib::wrap(p2, true)
)));
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = GstAutoplugSelectResult;
  return RType();
}

static GstAutoplugSelectResult DecodeBin_signal_autoplug_select_notify_callback(GstDecodeBin* self, GstPad* p0,GstCaps* p1,GstElementFactory* p2, void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::RefPtr<Gst::ElementFactory>& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
, Glib::wrap(p2, true)
);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = GstAutoplugSelectResult;
  return RType();
}

static const Glib::SignalProxyInfo DecodeBin_signal_autoplug_select_info =
{
  "autoplug-select",
  (GCallback) &DecodeBin_signal_autoplug_select_callback,
  (GCallback) &DecodeBin_signal_autoplug_select_notify_callback
};


static gboolean DecodeBin_signal_autoplug_query_callback(GstDecodeBin* self, GstPad* p0,GstElement* p1,GstQuery* p2,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Element>&,const Glib::RefPtr<Gst::Query>& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        return static_cast<int>((*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
, Glib::wrap(p2, true)
));
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static gboolean DecodeBin_signal_autoplug_query_notify_callback(GstDecodeBin* self, GstPad* p0,GstElement* p1,GstQuery* p2, void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Element>&,const Glib::RefPtr<Gst::Query>& >;

  auto obj = dynamic_cast<DecodeBin*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1, true)
, Glib::wrap(p2, true)
);
    }
    catch(...)
    {
      Glib::exception_handlers_invoke();
    }
  }

  using RType = gboolean;
  return RType();
}

static const Glib::SignalProxyInfo DecodeBin_signal_autoplug_query_info =
{
  "autoplug-query",
  (GCallback) &DecodeBin_signal_autoplug_query_callback,
  (GCallback) &DecodeBin_signal_autoplug_query_notify_callback
};


static const Glib::SignalProxyInfo DecodeBin_signal_drained_info =
{
  "drained",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::DecodeBin> wrap(GstDecodeBin* object, bool take_copy)
{
  return Glib::RefPtr<Gst::DecodeBin>( dynamic_cast<Gst::DecodeBin*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& DecodeBin_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &DecodeBin_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_decode_bin_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void DecodeBin_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* DecodeBin_Class::wrap_new(GObject* object)
{
  return new DecodeBin((GstDecodeBin*)object);
}


/* The implementation: */

GstDecodeBin* DecodeBin::gobj_copy()
{
  reference();
  return gobj();
}

DecodeBin::DecodeBin(const Glib::ConstructParams& construct_params)
:
  Gst::Bin(construct_params)
{

}

DecodeBin::DecodeBin(GstDecodeBin* castitem)
:
  Gst::Bin((GstBin*)(castitem))
{}


DecodeBin::DecodeBin(DecodeBin&& src) noexcept
: Gst::Bin(std::move(src))
{}

DecodeBin& DecodeBin::operator=(DecodeBin&& src) noexcept
{
  Gst::Bin::operator=(std::move(src));
  return *this;
}


DecodeBin::~DecodeBin() noexcept
{}


DecodeBin::CppClassType DecodeBin::decodebin_class_; // initialize static member

GType DecodeBin::get_type()
{
  return decodebin_class_.init().get_type();
}


GType DecodeBin::get_base_type()
{
  return gst_decode_bin_gstreamermm_get_type();
}


Glib::RefPtr<DecodeBin> DecodeBin::create()
{
  return Glib::RefPtr<DecodeBin>( new DecodeBin() );
}

Glib::RefPtr<DecodeBin> DecodeBin::create(const Glib::ustring& name)
{
  return Glib::RefPtr<DecodeBin>( new DecodeBin(name) );
}


Glib::SignalProxy< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& > DecodeBin::signal_unknown_type()
{
  return Glib::SignalProxy< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& >(this, &DecodeBin_signal_unknown_type_info);
}


Glib::SignalProxy< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& > DecodeBin::signal_autoplug_continue()
{
  return Glib::SignalProxy< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& >(this, &DecodeBin_signal_autoplug_continue_info);
}


Glib::SignalProxy< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& > DecodeBin::signal_autoplug_factories()
{
  return Glib::SignalProxy< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& >(this, &DecodeBin_signal_autoplug_factories_info);
}


Glib::SignalProxy< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::ValueArray& > DecodeBin::signal_autoplug_sort()
{
  return Glib::SignalProxy< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::ValueArray& >(this, &DecodeBin_signal_autoplug_sort_info);
}


Glib::SignalProxy< Gst::AutoplugSelectResult,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::RefPtr<Gst::ElementFactory>& > DecodeBin::signal_autoplug_select()
{
  return Glib::SignalProxy< Gst::AutoplugSelectResult,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::RefPtr<Gst::ElementFactory>& >(this, &DecodeBin_signal_autoplug_select_info);
}


Glib::SignalProxy< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Element>&,const Glib::RefPtr<Gst::Query>& > DecodeBin::signal_autoplug_query()
{
  return Glib::SignalProxy< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Element>&,const Glib::RefPtr<Gst::Query>& >(this, &DecodeBin_signal_autoplug_query_info);
}


Glib::SignalProxy< void > DecodeBin::signal_drained()
{
  return Glib::SignalProxy< void >(this, &DecodeBin_signal_drained_info);
}


Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> > DecodeBin::property_caps() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> >(this, "caps");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > DecodeBin::property_caps() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> >(this, "caps");
}

Glib::PropertyProxy< Glib::ustring > DecodeBin::property_subtitle_encoding() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "subtitle-encoding");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > DecodeBin::property_subtitle_encoding() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "subtitle-encoding");
}

Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> > DecodeBin::property_sink_caps() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> >(this, "sink-caps");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > DecodeBin::property_sink_caps() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> >(this, "sink-caps");
}

Glib::PropertyProxy< bool > DecodeBin::property_use_buffering() 
{
  return Glib::PropertyProxy< bool >(this, "use-buffering");
}

Glib::PropertyProxy_ReadOnly< bool > DecodeBin::property_use_buffering() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "use-buffering");
}

Glib::PropertyProxy< int > DecodeBin::property_low_percent() 
{
  return Glib::PropertyProxy< int >(this, "low-percent");
}

Glib::PropertyProxy_ReadOnly< int > DecodeBin::property_low_percent() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "low-percent");
}

Glib::PropertyProxy< int > DecodeBin::property_high_percent() 
{
  return Glib::PropertyProxy< int >(this, "high-percent");
}

Glib::PropertyProxy_ReadOnly< int > DecodeBin::property_high_percent() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "high-percent");
}

Glib::PropertyProxy< guint > DecodeBin::property_max_size_bytes() 
{
  return Glib::PropertyProxy< guint >(this, "max-size-bytes");
}

Glib::PropertyProxy_ReadOnly< guint > DecodeBin::property_max_size_bytes() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "max-size-bytes");
}

Glib::PropertyProxy< guint > DecodeBin::property_max_size_buffers() 
{
  return Glib::PropertyProxy< guint >(this, "max-size-buffers");
}

Glib::PropertyProxy_ReadOnly< guint > DecodeBin::property_max_size_buffers() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "max-size-buffers");
}

Glib::PropertyProxy< guint64 > DecodeBin::property_max_size_time() 
{
  return Glib::PropertyProxy< guint64 >(this, "max-size-time");
}

Glib::PropertyProxy_ReadOnly< guint64 > DecodeBin::property_max_size_time() const
{
  return Glib::PropertyProxy_ReadOnly< guint64 >(this, "max-size-time");
}

Glib::PropertyProxy< bool > DecodeBin::property_post_stream_topology() 
{
  return Glib::PropertyProxy< bool >(this, "post-stream-topology");
}

Glib::PropertyProxy_ReadOnly< bool > DecodeBin::property_post_stream_topology() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "post-stream-topology");
}

Glib::PropertyProxy< bool > DecodeBin::property_expose_all_streams() 
{
  return Glib::PropertyProxy< bool >(this, "expose-all-streams");
}

Glib::PropertyProxy_ReadOnly< bool > DecodeBin::property_expose_all_streams() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "expose-all-streams");
}

Glib::PropertyProxy< guint64 > DecodeBin::property_connection_speed() 
{
  return Glib::PropertyProxy< guint64 >(this, "connection-speed");
}

Glib::PropertyProxy_ReadOnly< guint64 > DecodeBin::property_connection_speed() const
{
  return Glib::PropertyProxy_ReadOnly< guint64 >(this, "connection-speed");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


