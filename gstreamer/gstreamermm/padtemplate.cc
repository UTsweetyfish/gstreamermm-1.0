// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/padtemplate.h>
#include <gstreamermm/private/padtemplate_p.h>

#include <cstring> // std::memset()

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gst.h>
#include <gstreamermm/caps.h>
#include <gstreamermm/pad.h>


namespace
{


static void PadTemplate_signal_pad_created_callback(GstPadTemplate* self, GstPad* p0,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,const Glib::RefPtr<Gst::Pad>& >;

  auto obj = dynamic_cast<PadTemplate*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo PadTemplate_signal_pad_created_info =
{
  "pad-created",
  (GCallback) &PadTemplate_signal_pad_created_callback,
  (GCallback) &PadTemplate_signal_pad_created_callback
};


} // anonymous namespace

// static
GType Glib::Value<Gst::PadTemplateFlags>::value_type()
{
  return gst_pad_template_flags_get_type();
}

// static
GType Glib::Value<Gst::PadPresence>::value_type()
{
  return gst_pad_presence_get_type();
}


namespace Glib
{

Glib::RefPtr<Gst::PadTemplate> wrap(GstPadTemplate* object, bool take_copy)
{
  return Glib::RefPtr<Gst::PadTemplate>( dynamic_cast<Gst::PadTemplate*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& PadTemplate_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &PadTemplate_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_pad_template_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void PadTemplate_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->pad_created = &pad_created_callback;
}


void PadTemplate_Class::pad_created_callback(GstPadTemplate* self, GstPad* p0)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->on_pad_created(Glib::wrap(p0, true)
);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  const auto base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->pad_created)
    (*base->pad_created)(self, p0);
}


Glib::ObjectBase* PadTemplate_Class::wrap_new(GObject* object)
{
  return new PadTemplate((GstPadTemplate*)object);
}


/* The implementation: */

GstPadTemplate* PadTemplate::gobj_copy()
{
  reference();
  return gobj();
}

PadTemplate::PadTemplate(const Glib::ConstructParams& construct_params)
:
  Object(construct_params)
{

}

PadTemplate::PadTemplate(GstPadTemplate* castitem)
:
  Object((GstObject*)(castitem))
{}


PadTemplate::PadTemplate(PadTemplate&& src) noexcept
: Object(std::move(src))
{}

PadTemplate& PadTemplate::operator=(PadTemplate&& src) noexcept
{
  Object::operator=(std::move(src));
  return *this;
}


PadTemplate::~PadTemplate() noexcept
{}


PadTemplate::CppClassType PadTemplate::padtemplate_class_; // initialize static member

GType PadTemplate::get_type()
{
  return padtemplate_class_.init().get_type();
}


GType PadTemplate::get_base_type()
{
  return gst_pad_template_get_type();
}


PadTemplate::PadTemplate(const Glib::ustring& name_template, PadDirection direction, PadPresence presence, const Glib::RefPtr<Gst::Caps>& caps)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Object(Glib::ConstructParams(padtemplate_class_.init(), "name_template", name_template.c_str(), "direction", ((GstPadDirection)(direction)), "presence", ((GstPadPresence)(presence)), "caps", Glib::unwrap(caps), nullptr))
{
  

}

Glib::RefPtr<PadTemplate> PadTemplate::create(const Glib::ustring& name_template, PadDirection direction, PadPresence presence, const Glib::RefPtr<Gst::Caps>& caps)
{
  return Glib::RefPtr<PadTemplate>( new PadTemplate(name_template, direction, presence, caps) );
}

Glib::RefPtr<Gst::Caps> PadTemplate::get_caps()
{
  return Glib::wrap(gst_pad_template_get_caps(gobj()));
}

Glib::RefPtr<const Gst::Caps> PadTemplate::get_caps() const
{
  return const_cast<PadTemplate*>(this)->get_caps();
}

Glib::ustring PadTemplate::get_name_template() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gobj()->name_template);
}

PadDirection PadTemplate::get_direction() const
{
  return ((PadDirection)(gobj()->direction));
}

PadPresence PadTemplate::get_presence() const
{
  return ((PadPresence)(gobj()->presence));
}


Glib::SignalProxy< void,const Glib::RefPtr<Gst::Pad>& > PadTemplate::signal_pad_created()
{
  return Glib::SignalProxy< void,const Glib::RefPtr<Gst::Pad>& >(this, &PadTemplate_signal_pad_created_info);
}


Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > PadTemplate::property_caps() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> >(this, "caps");
}

Glib::PropertyProxy_ReadOnly< Gst::PadDirection > PadTemplate::property_direction() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::PadDirection >(this, "direction");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > PadTemplate::property_name_template() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "name-template");
}

Glib::PropertyProxy_ReadOnly< Gst::PadPresence > PadTemplate::property_presence() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::PadPresence >(this, "presence");
}


void Gst::PadTemplate::on_pad_created(const Glib::RefPtr<Gst::Pad>& pad)
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->pad_created)
    (*base->pad_created)(gobj(),Glib::unwrap(pad));
}


} // namespace Gst


namespace Glib
{

Gst::StaticPadTemplate& wrap(GstStaticPadTemplate* object)
{
  return *reinterpret_cast<Gst::StaticPadTemplate*>(object);
}

const Gst::StaticPadTemplate& wrap(const GstStaticPadTemplate* object)
{
  return *reinterpret_cast<const Gst::StaticPadTemplate*>(object);
}

} // namespace Glib


namespace Gst
{


StaticPadTemplate::StaticPadTemplate(const StaticPadTemplate& other) noexcept
:
  gobject_(other.gobject_)
{
}

StaticPadTemplate& StaticPadTemplate::operator=(const StaticPadTemplate& other) noexcept
{
  gobject_ = other.gobject_;
  return *this;
}

StaticPadTemplate::StaticPadTemplate(StaticPadTemplate&& other) noexcept
:
  gobject_(std::move(other.gobject_))
{
  //We could wipe other.gobject_ via memset,
  //but that is not really necessary:
  //other.gobject_ = nullptr;
}

StaticPadTemplate& StaticPadTemplate::operator=(StaticPadTemplate&& other) noexcept
{
  gobject_ = std::move(other.gobject_);
  return *this;
}

// static
GType StaticPadTemplate::get_type()
{
  return gst_static_pad_template_get_type();
}

StaticPadTemplate::StaticPadTemplate()
{
  std::memset(&gobject_, 0, sizeof(GstStaticPadTemplate));
}

StaticPadTemplate::StaticPadTemplate(const GstStaticPadTemplate* gobject)
{
  if(gobject)
    gobject_ = *gobject;
  else
    std::memset(&gobject_, 0, sizeof(GstStaticPadTemplate));
}

Glib::RefPtr<Gst::Caps> StaticPadTemplate::get_caps()
{
  return Glib::wrap(gst_static_pad_template_get_caps(gobj()));
}

Glib::RefPtr<const Gst::Caps> StaticPadTemplate::get_caps() const
{
  return const_cast<StaticPadTemplate*>(this)->get_caps();
}

Glib::RefPtr<Gst::PadTemplate> StaticPadTemplate::get()
{
  return Glib::wrap(gst_static_pad_template_get(gobj()));
}

Glib::ustring StaticPadTemplate::get_name_template() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gobj()->name_template);
}

PadDirection StaticPadTemplate::get_direction() const
{
  return ((PadDirection)(gobj()->direction));
}

PadPresence StaticPadTemplate::get_presence() const
{
  return ((PadPresence)(gobj()->presence));
}


} // namespace Gst


