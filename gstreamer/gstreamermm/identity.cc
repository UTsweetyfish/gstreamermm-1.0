// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/identity.h>
#include <gstreamermm/private/identity_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

GType gst_identity_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("identity");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

Identity::Identity()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::BaseTransform(Glib::ConstructParams(identity_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

Identity::Identity(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::BaseTransform(Glib::ConstructParams(identity_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{


static void Identity_signal_handoff_callback(GstIdentity* self, GstBuffer* p0,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,const Glib::RefPtr<Gst::Buffer>& >;

  auto obj = dynamic_cast<Identity*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo Identity_signal_handoff_info =
{
  "handoff",
  (GCallback) &Identity_signal_handoff_callback,
  (GCallback) &Identity_signal_handoff_callback
};


} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::Identity> wrap(GstIdentity* object, bool take_copy)
{
  return Glib::RefPtr<Gst::Identity>( dynamic_cast<Gst::Identity*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& Identity_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Identity_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_identity_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void Identity_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Identity_Class::wrap_new(GObject* object)
{
  return new Identity((GstIdentity*)object);
}


/* The implementation: */

GstIdentity* Identity::gobj_copy()
{
  reference();
  return gobj();
}

Identity::Identity(const Glib::ConstructParams& construct_params)
:
  Gst::BaseTransform(construct_params)
{

}

Identity::Identity(GstIdentity* castitem)
:
  Gst::BaseTransform((GstBaseTransform*)(castitem))
{}


Identity::Identity(Identity&& src) noexcept
: Gst::BaseTransform(std::move(src))
{}

Identity& Identity::operator=(Identity&& src) noexcept
{
  Gst::BaseTransform::operator=(std::move(src));
  return *this;
}


Identity::~Identity() noexcept
{}


Identity::CppClassType Identity::identity_class_; // initialize static member

GType Identity::get_type()
{
  return identity_class_.init().get_type();
}


GType Identity::get_base_type()
{
  return gst_identity_gstreamermm_get_type();
}


Glib::RefPtr<Identity> Identity::create()
{
  return Glib::RefPtr<Identity>( new Identity() );
}

Glib::RefPtr<Identity> Identity::create(const Glib::ustring& name)
{
  return Glib::RefPtr<Identity>( new Identity(name) );
}


Glib::SignalProxy< void,const Glib::RefPtr<Gst::Buffer>& > Identity::signal_handoff()
{
  return Glib::SignalProxy< void,const Glib::RefPtr<Gst::Buffer>& >(this, &Identity_signal_handoff_info);
}


Glib::PropertyProxy< guint > Identity::property_sleep_time() 
{
  return Glib::PropertyProxy< guint >(this, "sleep-time");
}

Glib::PropertyProxy_ReadOnly< guint > Identity::property_sleep_time() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "sleep-time");
}

Glib::PropertyProxy< int > Identity::property_error_after() 
{
  return Glib::PropertyProxy< int >(this, "error-after");
}

Glib::PropertyProxy_ReadOnly< int > Identity::property_error_after() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "error-after");
}

Glib::PropertyProxy< float > Identity::property_drop_probability() 
{
  return Glib::PropertyProxy< float >(this, "drop-probability");
}

Glib::PropertyProxy_ReadOnly< float > Identity::property_drop_probability() const
{
  return Glib::PropertyProxy_ReadOnly< float >(this, "drop-probability");
}

Glib::PropertyProxy< Gst::BufferFlags > Identity::property_drop_buffer_flags() 
{
  return Glib::PropertyProxy< Gst::BufferFlags >(this, "drop-buffer-flags");
}

Glib::PropertyProxy_ReadOnly< Gst::BufferFlags > Identity::property_drop_buffer_flags() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::BufferFlags >(this, "drop-buffer-flags");
}

Glib::PropertyProxy< int > Identity::property_datarate() 
{
  return Glib::PropertyProxy< int >(this, "datarate");
}

Glib::PropertyProxy_ReadOnly< int > Identity::property_datarate() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "datarate");
}

Glib::PropertyProxy< bool > Identity::property_silent() 
{
  return Glib::PropertyProxy< bool >(this, "silent");
}

Glib::PropertyProxy_ReadOnly< bool > Identity::property_silent() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "silent");
}

Glib::PropertyProxy< bool > Identity::property_single_segment() 
{
  return Glib::PropertyProxy< bool >(this, "single-segment");
}

Glib::PropertyProxy_ReadOnly< bool > Identity::property_single_segment() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "single-segment");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > Identity::property_last_message() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "last-message");
}

Glib::PropertyProxy< bool > Identity::property_dump() 
{
  return Glib::PropertyProxy< bool >(this, "dump");
}

Glib::PropertyProxy_ReadOnly< bool > Identity::property_dump() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "dump");
}

Glib::PropertyProxy< bool > Identity::property_sync() 
{
  return Glib::PropertyProxy< bool >(this, "sync");
}

Glib::PropertyProxy_ReadOnly< bool > Identity::property_sync() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "sync");
}

Glib::PropertyProxy< bool > Identity::property_check_imperfect_timestamp() 
{
  return Glib::PropertyProxy< bool >(this, "check-imperfect-timestamp");
}

Glib::PropertyProxy_ReadOnly< bool > Identity::property_check_imperfect_timestamp() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "check-imperfect-timestamp");
}

Glib::PropertyProxy< bool > Identity::property_check_imperfect_offset() 
{
  return Glib::PropertyProxy< bool >(this, "check-imperfect-offset");
}

Glib::PropertyProxy_ReadOnly< bool > Identity::property_check_imperfect_offset() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "check-imperfect-offset");
}

Glib::PropertyProxy< bool > Identity::property_signal_handoffs() 
{
  return Glib::PropertyProxy< bool >(this, "signal-handoffs");
}

Glib::PropertyProxy_ReadOnly< bool > Identity::property_signal_handoffs() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "signal-handoffs");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


