// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/pushsrc.h>
#include <gstreamermm/private/pushsrc_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::PushSrc> wrap(GstPushSrc* object, bool take_copy)
{
  return Glib::RefPtr<Gst::PushSrc>( dynamic_cast<Gst::PushSrc*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& PushSrc_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &PushSrc_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_push_src_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void PushSrc_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* PushSrc_Class::wrap_new(GObject* object)
{
  return new PushSrc((GstPushSrc*)object);
}


/* The implementation: */

GstPushSrc* PushSrc::gobj_copy()
{
  reference();
  return gobj();
}

PushSrc::PushSrc(const Glib::ConstructParams& construct_params)
:
  BaseSrc(construct_params)
{

}

PushSrc::PushSrc(GstPushSrc* castitem)
:
  BaseSrc((GstBaseSrc*)(castitem))
{}


PushSrc::PushSrc(PushSrc&& src) noexcept
: BaseSrc(std::move(src))
{}

PushSrc& PushSrc::operator=(PushSrc&& src) noexcept
{
  BaseSrc::operator=(std::move(src));
  return *this;
}


PushSrc::~PushSrc() noexcept
{}


PushSrc::CppClassType PushSrc::pushsrc_class_; // initialize static member

GType PushSrc::get_type()
{
  return pushsrc_class_.init().get_type();
}


GType PushSrc::get_base_type()
{
  return gst_push_src_get_type();
}


} // namespace Gst


