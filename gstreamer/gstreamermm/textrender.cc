// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/textrender.h>
#include <gstreamermm/private/textrender_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

static GType gst_text_render_h_align_get_type()
{
  static GType const type = g_type_from_name("GstTextRenderHAlign");
  return type;
}

static GType gst_text_render_v_align_get_type()
{
  static GType const type = g_type_from_name("GstTextRenderVAlign");
  return type;
}

static GType gst_text_render_line_align_get_type()
{
  static GType const type = g_type_from_name("GstTextRenderLineAlign");
  return type;
}

GType gst_text_render_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("textrender");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

TextRender::TextRender()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Element(Glib::ConstructParams(textrender_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

TextRender::TextRender(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Element(Glib::ConstructParams(textrender_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{
} // anonymous namespace

// static
GType Glib::Value<Gst::TextRenderHAlign>::value_type()
{
  return gst_text_render_h_align_get_type();
}

// static
GType Glib::Value<Gst::TextRenderVAlign>::value_type()
{
  return gst_text_render_v_align_get_type();
}

// static
GType Glib::Value<Gst::TextRenderLineAlign>::value_type()
{
  return gst_text_render_line_align_get_type();
}


namespace Glib
{

Glib::RefPtr<Gst::TextRender> wrap(GstTextRender* object, bool take_copy)
{
  return Glib::RefPtr<Gst::TextRender>( dynamic_cast<Gst::TextRender*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& TextRender_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &TextRender_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_text_render_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void TextRender_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* TextRender_Class::wrap_new(GObject* object)
{
  return new TextRender((GstTextRender*)object);
}


/* The implementation: */

GstTextRender* TextRender::gobj_copy()
{
  reference();
  return gobj();
}

TextRender::TextRender(const Glib::ConstructParams& construct_params)
:
  Gst::Element(construct_params)
{

}

TextRender::TextRender(GstTextRender* castitem)
:
  Gst::Element((GstElement*)(castitem))
{}


TextRender::TextRender(TextRender&& src) noexcept
: Gst::Element(std::move(src))
{}

TextRender& TextRender::operator=(TextRender&& src) noexcept
{
  Gst::Element::operator=(std::move(src));
  return *this;
}


TextRender::~TextRender() noexcept
{}


TextRender::CppClassType TextRender::textrender_class_; // initialize static member

GType TextRender::get_type()
{
  return textrender_class_.init().get_type();
}


GType TextRender::get_base_type()
{
  return gst_text_render_gstreamermm_get_type();
}


Glib::RefPtr<TextRender> TextRender::create()
{
  return Glib::RefPtr<TextRender>( new TextRender() );
}

Glib::RefPtr<TextRender> TextRender::create(const Glib::ustring& name)
{
  return Glib::RefPtr<TextRender>( new TextRender(name) );
}


Glib::PropertyProxy< Gst::TextRenderHAlign > TextRender::property_halignment() 
{
  return Glib::PropertyProxy< Gst::TextRenderHAlign >(this, "halignment");
}

Glib::PropertyProxy_ReadOnly< Gst::TextRenderHAlign > TextRender::property_halignment() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::TextRenderHAlign >(this, "halignment");
}

Glib::PropertyProxy< Gst::TextRenderVAlign > TextRender::property_valignment() 
{
  return Glib::PropertyProxy< Gst::TextRenderVAlign >(this, "valignment");
}

Glib::PropertyProxy_ReadOnly< Gst::TextRenderVAlign > TextRender::property_valignment() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::TextRenderVAlign >(this, "valignment");
}

Glib::PropertyProxy< Gst::TextRenderLineAlign > TextRender::property_line_alignment() 
{
  return Glib::PropertyProxy< Gst::TextRenderLineAlign >(this, "line-alignment");
}

Glib::PropertyProxy_ReadOnly< Gst::TextRenderLineAlign > TextRender::property_line_alignment() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::TextRenderLineAlign >(this, "line-alignment");
}

Glib::PropertyProxy< int > TextRender::property_xpad() 
{
  return Glib::PropertyProxy< int >(this, "xpad");
}

Glib::PropertyProxy_ReadOnly< int > TextRender::property_xpad() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "xpad");
}

Glib::PropertyProxy< int > TextRender::property_ypad() 
{
  return Glib::PropertyProxy< int >(this, "ypad");
}

Glib::PropertyProxy_ReadOnly< int > TextRender::property_ypad() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "ypad");
}

Glib::PropertyProxy_WriteOnly< Glib::ustring > TextRender::property_font_desc() 
{
  return Glib::PropertyProxy_WriteOnly< Glib::ustring >(this, "font-desc");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


