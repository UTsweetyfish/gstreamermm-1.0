// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_IDENTITY_H
#define _GSTREAMERMM_IDENTITY_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/basetransform.h>
#include <gstreamermm/buffer.h>
#include <gstreamermm/buffer.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstIdentity = struct _GstIdentity;
using GstIdentityClass = struct _GstIdentityClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class Identity_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the identity plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class Identity
: public Gst::BaseTransform
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = Identity;
  using CppClassType = Identity_Class;
  using BaseObjectType = GstIdentity;
  using BaseClassType = GstIdentityClass;

  // noncopyable
  Identity(const Identity&) = delete;
  Identity& operator=(const Identity&) = delete;

private:  friend class Identity_Class;
  static CppClassType identity_class_;

protected:
  explicit Identity(const Glib::ConstructParams& construct_params);
  explicit Identity(GstIdentity* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  Identity(Identity&& src) noexcept;
  Identity& operator=(Identity&& src) noexcept;

  ~Identity() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstIdentity*       gobj()       { return reinterpret_cast<GstIdentity*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstIdentity* gobj() const { return reinterpret_cast<GstIdentity*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstIdentity* gobj_copy();

private:

  
protected:
  Identity();
  explicit Identity(const Glib::ustring& name);

public:
  /** Creates a new identity plugin with a unique name.
   */
  
  static Glib::RefPtr<Identity> create();


  /** Creates a new identity plugin with the given name.
   */
  
  static Glib::RefPtr<Identity> create(const Glib::ustring& name);


  /** Microseconds to sleep between processing.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_sleep_time() ;

/** Microseconds to sleep between processing.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_sleep_time() const;

  /** Error after N buffers.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_error_after() ;

/** Error after N buffers.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_error_after() const;

  /** The Probability a buffer is dropped.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< float > property_drop_probability() ;

/** The Probability a buffer is dropped.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< float > property_drop_probability() const;

  /** Drop buffers with the given flags.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::BufferFlags > property_drop_buffer_flags() ;

/** Drop buffers with the given flags.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::BufferFlags > property_drop_buffer_flags() const;

  /** (Re)timestamps buffers with number of bytes per second (0 = inactive).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_datarate() ;

/** (Re)timestamps buffers with number of bytes per second (0 = inactive).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_datarate() const;

  /** silent.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_silent() ;

/** silent.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_silent() const;

  /** Timestamp buffers and eat segments so as to appear as one segment.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_single_segment() ;

/** Timestamp buffers and eat segments so as to appear as one segment.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_single_segment() const;

  /** last-message.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_last_message() const;


  /** Dump buffer contents to stdout.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_dump() ;

/** Dump buffer contents to stdout.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_dump() const;

  /** Synchronize to pipeline clock.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_sync() ;

/** Synchronize to pipeline clock.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_sync() const;

  /** Send element messages if timestamps and durations do not match up.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_check_imperfect_timestamp() ;

/** Send element messages if timestamps and durations do not match up.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_check_imperfect_timestamp() const;

  /** Send element messages if offset and offset_end do not match up.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_check_imperfect_offset() ;

/** Send element messages if offset and offset_end do not match up.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_check_imperfect_offset() const;

  /** Send a signal before pushing the buffer.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_signal_handoffs() ;

/** Send a signal before pushing the buffer.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_signal_handoffs() const;


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%handoff(const Glib::RefPtr<Gst::Buffer>& arg0)</tt>
   *
   */

  Glib::SignalProxy< void,const Glib::RefPtr<Gst::Buffer>& > signal_handoff();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::Identity
   */
  Glib::RefPtr<Gst::Identity> wrap(GstIdentity* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_IDENTITY_H */

