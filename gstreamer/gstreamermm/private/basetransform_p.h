// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_BASETRANSFORM_P_H
#define _GSTREAMERMM_BASETRANSFORM_P_H


#include <glibmm/class.h>

namespace Gst
{

class BaseTransform_Class : public Glib::Class
{
public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  using CppObjectType = BaseTransform;
  using BaseObjectType = GstBaseTransform;
  using BaseClassType = GstBaseTransformClass;
  using CppClassParent = Element_Class;
  using BaseClassParent = GstElementClass;

  friend class BaseTransform;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  const Glib::Class& init();


  static void class_init_function(void* g_class, void* class_data);

  static Glib::ObjectBase* wrap_new(GObject*);

protected:

  //Callbacks (default signal handlers):
  //These will call the *_impl member methods, which will then call the existing default signal callbacks, if any.
  //You could prevent the original default signal handlers being called by overriding the *_impl method.

  //Callbacks (virtual functions):
  static GstCaps* transform_caps_vfunc_callback(GstBaseTransform* self, GstPadDirection direction, GstCaps* caps, GstCaps* filter);
  static GstCaps* fixate_caps_vfunc_callback(GstBaseTransform* self, GstPadDirection direction, GstCaps* caps, GstCaps* othercaps);
  static gboolean get_unit_size_vfunc_callback(GstBaseTransform* self, GstCaps* caps, gsize* size);
  static gboolean set_caps_vfunc_callback(GstBaseTransform* self, GstCaps* incaps, GstCaps* outcaps);
  static GstFlowReturn transform_ip_vfunc_callback(GstBaseTransform* self, GstBuffer* buf);
  static gboolean src_event_vfunc_callback(GstBaseTransform* self, GstEvent* event);
  static gboolean sink_event_vfunc_callback(GstBaseTransform* self, GstEvent* event);
  static void before_transform_vfunc_callback(GstBaseTransform* self, GstBuffer* buffer);
  static gboolean accept_caps_vfunc_callback(GstBaseTransform* self, GstPadDirection direction, GstCaps* caps);
  static gboolean start_vfunc_callback(GstBaseTransform* self);
  static gboolean stop_vfunc_callback(GstBaseTransform* self);
  static gboolean filter_meta_vfunc_callback(GstBaseTransform* self, GstQuery* query, GType api, const GstStructure* params);
  static GstFlowReturn submit_input_buffer_vfunc_callback(GstBaseTransform* self, gboolean is_discont, GstBuffer* input);
  static gboolean copy_metadata_vfunc_callback(GstBaseTransform* self, GstBuffer* input, GstBuffer* outbuf);
  static GstFlowReturn prepare_output_buffer_vfunc_callback(GstBaseTransform* self, GstBuffer* input, GstBuffer** buf);
  static GstFlowReturn transform_vfunc_callback(GstBaseTransform* self, GstBuffer* inbuf, GstBuffer* outbuf);
  static GstFlowReturn generate_output_vfunc_callback(GstBaseTransform* self, GstBuffer** outbuf);
  static gboolean query_vfunc_callback(GstBaseTransform* self, GstPadDirection direction, GstQuery* query);
  static gboolean propose_allocation_vfunc_callback(GstBaseTransform* self, GstQuery* decide_query, GstQuery* query);
  static gboolean decide_allocation_vfunc_callback(GstBaseTransform* self, GstQuery* query);
  };


} // namespace Gst

#include <gstreamermm/private/element_p.h>


#endif /* _GSTREAMERMM_BASETRANSFORM_P_H */

