// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_ELEMENT_P_H
#define _GSTREAMERMM_ELEMENT_P_H


#include <glibmm/class.h>

namespace Gst
{

class Element_Class : public Glib::Class
{
public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  using CppObjectType = Element;
  using BaseObjectType = GstElement;
  using BaseClassType = GstElementClass;
  using CppClassParent = Gst::Object_Class;
  using BaseClassParent = GstObjectClass;

  friend class Element;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  const Glib::Class& init();


  static void class_init_function(void* g_class, void* class_data);

  static Glib::ObjectBase* wrap_new(GObject*);

protected:

  //Callbacks (default signal handlers):
  //These will call the *_impl member methods, which will then call the existing default signal callbacks, if any.
  //You could prevent the original default signal handlers being called by overriding the *_impl method.
  static void no_more_pads_callback(GstElement* self);
  static void pad_added_callback(GstElement* self, GstPad* p0);
  static void pad_removed_callback(GstElement* self, GstPad* p0);

  //Callbacks (virtual functions):
  static void release_pad_vfunc_callback(GstElement* self, GstPad* pad);
  static GstPad* request_new_pad_vfunc_callback(GstElement* self, GstPadTemplate* templ, const gchar* name, const GstCaps* caps);
  static GstStateChangeReturn get_state_vfunc_callback(GstElement* self, GstState* state, GstState* pending, GstClockTime timeout);
  static GstStateChangeReturn set_state_vfunc_callback(GstElement* self, GstState state);
  static GstStateChangeReturn change_state_vfunc_callback(GstElement* self, GstStateChange transition);
  static void state_changed_vfunc_callback(GstElement* self, GstState oldstate, GstState newstate, GstState pending);
  static void set_bus_vfunc_callback(GstElement* self, GstBus* bus);
  static GstClock* provide_clock_vfunc_callback(GstElement* self);
  static gboolean set_clock_vfunc_callback(GstElement* self, GstClock* clock);
  static gboolean send_event_vfunc_callback(GstElement* self, GstEvent* event);
  static gboolean query_vfunc_callback(GstElement* self, GstQuery* query);
  static void set_context_vfunc_callback(GstElement* self, GstContext* context);
  static gboolean post_message_vfunc_callback(GstElement* self, GstMessage* message);
};


} // namespace Gst

#include <gstreamermm/private/object_p.h>


#endif /* _GSTREAMERMM_ELEMENT_P_H */

