// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/elementfactory.h>
#include <gstreamermm/private/elementfactory_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gst.h>
#include <gstreamermm/caps.h>
#include <gstreamermm/element.h>
#include <gstreamermm/padtemplate.h>
#include <gstreamermm/plugin.h>


namespace Gst
{

// Make sure the order here is the same as in Gst::ElementFactoryListType.
static GstElementFactoryListType const _list_types[] = 
{
  GST_ELEMENT_FACTORY_TYPE_ANY,
  GST_ELEMENT_FACTORY_TYPE_AUDIOVIDEO_SINKS,
  GST_ELEMENT_FACTORY_TYPE_AUDIO_ENCODER,
  GST_ELEMENT_FACTORY_TYPE_DECODABLE,
  GST_ELEMENT_FACTORY_TYPE_DECODER,
  GST_ELEMENT_FACTORY_TYPE_DEMUXER,
  GST_ELEMENT_FACTORY_TYPE_DEPAYLOADER,
  GST_ELEMENT_FACTORY_TYPE_ENCODER,
  GST_ELEMENT_FACTORY_TYPE_FORMATTER,
  GST_ELEMENT_FACTORY_TYPE_MAX_ELEMENTS,
  GST_ELEMENT_FACTORY_TYPE_MEDIA_AUDIO,
  GST_ELEMENT_FACTORY_TYPE_MEDIA_IMAGE,
  GST_ELEMENT_FACTORY_TYPE_MEDIA_METADATA,
  GST_ELEMENT_FACTORY_TYPE_MEDIA_SUBTITLE,
  GST_ELEMENT_FACTORY_TYPE_MEDIA_VIDEO,
  GST_ELEMENT_FACTORY_TYPE_MEDIA_ANY,
  GST_ELEMENT_FACTORY_TYPE_MUXER,
  GST_ELEMENT_FACTORY_TYPE_PARSER,
  GST_ELEMENT_FACTORY_TYPE_PAYLOADER,
  GST_ELEMENT_FACTORY_TYPE_SINK,
  GST_ELEMENT_FACTORY_TYPE_SRC,
  GST_ELEMENT_FACTORY_TYPE_VIDEO_ENCODER
};

} //namespace Gst

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::ElementFactory> wrap(GstElementFactory* object, bool take_copy)
{
  return Glib::RefPtr<Gst::ElementFactory>( dynamic_cast<Gst::ElementFactory*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& ElementFactory_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ElementFactory_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_element_factory_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void ElementFactory_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* ElementFactory_Class::wrap_new(GObject* object)
{
  return new ElementFactory((GstElementFactory*)object);
}


/* The implementation: */

GstElementFactory* ElementFactory::gobj_copy()
{
  reference();
  return gobj();
}

ElementFactory::ElementFactory(const Glib::ConstructParams& construct_params)
:
  PluginFeature(construct_params)
{

}

ElementFactory::ElementFactory(GstElementFactory* castitem)
:
  PluginFeature((GstPluginFeature*)(castitem))
{}


ElementFactory::ElementFactory(ElementFactory&& src) noexcept
: PluginFeature(std::move(src))
{}

ElementFactory& ElementFactory::operator=(ElementFactory&& src) noexcept
{
  PluginFeature::operator=(std::move(src));
  return *this;
}


ElementFactory::~ElementFactory() noexcept
{}


ElementFactory::CppClassType ElementFactory::elementfactory_class_; // initialize static member

GType ElementFactory::get_type()
{
  return elementfactory_class_.init().get_type();
}


GType ElementFactory::get_base_type()
{
  return gst_element_factory_get_type();
}


bool ElementFactory::register_element(const Glib::RefPtr<Gst::Plugin>& plugin, const Glib::ustring& name, guint rank, GType type)
{
  return gst_element_register(Glib::unwrap(plugin), name.c_str(), rank, type);
}

Glib::RefPtr<Gst::ElementFactory> ElementFactory::find(const Glib::ustring& name)
{
  return Glib::wrap(gst_element_factory_find(name.c_str()));
}

Glib::RefPtr<Gst::Element> ElementFactory::create(const Glib::ustring& name)
{
  return Glib::wrap(gst_element_factory_create(gobj(), name.empty() ? nullptr : name.c_str()));
}

Glib::RefPtr<Gst::Element> ElementFactory::create()
{
  return Glib::wrap(gst_element_factory_create(gobj(), nullptr));
}

Glib::RefPtr<Gst::Element> ElementFactory::create_element(const Glib::ustring& factory_name, const Glib::ustring& name)
{
  return Glib::wrap(gst_element_factory_make(factory_name.c_str(), name.empty() ? nullptr : name.c_str()));
}

Glib::RefPtr<Gst::Element> ElementFactory::create_element(const Glib::ustring& factory_name)
{
  return Glib::wrap(gst_element_factory_make(factory_name.c_str(), nullptr));
}

bool ElementFactory::can_sink_all_caps(const Glib::RefPtr<const Gst::Caps>& caps) const
{
  return gst_element_factory_can_sink_all_caps(const_cast<GstElementFactory*>(gobj()), Glib::unwrap(caps));
}

bool ElementFactory::can_src_all_caps(const Glib::RefPtr<const Gst::Caps>& caps) const
{
  return gst_element_factory_can_src_all_caps(const_cast<GstElementFactory*>(gobj()), Glib::unwrap(caps));
}

bool ElementFactory::can_sink_any_caps(const Glib::RefPtr<const Gst::Caps>& caps) const
{
  return gst_element_factory_can_sink_any_caps(const_cast<GstElementFactory*>(gobj()), Glib::unwrap(caps));
}

bool ElementFactory::can_src_any_caps(const Glib::RefPtr<const Gst::Caps>& caps) const
{
  return gst_element_factory_can_src_any_caps(const_cast<GstElementFactory*>(gobj()), Glib::unwrap(caps));
}

GType ElementFactory::get_element_type() const
{
  return gst_element_factory_get_element_type(const_cast<GstElementFactory*>(gobj()));
}

std::vector<Glib::ustring> ElementFactory::get_metadata_keys() const
{
  return Glib::ArrayHandler<Glib::ustring>::array_to_vector(gst_element_factory_get_metadata_keys(const_cast<GstElementFactory*>(gobj())), Glib::OWNERSHIP_DEEP);
}

Glib::ustring ElementFactory::get_metadata(const Glib::ustring& key) const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gst_element_factory_get_metadata(const_cast<GstElementFactory*>(gobj()), key.c_str()));
}

guint ElementFactory::get_num_pad_templates() const
{
  return gst_element_factory_get_num_pad_templates(const_cast<GstElementFactory*>(gobj()));
}

URIType ElementFactory::get_uri_type() const
{
  return ((URIType)(gst_element_factory_get_uri_type(const_cast<GstElementFactory*>(gobj()))));
}

std::vector<Glib::ustring> ElementFactory::get_uri_protocols() const
{
  return Glib::ArrayHandler<Glib::ustring>::array_to_vector(gst_element_factory_get_uri_protocols(const_cast<GstElementFactory*>(gobj())), Glib::OWNERSHIP_DEEP);
}

bool ElementFactory::has_interface(const Glib::ustring& name) const
{
  return gst_element_factory_has_interface(const_cast<GstElementFactory*>(gobj()), name.c_str());
}

std::vector< Gst::StaticPadTemplate > ElementFactory::get_static_pad_templates() const
{
  return Glib::ListHandler< Gst::StaticPadTemplate, StaticPadTemplateTraits >::list_to_vector(const_cast<GList*>(gst_element_factory_get_static_pad_templates(const_cast<GstElementFactory*>(gobj()))), Glib::OWNERSHIP_NONE);
}

std::vector< Glib::RefPtr<Gst::ElementFactory> > ElementFactory::filter(const std::vector< Glib::RefPtr<Gst::ElementFactory> >& list, const Glib::RefPtr<const Gst::Caps>& caps, PadDirection direction, bool subsetonly)
{
  return Glib::ListHandler< Glib::RefPtr<Gst::ElementFactory> >::list_to_vector(gst_element_factory_list_filter(Glib::ListHandler< Glib::RefPtr<Gst::ElementFactory> >::vector_to_list(list).data(), Glib::unwrap(caps), ((GstPadDirection)(direction)), static_cast<int>(subsetonly)), Glib::OWNERSHIP_DEEP);
}

std::vector< Glib::RefPtr<Gst::ElementFactory> > ElementFactory::get_elements(ElementFactoryListType type, Rank minrank)
{
  return Glib::ListHandler< Glib::RefPtr<Gst::ElementFactory> >::list_to_vector(gst_element_factory_list_get_elements(_list_types[type], ((GstRank)(minrank))), Glib::OWNERSHIP_DEEP);
}

bool ElementFactory::is_type(ElementFactoryListType type) const
{
  return gst_element_factory_list_is_type(const_cast<GstElementFactory*>(gobj()), _list_types[type]);
}


} // namespace Gst


