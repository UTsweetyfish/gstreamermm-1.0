// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/colorbalancechannel.h>
#include <gstreamermm/private/colorbalancechannel_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <gst/video/colorbalancechannel.h>

namespace
{


static void ColorBalanceChannel_signal_value_changed_callback(GstColorBalanceChannel* self, gint p0,void* data)
{
  using namespace Gst;
  using SlotType = sigc::slot< void,int >;

  auto obj = dynamic_cast<ColorBalanceChannel*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(const auto slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo ColorBalanceChannel_signal_value_changed_info =
{
  "value-changed",
  (GCallback) &ColorBalanceChannel_signal_value_changed_callback,
  (GCallback) &ColorBalanceChannel_signal_value_changed_callback
};


} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::ColorBalanceChannel> wrap(GstColorBalanceChannel* object, bool take_copy)
{
  return Glib::RefPtr<Gst::ColorBalanceChannel>( dynamic_cast<Gst::ColorBalanceChannel*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& ColorBalanceChannel_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ColorBalanceChannel_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_color_balance_channel_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void ColorBalanceChannel_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->value_changed = &value_changed_callback;
}


void ColorBalanceChannel_Class::value_changed_callback(GstColorBalanceChannel* self, gint p0)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->on_value_changed(p0
);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  const auto base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->value_changed)
    (*base->value_changed)(self, p0);
}


Glib::ObjectBase* ColorBalanceChannel_Class::wrap_new(GObject* object)
{
  return new ColorBalanceChannel((GstColorBalanceChannel*)object);
}


/* The implementation: */

GstColorBalanceChannel* ColorBalanceChannel::gobj_copy()
{
  reference();
  return gobj();
}

ColorBalanceChannel::ColorBalanceChannel(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

ColorBalanceChannel::ColorBalanceChannel(GstColorBalanceChannel* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


ColorBalanceChannel::ColorBalanceChannel(ColorBalanceChannel&& src) noexcept
: Glib::Object(std::move(src))
{}

ColorBalanceChannel& ColorBalanceChannel::operator=(ColorBalanceChannel&& src) noexcept
{
  Glib::Object::operator=(std::move(src));
  return *this;
}


ColorBalanceChannel::~ColorBalanceChannel() noexcept
{}


ColorBalanceChannel::CppClassType ColorBalanceChannel::colorbalancechannel_class_; // initialize static member

GType ColorBalanceChannel::get_type()
{
  return colorbalancechannel_class_.init().get_type();
}


GType ColorBalanceChannel::get_base_type()
{
  return gst_color_balance_channel_get_type();
}


Glib::ustring ColorBalanceChannel::get_label() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gobj()->label);
}

int ColorBalanceChannel::get_min_value() const
{
  return gobj()->min_value;
}

int ColorBalanceChannel::get_max_value() const
{
  return gobj()->max_value;
}


Glib::SignalProxy< void,int > ColorBalanceChannel::signal_value_changed()
{
  return Glib::SignalProxy< void,int >(this, &ColorBalanceChannel_signal_value_changed_info);
}


void Gst::ColorBalanceChannel::on_value_changed(int value)
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->value_changed)
    (*base->value_changed)(gobj(),value);
}


} // namespace Gst


