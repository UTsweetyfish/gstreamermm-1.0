// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_COLORBALANCE_H
#define _GSTREAMERMM_COLORBALANCE_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/video/colorbalance.h>
#include <glibmm/interface.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstColorBalance = struct _GstColorBalance;
using GstColorBalanceClass = struct _GstColorBalanceClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class ColorBalance_Class; } // namespace Gst
#endif // DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/** 
 *  @var ColorBalanceType COLOR_BALANCE_HARDWARE
 * Color balance is implemented with dedicated
 * hardware.
 * 
 *  @var ColorBalanceType COLOR_BALANCE_SOFTWARE
 * Color balance is implemented via software
 * processing.
 * 
 *  @enum ColorBalanceType
 * 
 * An enumeration indicating whether an element implements color balancing
 * operations in software or in dedicated hardware. In general, dedicated
 * hardware implementations (such as those provided by xvimagesink) are
 * preferred.
 *
 * @ingroup gstreamermmEnums
 */
enum ColorBalanceType
{
  COLOR_BALANCE_HARDWARE,
  COLOR_BALANCE_SOFTWARE
};


class ColorBalanceChannel;

/** An interface for adjusting color balance settings.
 *
 * This interface is implemented by elements which can perform some color balance
 * operation on video frames they process. For example, modifying the brightness,
 * contrast, hue or saturation.
 *
 * Example elements are 'xvimagesink' and 'colorbalance'.
 *
 * Last reviewed on 2016-05-16 (1.8.0)
 *
 * @ingroup GstInterfaces
 */

class ColorBalance : public Glib::Interface
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = ColorBalance;
  using CppClassType = ColorBalance_Class;
  using BaseObjectType = GstColorBalance;
  using BaseClassType = GstColorBalanceInterface;

  // noncopyable
  ColorBalance(const ColorBalance&) = delete;
  ColorBalance& operator=(const ColorBalance&) = delete;

private:
  friend class ColorBalance_Class;
  static CppClassType colorbalance_class_;

#endif /* DOXYGEN_SHOULD_SKIP_THIS */
protected:
  /**
   * You should derive from this class to use it.
   */
  ColorBalance();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  /** Called by constructors of derived classes. Provide the result of
   * the Class init() function to ensure that it is properly
   * initialized.
   *
   * @param interface_class The Class object for the derived type.
   */
  explicit ColorBalance(const Glib::Interface_Class& interface_class);

public:
  // This is public so that C++ wrapper instances can be
  // created for C instances of unwrapped types.
  // For instance, if an unexpected C type implements the C interface.
  explicit ColorBalance(GstColorBalance* castitem);

protected:
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  ColorBalance(ColorBalance&& src) noexcept;
  ColorBalance& operator=(ColorBalance&& src) noexcept;

  ~ColorBalance() noexcept override;

  static void add_interface(GType gtype_implementer);

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstColorBalance*       gobj()       { return reinterpret_cast<GstColorBalance*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstColorBalance* gobj() const { return reinterpret_cast<GstColorBalance*>(gobject_); }

private:


public:
 

  /** Retrieve a list of the available channels.
   * 
   * @return A
   * GList containing pointers to Gst::ColorBalanceChannel
   * objects. The list is owned by the Gst::ColorBalance
   * instance and must not be freed.
   */
  Glib::ListHandle< Glib::RefPtr<Gst::ColorBalanceChannel> > list_channels();

 
  /** Retrieve a list of the available channels.
   * 
   * @return A
   * GList containing pointers to Gst::ColorBalanceChannel
   * objects. The list is owned by the Gst::ColorBalance
   * instance and must not be freed.
   */
  Glib::ListHandle< Glib::RefPtr<const Gst::ColorBalanceChannel> > list_channels() const;

  
  /** Retrieve the current value of the indicated channel, between min_value
   * and max_value.
   * 
   * See Also: The Gst::ColorBalanceChannel.min_value and
   * Gst::ColorBalanceChannel.max_value members of the
   * Gst::ColorBalanceChannel object.
   * 
   * @param channel A Gst::ColorBalanceChannel instance.
   * @return The current value of the channel.
   */
  int get_value(const Glib::RefPtr<const Gst::ColorBalanceChannel>& channel) const;
  
  /** Sets the current value of the channel to the passed value, which must
   * be between min_value and max_value.
   * 
   * See Also: The Gst::ColorBalanceChannel.min_value and
   * Gst::ColorBalanceChannel.max_value members of the
   * Gst::ColorBalanceChannel object.
   * 
   * @param channel A Gst::ColorBalanceChannel instance.
   * @param value The new value for the channel.
   */
  void set_value(const Glib::RefPtr<Gst::ColorBalanceChannel>& channel, int value);
  
  /** A helper function called by implementations of the GstColorBalance
   * interface. It fires the Gst::ColorBalance::signal_value_changed() signal on the
   * instance, and the Gst::ColorBalanceChannel::signal_value_changed() signal on the
   * channel object.
   * 
   * @param channel A Gst::ColorBalanceChannel whose value has changed.
   * @param value The new value of the channel.
   */
  void value_changed(const Glib::RefPtr<Gst::ColorBalanceChannel>& channel, int value);
  
  /** Get the Gst::ColorBalanceType of this implementation.
   * 
   * @return A the Gst::ColorBalanceType.
   */
  Gst::ColorBalanceType get_balance_type() const;

 
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%value_changed(const Glib::RefPtr<Gst::ColorBalanceChannel>& channel, int value)</tt>
   *
   * Fired when the value of the indicated channel has changed.
   * 
   * @param channel The Gst::ColorBalanceChannel.
   * @param value The new value.
   */

  Glib::SignalProxy< void,const Glib::RefPtr<Gst::ColorBalanceChannel>&,int > signal_value_changed();


  /** Lists the channels of the Gst::ColorBalance.
   */
  virtual Glib::ListHandle< Glib::RefPtr<Gst::ColorBalanceChannel> > list_channels_vfunc() const;

  /** Sets the value of a Gst::ColorBalanceChannel of the Gst::ColorBalance.
   */
    virtual void set_value_vfunc(const Glib::RefPtr<Gst::ColorBalanceChannel>& channel, int value);


  /** Gets the value of a Gst::ColorBalanceChannel of the Gst::ColorBalance.
   */
    virtual int get_value_vfunc(const Glib::RefPtr<const Gst::ColorBalanceChannel>& channel) const;


  /** Gets the implementation type.
   */
    virtual Gst::ColorBalanceType get_balance_type_vfunc();


protected:

  
public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  /// This is a default handler for the signal signal_value_changed().
  virtual void on_value_changed(const Glib::RefPtr<Gst::ColorBalanceChannel>& channel, int value);


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::ColorBalance
   */
  Glib::RefPtr<Gst::ColorBalance> wrap(GstColorBalance* object, bool take_copy = false);

} // namespace Glib


#endif /* _GSTREAMERMM_COLORBALANCE_H */

