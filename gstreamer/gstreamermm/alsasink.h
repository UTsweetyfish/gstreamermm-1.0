// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_ALSASINK_H
#define _GSTREAMERMM_ALSASINK_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/basesink.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstAlsaSink = struct _GstAlsaSink;
using GstAlsaSinkClass = struct _GstAlsaSinkClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class AlsaSink_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the alsasink plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class AlsaSink
: public Gst::BaseSink
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = AlsaSink;
  using CppClassType = AlsaSink_Class;
  using BaseObjectType = GstAlsaSink;
  using BaseClassType = GstAlsaSinkClass;

  // noncopyable
  AlsaSink(const AlsaSink&) = delete;
  AlsaSink& operator=(const AlsaSink&) = delete;

private:  friend class AlsaSink_Class;
  static CppClassType alsasink_class_;

protected:
  explicit AlsaSink(const Glib::ConstructParams& construct_params);
  explicit AlsaSink(GstAlsaSink* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  AlsaSink(AlsaSink&& src) noexcept;
  AlsaSink& operator=(AlsaSink&& src) noexcept;

  ~AlsaSink() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstAlsaSink*       gobj()       { return reinterpret_cast<GstAlsaSink*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstAlsaSink* gobj() const { return reinterpret_cast<GstAlsaSink*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstAlsaSink* gobj_copy();

private:

  
protected:
  AlsaSink();
  explicit AlsaSink(const Glib::ustring& name);

public:
  /** Creates a new alsasink plugin with a unique name.
   */
  
  static Glib::RefPtr<AlsaSink> create();


  /** Creates a new alsasink plugin with the given name.
   */
  
  static Glib::RefPtr<AlsaSink> create(const Glib::ustring& name);


  /** ALSA device, as defined in an asound configuration file.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_device() ;

/** ALSA device, as defined in an asound configuration file.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_device() const;

  /** Human-readable name of the sound device.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_device_name() const;


  /** Human-readable name of the sound card.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_card_name() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::AlsaSink
   */
  Glib::RefPtr<Gst::AlsaSink> wrap(GstAlsaSink* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_ALSASINK_H */

