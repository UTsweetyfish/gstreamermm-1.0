// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/adder.h>
#include <gstreamermm/private/adder_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

GType gst_adder_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("adder");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

Adder::Adder()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Element(Glib::ConstructParams(adder_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

Adder::Adder(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Element(Glib::ConstructParams(adder_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::Adder> wrap(GstAdder* object, bool take_copy)
{
  return Glib::RefPtr<Gst::Adder>( dynamic_cast<Gst::Adder*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& Adder_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Adder_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_adder_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Gst::ChildProxy::add_interface(get_type());

  }

  return *this;
}


void Adder_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Adder_Class::wrap_new(GObject* object)
{
  return new Adder((GstAdder*)object);
}


/* The implementation: */

GstAdder* Adder::gobj_copy()
{
  reference();
  return gobj();
}

Adder::Adder(const Glib::ConstructParams& construct_params)
:
  Gst::Element(construct_params)
{

}

Adder::Adder(GstAdder* castitem)
:
  Gst::Element((GstElement*)(castitem))
{}


Adder::Adder(Adder&& src) noexcept
: Gst::Element(std::move(src))
  , Gst::ChildProxy(std::move(src))
{}

Adder& Adder::operator=(Adder&& src) noexcept
{
  Gst::Element::operator=(std::move(src));
  Gst::ChildProxy::operator=(std::move(src));
  return *this;
}


Adder::~Adder() noexcept
{}


Adder::CppClassType Adder::adder_class_; // initialize static member

GType Adder::get_type()
{
  return adder_class_.init().get_type();
}


GType Adder::get_base_type()
{
  return gst_adder_gstreamermm_get_type();
}


Glib::RefPtr<Adder> Adder::create()
{
  return Glib::RefPtr<Adder>( new Adder() );
}

Glib::RefPtr<Adder> Adder::create(const Glib::ustring& name)
{
  return Glib::RefPtr<Adder>( new Adder(name) );
}


Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> > Adder::property_caps() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> >(this, "caps");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > Adder::property_caps() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> >(this, "caps");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


