// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_VOLUME_H
#define _GSTREAMERMM_VOLUME_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/basetransform.h>
#include <gstreamermm/streamvolume.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstVolume = struct _GstVolume;
using GstVolumeClass = struct _GstVolumeClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class Volume_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the volume plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class Volume
: public Gst::BaseTransform, public Gst::StreamVolume
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = Volume;
  using CppClassType = Volume_Class;
  using BaseObjectType = GstVolume;
  using BaseClassType = GstVolumeClass;

  // noncopyable
  Volume(const Volume&) = delete;
  Volume& operator=(const Volume&) = delete;

private:  friend class Volume_Class;
  static CppClassType volume_class_;

protected:
  explicit Volume(const Glib::ConstructParams& construct_params);
  explicit Volume(GstVolume* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  Volume(Volume&& src) noexcept;
  Volume& operator=(Volume&& src) noexcept;

  ~Volume() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstVolume*       gobj()       { return reinterpret_cast<GstVolume*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstVolume* gobj() const { return reinterpret_cast<GstVolume*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstVolume* gobj_copy();

private:

  
protected:
  Volume();
  explicit Volume(const Glib::ustring& name);

public:
  /** Creates a new volume plugin with a unique name.
   */
  
  static Glib::RefPtr<Volume> create();


  /** Creates a new volume plugin with the given name.
   */
  
  static Glib::RefPtr<Volume> create(const Glib::ustring& name);


  /** mute channel.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_mute() ;

/** mute channel.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_mute() const;

  /** volume factor, 1.0=100%.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< double > property_volume() ;

/** volume factor, 1.0=100%.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< double > property_volume() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::Volume
   */
  Glib::RefPtr<Gst::Volume> wrap(GstVolume* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_VOLUME_H */

