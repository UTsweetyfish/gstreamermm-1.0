// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_URIDECODEBIN_H
#define _GSTREAMERMM_URIDECODEBIN_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/bin.h>
#include <gstreamermm/element.h>
#include <gstreamermm/caps.h>
#include <gstreamermm/pad.h>
#include <glibmm/valuearray.h>
#include <gstreamermm/enums.h>
#include <gstreamermm/elementfactory.h>
#include <gstreamermm/query.h>


// Plug-in C enums used in signals:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstURIDecodeBin = struct _GstURIDecodeBin;
using GstURIDecodeBinClass = struct _GstURIDecodeBinClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class UriDecodeBin_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the uridecodebin plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class UriDecodeBin
: public Gst::Bin
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = UriDecodeBin;
  using CppClassType = UriDecodeBin_Class;
  using BaseObjectType = GstURIDecodeBin;
  using BaseClassType = GstURIDecodeBinClass;

  // noncopyable
  UriDecodeBin(const UriDecodeBin&) = delete;
  UriDecodeBin& operator=(const UriDecodeBin&) = delete;

private:  friend class UriDecodeBin_Class;
  static CppClassType uridecodebin_class_;

protected:
  explicit UriDecodeBin(const Glib::ConstructParams& construct_params);
  explicit UriDecodeBin(GstURIDecodeBin* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  UriDecodeBin(UriDecodeBin&& src) noexcept;
  UriDecodeBin& operator=(UriDecodeBin&& src) noexcept;

  ~UriDecodeBin() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstURIDecodeBin*       gobj()       { return reinterpret_cast<GstURIDecodeBin*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstURIDecodeBin* gobj() const { return reinterpret_cast<GstURIDecodeBin*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstURIDecodeBin* gobj_copy();

private:

  
protected:
  UriDecodeBin();
  explicit UriDecodeBin(const Glib::ustring& name);

public:
  /** Creates a new uridecodebin plugin with a unique name.
   */
  
  static Glib::RefPtr<UriDecodeBin> create();


  /** Creates a new uridecodebin plugin with the given name.
   */
  
  static Glib::RefPtr<UriDecodeBin> create(const Glib::ustring& name);


  /** URI to decode.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_uri() ;

/** URI to decode.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_uri() const;

  /** Source object used.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_source() const;


  /** Network connection speed in kbps (0 = unknown).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_connection_speed() ;

/** Network connection speed in kbps (0 = unknown).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_connection_speed() const;

  /** The caps on which to stop decoding. (NULL = default).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> > property_caps() ;

/** The caps on which to stop decoding. (NULL = default).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > property_caps() const;

  /** Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_subtitle_encoding() ;

/** Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_subtitle_encoding() const;

  /** Buffer size when buffering streams (-1 default value).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_buffer_size() ;

/** Buffer size when buffering streams (-1 default value).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_buffer_size() const;

  /** Buffer duration when buffering streams (-1 default value).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< gint64 > property_buffer_duration() ;

/** Buffer duration when buffering streams (-1 default value).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< gint64 > property_buffer_duration() const;

  /** Attempt download buffering when buffering network streams.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_download() ;

/** Attempt download buffering when buffering network streams.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_download() const;

  /** Perform buffering on demuxed/parsed media.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_use_buffering() ;

/** Perform buffering on demuxed/parsed media.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_use_buffering() const;

  /** Expose all streams, including those of unknown type or that don't match the 'caps' property.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_expose_all_streams() ;

/** Expose all streams, including those of unknown type or that don't match the 'caps' property.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_expose_all_streams() const;

  /** Max. amount of data in the ring buffer (bytes, 0 = ring buffer disabled).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_ring_buffer_max_size() ;

/** Max. amount of data in the ring buffer (bytes, 0 = ring buffer disabled).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_ring_buffer_max_size() const;


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%unknown_type(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1)</tt>
   *
   */

  Glib::SignalProxy< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& > signal_unknown_type();

 
  /**
   * @par Slot Prototype:
   * <tt>bool on_my_%autoplug_continue(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1)</tt>
   *
   */

  Glib::SignalProxy< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& > signal_autoplug_continue();

 
  /**
   * @par Slot Prototype:
   * <tt>Glib::ValueArray on_my_%autoplug_factories(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1)</tt>
   *
   */

  Glib::SignalProxy< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& > signal_autoplug_factories();

 
  /**
   * @par Slot Prototype:
   * <tt>Glib::ValueArray on_my_%autoplug_sort(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1, const Glib::ValueArray& arg2)</tt>
   *
   */

  Glib::SignalProxy< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::ValueArray& > signal_autoplug_sort();

 
  /**
   * @par Slot Prototype:
   * <tt>Gst::AutoplugSelectResult on_my_%autoplug_select(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1, const Glib::RefPtr<Gst::ElementFactory>& arg2)</tt>
   *
   */

  Glib::SignalProxy< Gst::AutoplugSelectResult,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::RefPtr<Gst::ElementFactory>& > signal_autoplug_select();

 
  /**
   * @par Slot Prototype:
   * <tt>bool on_my_%autoplug_query(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Element>& arg1, const Glib::RefPtr<Gst::Query>& arg2)</tt>
   *
   */

  Glib::SignalProxy< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Element>&,const Glib::RefPtr<Gst::Query>& > signal_autoplug_query();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%drained()</tt>
   *
   */

  Glib::SignalProxy< void > signal_drained();

 
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%source_setup(const Glib::RefPtr<Gst::Element>& arg0)</tt>
   *
   */

  Glib::SignalProxy< void,const Glib::RefPtr<Gst::Element>& > signal_source_setup();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::UriDecodeBin
   */
  Glib::RefPtr<Gst::UriDecodeBin> wrap(GstURIDecodeBin* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_URIDECODEBIN_H */

