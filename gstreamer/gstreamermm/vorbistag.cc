// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/vorbistag.h>
#include <gstreamermm/private/vorbistag_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

GType gst_vorbis_tag_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("vorbistag");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

VorbisTag::VorbisTag()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::VorbisParse(Glib::ConstructParams(vorbistag_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

VorbisTag::VorbisTag(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::VorbisParse(Glib::ConstructParams(vorbistag_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::VorbisTag> wrap(GstVorbisTag* object, bool take_copy)
{
  return Glib::RefPtr<Gst::VorbisTag>( dynamic_cast<Gst::VorbisTag*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& VorbisTag_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &VorbisTag_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_vorbis_tag_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Gst::TagSetter::add_interface(get_type());

  }

  return *this;
}


void VorbisTag_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* VorbisTag_Class::wrap_new(GObject* object)
{
  return new VorbisTag((GstVorbisTag*)object);
}


/* The implementation: */

GstVorbisTag* VorbisTag::gobj_copy()
{
  reference();
  return gobj();
}

VorbisTag::VorbisTag(const Glib::ConstructParams& construct_params)
:
  Gst::VorbisParse(construct_params)
{

}

VorbisTag::VorbisTag(GstVorbisTag* castitem)
:
  Gst::VorbisParse((GstVorbisParse*)(castitem))
{}


VorbisTag::VorbisTag(VorbisTag&& src) noexcept
: Gst::VorbisParse(std::move(src))
  , Gst::TagSetter(std::move(src))
{}

VorbisTag& VorbisTag::operator=(VorbisTag&& src) noexcept
{
  Gst::VorbisParse::operator=(std::move(src));
  Gst::TagSetter::operator=(std::move(src));
  return *this;
}


VorbisTag::~VorbisTag() noexcept
{}


VorbisTag::CppClassType VorbisTag::vorbistag_class_; // initialize static member

GType VorbisTag::get_type()
{
  return vorbistag_class_.init().get_type();
}


GType VorbisTag::get_base_type()
{
  return gst_vorbis_tag_gstreamermm_get_type();
}


Glib::RefPtr<VorbisTag> VorbisTag::create()
{
  return Glib::RefPtr<VorbisTag>( new VorbisTag() );
}

Glib::RefPtr<VorbisTag> VorbisTag::create(const Glib::ustring& name)
{
  return Glib::RefPtr<VorbisTag>( new VorbisTag(name) );
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


