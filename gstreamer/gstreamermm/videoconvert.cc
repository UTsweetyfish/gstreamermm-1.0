// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/videoconvert.h>
#include <gstreamermm/private/videoconvert_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

static GType gst_video_dither_method_get_type()
{
  static GType const type = g_type_from_name("GstVideoDitherMethod");
  return type;
}

static GType gst_video_resampler_method_get_type()
{
  static GType const type = g_type_from_name("GstVideoResamplerMethod");
  return type;
}

static GType gst_video_alpha_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoAlphaMode");
  return type;
}

static GType gst_video_chroma_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoChromaMode");
  return type;
}

static GType gst_video_matrix_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoMatrixMode");
  return type;
}

static GType gst_video_gamma_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoGammaMode");
  return type;
}

static GType gst_video_primaries_mode_get_type()
{
  static GType const type = g_type_from_name("GstVideoPrimariesMode");
  return type;
}

GType gst_video_convert_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("videoconvert");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

VideoConvert::VideoConvert()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::BaseTransform(Glib::ConstructParams(videoconvert_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

VideoConvert::VideoConvert(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::BaseTransform(Glib::ConstructParams(videoconvert_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{
} // anonymous namespace

// static
GType Glib::Value<Gst::VideoDitherMethod>::value_type()
{
  return gst_video_dither_method_get_type();
}

// static
GType Glib::Value<Gst::VideoResamplerMethod>::value_type()
{
  return gst_video_resampler_method_get_type();
}

// static
GType Glib::Value<Gst::VideoAlphaMode>::value_type()
{
  return gst_video_alpha_mode_get_type();
}

// static
GType Glib::Value<Gst::VideoChromaMode>::value_type()
{
  return gst_video_chroma_mode_get_type();
}

// static
GType Glib::Value<Gst::VideoMatrixMode>::value_type()
{
  return gst_video_matrix_mode_get_type();
}

// static
GType Glib::Value<Gst::VideoGammaMode>::value_type()
{
  return gst_video_gamma_mode_get_type();
}

// static
GType Glib::Value<Gst::VideoPrimariesMode>::value_type()
{
  return gst_video_primaries_mode_get_type();
}


namespace Glib
{

Glib::RefPtr<Gst::VideoConvert> wrap(GstVideoConvert* object, bool take_copy)
{
  return Glib::RefPtr<Gst::VideoConvert>( dynamic_cast<Gst::VideoConvert*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& VideoConvert_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &VideoConvert_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_video_convert_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void VideoConvert_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* VideoConvert_Class::wrap_new(GObject* object)
{
  return new VideoConvert((GstVideoConvert*)object);
}


/* The implementation: */

GstVideoConvert* VideoConvert::gobj_copy()
{
  reference();
  return gobj();
}

VideoConvert::VideoConvert(const Glib::ConstructParams& construct_params)
:
  Gst::BaseTransform(construct_params)
{

}

VideoConvert::VideoConvert(GstVideoConvert* castitem)
:
  Gst::BaseTransform((GstBaseTransform*)(castitem))
{}


VideoConvert::VideoConvert(VideoConvert&& src) noexcept
: Gst::BaseTransform(std::move(src))
{}

VideoConvert& VideoConvert::operator=(VideoConvert&& src) noexcept
{
  Gst::BaseTransform::operator=(std::move(src));
  return *this;
}


VideoConvert::~VideoConvert() noexcept
{}


VideoConvert::CppClassType VideoConvert::videoconvert_class_; // initialize static member

GType VideoConvert::get_type()
{
  return videoconvert_class_.init().get_type();
}


GType VideoConvert::get_base_type()
{
  return gst_video_convert_gstreamermm_get_type();
}


Glib::RefPtr<VideoConvert> VideoConvert::create()
{
  return Glib::RefPtr<VideoConvert>( new VideoConvert() );
}

Glib::RefPtr<VideoConvert> VideoConvert::create(const Glib::ustring& name)
{
  return Glib::RefPtr<VideoConvert>( new VideoConvert(name) );
}


Glib::PropertyProxy< Gst::VideoDitherMethod > VideoConvert::property_dither() 
{
  return Glib::PropertyProxy< Gst::VideoDitherMethod >(this, "dither");
}

Glib::PropertyProxy_ReadOnly< Gst::VideoDitherMethod > VideoConvert::property_dither() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::VideoDitherMethod >(this, "dither");
}

Glib::PropertyProxy< guint > VideoConvert::property_dither_quantization() 
{
  return Glib::PropertyProxy< guint >(this, "dither-quantization");
}

Glib::PropertyProxy_ReadOnly< guint > VideoConvert::property_dither_quantization() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "dither-quantization");
}

Glib::PropertyProxy< Gst::VideoResamplerMethod > VideoConvert::property_chroma_resampler() 
{
  return Glib::PropertyProxy< Gst::VideoResamplerMethod >(this, "chroma-resampler");
}

Glib::PropertyProxy_ReadOnly< Gst::VideoResamplerMethod > VideoConvert::property_chroma_resampler() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::VideoResamplerMethod >(this, "chroma-resampler");
}

Glib::PropertyProxy< Gst::VideoAlphaMode > VideoConvert::property_alpha_mode() 
{
  return Glib::PropertyProxy< Gst::VideoAlphaMode >(this, "alpha-mode");
}

Glib::PropertyProxy_ReadOnly< Gst::VideoAlphaMode > VideoConvert::property_alpha_mode() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::VideoAlphaMode >(this, "alpha-mode");
}

Glib::PropertyProxy< double > VideoConvert::property_alpha_value() 
{
  return Glib::PropertyProxy< double >(this, "alpha-value");
}

Glib::PropertyProxy_ReadOnly< double > VideoConvert::property_alpha_value() const
{
  return Glib::PropertyProxy_ReadOnly< double >(this, "alpha-value");
}

Glib::PropertyProxy< Gst::VideoChromaMode > VideoConvert::property_chroma_mode() 
{
  return Glib::PropertyProxy< Gst::VideoChromaMode >(this, "chroma-mode");
}

Glib::PropertyProxy_ReadOnly< Gst::VideoChromaMode > VideoConvert::property_chroma_mode() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::VideoChromaMode >(this, "chroma-mode");
}

Glib::PropertyProxy< Gst::VideoMatrixMode > VideoConvert::property_matrix_mode() 
{
  return Glib::PropertyProxy< Gst::VideoMatrixMode >(this, "matrix-mode");
}

Glib::PropertyProxy_ReadOnly< Gst::VideoMatrixMode > VideoConvert::property_matrix_mode() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::VideoMatrixMode >(this, "matrix-mode");
}

Glib::PropertyProxy< Gst::VideoGammaMode > VideoConvert::property_gamma_mode() 
{
  return Glib::PropertyProxy< Gst::VideoGammaMode >(this, "gamma-mode");
}

Glib::PropertyProxy_ReadOnly< Gst::VideoGammaMode > VideoConvert::property_gamma_mode() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::VideoGammaMode >(this, "gamma-mode");
}

Glib::PropertyProxy< Gst::VideoPrimariesMode > VideoConvert::property_primaries_mode() 
{
  return Glib::PropertyProxy< Gst::VideoPrimariesMode >(this, "primaries-mode");
}

Glib::PropertyProxy_ReadOnly< Gst::VideoPrimariesMode > VideoConvert::property_primaries_mode() const
{
  return Glib::PropertyProxy_ReadOnly< Gst::VideoPrimariesMode >(this, "primaries-mode");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


