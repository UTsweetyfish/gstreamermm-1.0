// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <gstreamermmconfig.h>
#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm.h>

#include <gstreamermm/subtitleoverlay.h>
#include <gstreamermm/private/subtitleoverlay_p.h>


// Generated by generate_plugin_gmmproc_file. Don't edit this file.


extern "C"
{

GType gst_subtitle_overlay_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("subtitleoverlay");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

SubtitleOverlay::SubtitleOverlay()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Bin(Glib::ConstructParams(subtitleoverlay_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

SubtitleOverlay::SubtitleOverlay(const Glib::ustring& name)
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gst::Bin(Glib::ConstructParams(subtitleoverlay_class_.init(), "name",name.c_str(), nullptr))
{}

}

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::SubtitleOverlay> wrap(GstSubtitleOverlay* object, bool take_copy)
{
  return Glib::RefPtr<Gst::SubtitleOverlay>( dynamic_cast<Gst::SubtitleOverlay*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& SubtitleOverlay_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &SubtitleOverlay_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_subtitle_overlay_gstreamermm_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void SubtitleOverlay_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* SubtitleOverlay_Class::wrap_new(GObject* object)
{
  return new SubtitleOverlay((GstSubtitleOverlay*)object);
}


/* The implementation: */

GstSubtitleOverlay* SubtitleOverlay::gobj_copy()
{
  reference();
  return gobj();
}

SubtitleOverlay::SubtitleOverlay(const Glib::ConstructParams& construct_params)
:
  Gst::Bin(construct_params)
{

}

SubtitleOverlay::SubtitleOverlay(GstSubtitleOverlay* castitem)
:
  Gst::Bin((GstBin*)(castitem))
{}


SubtitleOverlay::SubtitleOverlay(SubtitleOverlay&& src) noexcept
: Gst::Bin(std::move(src))
{}

SubtitleOverlay& SubtitleOverlay::operator=(SubtitleOverlay&& src) noexcept
{
  Gst::Bin::operator=(std::move(src));
  return *this;
}


SubtitleOverlay::~SubtitleOverlay() noexcept
{}


SubtitleOverlay::CppClassType SubtitleOverlay::subtitleoverlay_class_; // initialize static member

GType SubtitleOverlay::get_type()
{
  return subtitleoverlay_class_.init().get_type();
}


GType SubtitleOverlay::get_base_type()
{
  return gst_subtitle_overlay_gstreamermm_get_type();
}


Glib::RefPtr<SubtitleOverlay> SubtitleOverlay::create()
{
  return Glib::RefPtr<SubtitleOverlay>( new SubtitleOverlay() );
}

Glib::RefPtr<SubtitleOverlay> SubtitleOverlay::create(const Glib::ustring& name)
{
  return Glib::RefPtr<SubtitleOverlay>( new SubtitleOverlay(name) );
}


Glib::PropertyProxy< bool > SubtitleOverlay::property_silent() 
{
  return Glib::PropertyProxy< bool >(this, "silent");
}

Glib::PropertyProxy_ReadOnly< bool > SubtitleOverlay::property_silent() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "silent");
}

Glib::PropertyProxy< Glib::ustring > SubtitleOverlay::property_font_desc() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "font-desc");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > SubtitleOverlay::property_font_desc() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "font-desc");
}

Glib::PropertyProxy< Glib::ustring > SubtitleOverlay::property_subtitle_encoding() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "subtitle-encoding");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > SubtitleOverlay::property_subtitle_encoding() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "subtitle-encoding");
}


} // namespace Gst

#endif // GSTREAMERMM_DISABLE_DEPRECATED


