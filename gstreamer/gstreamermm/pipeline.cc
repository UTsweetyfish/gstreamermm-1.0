// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/pipeline.h>
#include <gstreamermm/private/pipeline_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gst.h>
#include <gstreamermm/bus.h>


namespace Gst
{

Pipeline::Pipeline()
: // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Bin(Glib::ConstructParams(pipeline_class_.init(), "name",static_cast<char*>(0), nullptr))
{}

} // namespace Gst

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::Pipeline> wrap(GstPipeline* object, bool take_copy)
{
  return Glib::RefPtr<Gst::Pipeline>( dynamic_cast<Gst::Pipeline*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& Pipeline_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Pipeline_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_pipeline_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void Pipeline_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Pipeline_Class::wrap_new(GObject* object)
{
  return new Pipeline((GstPipeline*)object);
}


/* The implementation: */

GstPipeline* Pipeline::gobj_copy()
{
  reference();
  return gobj();
}

Pipeline::Pipeline(const Glib::ConstructParams& construct_params)
:
  Bin(construct_params)
{

}

Pipeline::Pipeline(GstPipeline* castitem)
:
  Bin((GstBin*)(castitem))
{}


Pipeline::Pipeline(Pipeline&& src) noexcept
: Bin(std::move(src))
{}

Pipeline& Pipeline::operator=(Pipeline&& src) noexcept
{
  Bin::operator=(std::move(src));
  return *this;
}


Pipeline::~Pipeline() noexcept
{}


Pipeline::CppClassType Pipeline::pipeline_class_; // initialize static member

GType Pipeline::get_type()
{
  return pipeline_class_.init().get_type();
}


GType Pipeline::get_base_type()
{
  return gst_pipeline_get_type();
}


Pipeline::Pipeline(const Glib::ustring& name)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Bin(Glib::ConstructParams(pipeline_class_.init(), "name", name.c_str(), nullptr))
{
  

}

Glib::RefPtr<Pipeline> Pipeline::create(const Glib::ustring& name)
{
  return Glib::RefPtr<Pipeline>( new Pipeline(name) );
}

Glib::RefPtr<Pipeline> Pipeline::create()
{
  return Glib::RefPtr<Pipeline>( new Pipeline() );
}

Glib::RefPtr<Gst::Bus> Pipeline::get_bus()
{
  return Glib::wrap(gst_pipeline_get_bus(gobj()));
}

Glib::RefPtr<const Gst::Bus> Pipeline::get_bus() const
{
  return const_cast<Pipeline*>(this)->get_bus();
}

bool Pipeline::set_clock(const Glib::RefPtr<Gst::Clock>& clock)
{
  return gst_pipeline_set_clock(gobj(), Glib::unwrap(clock));
}

Glib::RefPtr<Gst::Clock> Pipeline::get_clock()
{
  return Glib::wrap(gst_pipeline_get_clock(gobj()));
}

Glib::RefPtr<const Gst::Clock> Pipeline::get_clock() const
{
  return const_cast<Pipeline*>(this)->get_clock();
}

void Pipeline::use_clock(const Glib::RefPtr<Gst::Clock>& clock)
{
  gst_pipeline_use_clock(gobj(), Glib::unwrap(clock));
}

void Pipeline::auto_clock()
{
  gst_pipeline_auto_clock(gobj());
}

void Pipeline::set_auto_flush_bus(gboolean auto_flush)
{
  gst_pipeline_set_auto_flush_bus(gobj(), auto_flush);
}

bool Pipeline::get_auto_flush_bus() const
{
  return gst_pipeline_get_auto_flush_bus(const_cast<GstPipeline*>(gobj()));
}

void Pipeline::set_delay(ClockTime delay)
{
  gst_pipeline_set_delay(gobj(), ((GstClockTime)(delay)));
}

ClockTime Pipeline::get_delay() const
{
  return ((ClockTime)(gst_pipeline_get_delay(const_cast<GstPipeline*>(gobj()))));
}

Glib::RefPtr<Gst::Clock> Pipeline::get_pipeline_clock()
{
  return Glib::wrap(gst_pipeline_get_pipeline_clock(gobj()));
}

Glib::RefPtr<const Gst::Clock> Pipeline::get_pipeline_clock() const
{
  return const_cast<Pipeline*>(this)->get_pipeline_clock();
}

void Pipeline::set_latency(Gst::ClockTime latency)
{
  gst_pipeline_set_latency(gobj(), ((GstClockTime)(latency)));
}

Gst::ClockTime Pipeline::get_latency() const
{
  return ((Gst::ClockTime)(gst_pipeline_get_latency(const_cast<GstPipeline*>(gobj()))));
}


Glib::PropertyProxy< guint64 > Pipeline::property_latency() 
{
  return Glib::PropertyProxy< guint64 >(this, "latency");
}

Glib::PropertyProxy_ReadOnly< guint64 > Pipeline::property_latency() const
{
  return Glib::PropertyProxy_ReadOnly< guint64 >(this, "latency");
}

Glib::PropertyProxy< bool > Pipeline::property_auto_flush_bus() 
{
  return Glib::PropertyProxy< bool >(this, "auto-flush-bus");
}

Glib::PropertyProxy_ReadOnly< bool > Pipeline::property_auto_flush_bus() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "auto-flush-bus");
}

Glib::PropertyProxy< ClockTime > Pipeline::property_delay() 
{
  return Glib::PropertyProxy< ClockTime >(this, "delay");
}

Glib::PropertyProxy_ReadOnly< ClockTime > Pipeline::property_delay() const
{
  return Glib::PropertyProxy_ReadOnly< ClockTime >(this, "delay");
}


} // namespace Gst


