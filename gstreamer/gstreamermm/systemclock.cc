// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/systemclock.h>
#include <gstreamermm/private/systemclock_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gst.h>


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::SystemClock> wrap(GstSystemClock* object, bool take_copy)
{
  return Glib::RefPtr<Gst::SystemClock>( dynamic_cast<Gst::SystemClock*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& SystemClock_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &SystemClock_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_system_clock_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void SystemClock_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* SystemClock_Class::wrap_new(GObject* object)
{
  return new SystemClock((GstSystemClock*)object);
}


/* The implementation: */

GstSystemClock* SystemClock::gobj_copy()
{
  reference();
  return gobj();
}

SystemClock::SystemClock(const Glib::ConstructParams& construct_params)
:
  Clock(construct_params)
{

}

SystemClock::SystemClock(GstSystemClock* castitem)
:
  Clock((GstClock*)(castitem))
{}


SystemClock::SystemClock(SystemClock&& src) noexcept
: Clock(std::move(src))
{}

SystemClock& SystemClock::operator=(SystemClock&& src) noexcept
{
  Clock::operator=(std::move(src));
  return *this;
}


SystemClock::~SystemClock() noexcept
{}


SystemClock::CppClassType SystemClock::systemclock_class_; // initialize static member

GType SystemClock::get_type()
{
  return systemclock_class_.init().get_type();
}


GType SystemClock::get_base_type()
{
  return gst_system_clock_get_type();
}


SystemClock::SystemClock()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Clock(Glib::ConstructParams(systemclock_class_.init()))
{
  

}

Glib::RefPtr<Gst::Clock> SystemClock::obtain()
{
  return Glib::wrap(gst_system_clock_obtain());
}


} // namespace Gst


