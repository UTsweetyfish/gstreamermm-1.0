// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_DECODEBIN_H
#define _GSTREAMERMM_DECODEBIN_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/bin.h>
#include <gstreamermm/caps.h>
#include <gstreamermm/pad.h>
#include <glibmm/valuearray.h>
#include <gstreamermm/enums.h>
#include <gstreamermm/elementfactory.h>
#include <gstreamermm/element.h>
#include <gstreamermm/query.h>


// Plug-in C enums used in signals:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstDecodeBin = struct _GstDecodeBin;
using GstDecodeBinClass = struct _GstDecodeBinClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class DecodeBin_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the decodebin plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class DecodeBin
: public Gst::Bin
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = DecodeBin;
  using CppClassType = DecodeBin_Class;
  using BaseObjectType = GstDecodeBin;
  using BaseClassType = GstDecodeBinClass;

  // noncopyable
  DecodeBin(const DecodeBin&) = delete;
  DecodeBin& operator=(const DecodeBin&) = delete;

private:  friend class DecodeBin_Class;
  static CppClassType decodebin_class_;

protected:
  explicit DecodeBin(const Glib::ConstructParams& construct_params);
  explicit DecodeBin(GstDecodeBin* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  DecodeBin(DecodeBin&& src) noexcept;
  DecodeBin& operator=(DecodeBin&& src) noexcept;

  ~DecodeBin() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstDecodeBin*       gobj()       { return reinterpret_cast<GstDecodeBin*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstDecodeBin* gobj() const { return reinterpret_cast<GstDecodeBin*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstDecodeBin* gobj_copy();

private:

  
protected:
  DecodeBin();
  explicit DecodeBin(const Glib::ustring& name);

public:
  /** Creates a new decodebin plugin with a unique name.
   */
  
  static Glib::RefPtr<DecodeBin> create();


  /** Creates a new decodebin plugin with the given name.
   */
  
  static Glib::RefPtr<DecodeBin> create(const Glib::ustring& name);


  /** The caps on which to stop decoding.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> > property_caps() ;

/** The caps on which to stop decoding.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > property_caps() const;

  /** Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_subtitle_encoding() ;

/** Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_subtitle_encoding() const;

  /** The caps of the input data. (NULL = use typefind element).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> > property_sink_caps() ;

/** The caps of the input data. (NULL = use typefind element).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > property_sink_caps() const;

  /** Emit GST_MESSAGE_BUFFERING based on low-/high-percent thresholds.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_use_buffering() ;

/** Emit GST_MESSAGE_BUFFERING based on low-/high-percent thresholds.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_use_buffering() const;

  /** Low threshold for buffering to start.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_low_percent() ;

/** Low threshold for buffering to start.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_low_percent() const;

  /** High threshold for buffering to finish.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_high_percent() ;

/** High threshold for buffering to finish.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_high_percent() const;

  /** Max. amount of bytes in the queue (0=automatic).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_max_size_bytes() ;

/** Max. amount of bytes in the queue (0=automatic).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_max_size_bytes() const;

  /** Max. number of buffers in the queue (0=automatic).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_max_size_buffers() ;

/** Max. number of buffers in the queue (0=automatic).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_max_size_buffers() const;

  /** Max. amount of data in the queue (in ns, 0=automatic).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_max_size_time() ;

/** Max. amount of data in the queue (in ns, 0=automatic).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_max_size_time() const;

  /** Post stream-topology messages.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_post_stream_topology() ;

/** Post stream-topology messages.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_post_stream_topology() const;

  /** Expose all streams, including those of unknown type or that don't match the 'caps' property.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_expose_all_streams() ;

/** Expose all streams, including those of unknown type or that don't match the 'caps' property.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_expose_all_streams() const;

  /** Network connection speed in kbps (0 = unknown).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_connection_speed() ;

/** Network connection speed in kbps (0 = unknown).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_connection_speed() const;


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%unknown_type(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1)</tt>
   *
   */

  Glib::SignalProxy< void,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& > signal_unknown_type();

 
  /**
   * @par Slot Prototype:
   * <tt>bool on_my_%autoplug_continue(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1)</tt>
   *
   */

  Glib::SignalProxy< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& > signal_autoplug_continue();

 
  /**
   * @par Slot Prototype:
   * <tt>Glib::ValueArray on_my_%autoplug_factories(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1)</tt>
   *
   */

  Glib::SignalProxy< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>& > signal_autoplug_factories();

 
  /**
   * @par Slot Prototype:
   * <tt>Glib::ValueArray on_my_%autoplug_sort(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1, const Glib::ValueArray& arg2)</tt>
   *
   */

  Glib::SignalProxy< Glib::ValueArray,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::ValueArray& > signal_autoplug_sort();

 
  /**
   * @par Slot Prototype:
   * <tt>Gst::AutoplugSelectResult on_my_%autoplug_select(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Caps>& arg1, const Glib::RefPtr<Gst::ElementFactory>& arg2)</tt>
   *
   */

  Glib::SignalProxy< Gst::AutoplugSelectResult,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Caps>&,const Glib::RefPtr<Gst::ElementFactory>& > signal_autoplug_select();

 
  /**
   * @par Slot Prototype:
   * <tt>bool on_my_%autoplug_query(const Glib::RefPtr<Gst::Pad>& arg0, const Glib::RefPtr<Gst::Element>& arg1, const Glib::RefPtr<Gst::Query>& arg2)</tt>
   *
   */

  Glib::SignalProxy< bool,const Glib::RefPtr<Gst::Pad>&,const Glib::RefPtr<Gst::Element>&,const Glib::RefPtr<Gst::Query>& > signal_autoplug_query();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%drained()</tt>
   *
   */

  Glib::SignalProxy< void > signal_drained();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::DecodeBin
   */
  Glib::RefPtr<Gst::DecodeBin> wrap(GstDecodeBin* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_DECODEBIN_H */

