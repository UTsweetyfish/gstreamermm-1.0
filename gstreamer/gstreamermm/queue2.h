// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_QUEUE2_H
#define _GSTREAMERMM_QUEUE2_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/element.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstQueue2 = struct _GstQueue2;
using GstQueue2Class = struct _GstQueue2Class;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class Queue2_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the queue2 plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class Queue2
: public Gst::Element
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = Queue2;
  using CppClassType = Queue2_Class;
  using BaseObjectType = GstQueue2;
  using BaseClassType = GstQueue2Class;

  // noncopyable
  Queue2(const Queue2&) = delete;
  Queue2& operator=(const Queue2&) = delete;

private:  friend class Queue2_Class;
  static CppClassType queue2_class_;

protected:
  explicit Queue2(const Glib::ConstructParams& construct_params);
  explicit Queue2(GstQueue2* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  Queue2(Queue2&& src) noexcept;
  Queue2& operator=(Queue2&& src) noexcept;

  ~Queue2() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstQueue2*       gobj()       { return reinterpret_cast<GstQueue2*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstQueue2* gobj() const { return reinterpret_cast<GstQueue2*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstQueue2* gobj_copy();

private:

  
protected:
  Queue2();
  explicit Queue2(const Glib::ustring& name);

public:
  /** Creates a new queue2 plugin with a unique name.
   */
  
  static Glib::RefPtr<Queue2> create();


  /** Creates a new queue2 plugin with the given name.
   */
  
  static Glib::RefPtr<Queue2> create(const Glib::ustring& name);


  /** Current number of buffers in the queue.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_current_level_buffers() const;


  /** Current amount of data in the queue (bytes).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_current_level_bytes() const;


  /** Current amount of data in the queue (in ns).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_current_level_time() const;


  /** Max. number of buffers in the queue (0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_max_size_buffers() ;

/** Max. number of buffers in the queue (0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_max_size_buffers() const;

  /** Max. amount of data in the queue (bytes, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_max_size_bytes() ;

/** Max. amount of data in the queue (bytes, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_max_size_bytes() const;

  /** Max. amount of data in the queue (in ns, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_max_size_time() ;

/** Max. amount of data in the queue (in ns, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_max_size_time() const;

  /** Emit GST_MESSAGE_BUFFERING based on low-/high-percent thresholds.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_use_buffering() ;

/** Emit GST_MESSAGE_BUFFERING based on low-/high-percent thresholds.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_use_buffering() const;

  /** Use a bitrate from upstream tags to estimate buffer duration if not provided.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_use_tags_bitrate() ;

/** Use a bitrate from upstream tags to estimate buffer duration if not provided.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_use_tags_bitrate() const;

  /** Estimate the bitrate of the stream to calculate time level.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_use_rate_estimate() ;

/** Estimate the bitrate of the stream to calculate time level.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_use_rate_estimate() const;

  /** Low threshold for buffering to start. Only used if use-buffering is True.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_low_percent() ;

/** Low threshold for buffering to start. Only used if use-buffering is True.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_low_percent() const;

  /** High threshold for buffering to finish. Only used if use-buffering is True.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_high_percent() ;

/** High threshold for buffering to finish. Only used if use-buffering is True.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_high_percent() const;

  //gtkmmproc error: low-watermark : property defs lookup failed.
  //gtkmmproc error: high-watermark : property defs lookup failed.
  /** File template to store temporary files in, should contain directory and XXXXXX. (NULL == disabled).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_temp_template() ;

/** File template to store temporary files in, should contain directory and XXXXXX. (NULL == disabled).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_temp_template() const;

  /** Location to store temporary files in (Only read this property, use temp-template to configure the name template).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_temp_location() const;


  /** Remove the temp-location after use.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_temp_remove() ;

/** Remove the temp-location after use.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_temp_remove() const;

  /** Max. amount of data in the ring buffer (bytes, 0 = disabled).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_ring_buffer_max_size() ;

/** Max. amount of data in the ring buffer (bytes, 0 = disabled).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_ring_buffer_max_size() const;

  /** Average input data rate (bytes/s).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< gint64 > property_avg_in_rate() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::Queue2
   */
  Glib::RefPtr<Gst::Queue2> wrap(GstQueue2* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_QUEUE2_H */

