// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_VORBISTAG_H
#define _GSTREAMERMM_VORBISTAG_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/vorbisparse.h>
#include <gstreamermm/tagsetter.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstVorbisTag = struct _GstVorbisTag;
using GstVorbisTagClass = struct _GstVorbisTagClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class VorbisTag_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the vorbistag plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class VorbisTag
: public Gst::VorbisParse, public Gst::TagSetter
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = VorbisTag;
  using CppClassType = VorbisTag_Class;
  using BaseObjectType = GstVorbisTag;
  using BaseClassType = GstVorbisTagClass;

  // noncopyable
  VorbisTag(const VorbisTag&) = delete;
  VorbisTag& operator=(const VorbisTag&) = delete;

private:  friend class VorbisTag_Class;
  static CppClassType vorbistag_class_;

protected:
  explicit VorbisTag(const Glib::ConstructParams& construct_params);
  explicit VorbisTag(GstVorbisTag* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  VorbisTag(VorbisTag&& src) noexcept;
  VorbisTag& operator=(VorbisTag&& src) noexcept;

  ~VorbisTag() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstVorbisTag*       gobj()       { return reinterpret_cast<GstVorbisTag*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstVorbisTag* gobj() const { return reinterpret_cast<GstVorbisTag*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstVorbisTag* gobj_copy();

private:

  
protected:
  VorbisTag();
  explicit VorbisTag(const Glib::ustring& name);

public:
  /** Creates a new vorbistag plugin with a unique name.
   */
  
  static Glib::RefPtr<VorbisTag> create();


  /** Creates a new vorbistag plugin with the given name.
   */
  
  static Glib::RefPtr<VorbisTag> create(const Glib::ustring& name);


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::VorbisTag
   */
  Glib::RefPtr<Gst::VorbisTag> wrap(GstVorbisTag* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_VORBISTAG_H */

