// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/netclientclock.h>
#include <gstreamermm/private/netclientclock_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <gstreamermm/bus.h>
#include <gst/net/gstnet.h>

namespace Gst
{

NetClientClock::NetClientClock(const Glib::ustring& name, const Glib::ustring& remote_address, int remote_port, Gst::ClockTime base_time)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  SystemClock(Glib::ConstructParams(netclientclock_class_.init(), "name",name.c_str(),"address",remote_address.c_str(),"port",remote_port,"base-time",static_cast<GstClockTime>(base_time), nullptr))
{}

}

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::NetClientClock> wrap(GstNetClientClock* object, bool take_copy)
{
  return Glib::RefPtr<Gst::NetClientClock>( dynamic_cast<Gst::NetClientClock*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& NetClientClock_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &NetClientClock_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_net_client_clock_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void NetClientClock_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* NetClientClock_Class::wrap_new(GObject* object)
{
  return new NetClientClock((GstNetClientClock*)object);
}


/* The implementation: */

GstNetClientClock* NetClientClock::gobj_copy()
{
  reference();
  return gobj();
}

NetClientClock::NetClientClock(const Glib::ConstructParams& construct_params)
:
  SystemClock(construct_params)
{

}

NetClientClock::NetClientClock(GstNetClientClock* castitem)
:
  SystemClock((GstSystemClock*)(castitem))
{}


NetClientClock::NetClientClock(NetClientClock&& src) noexcept
: SystemClock(std::move(src))
{}

NetClientClock& NetClientClock::operator=(NetClientClock&& src) noexcept
{
  SystemClock::operator=(std::move(src));
  return *this;
}


NetClientClock::~NetClientClock() noexcept
{}


NetClientClock::CppClassType NetClientClock::netclientclock_class_; // initialize static member

GType NetClientClock::get_type()
{
  return netclientclock_class_.init().get_type();
}


GType NetClientClock::get_base_type()
{
  return gst_net_client_clock_get_type();
}


Glib::RefPtr<NetClientClock> NetClientClock::create(const Glib::ustring& name, const Glib::ustring& remote_address, int remote_port, Gst::ClockTime base_time)
{
  return Glib::RefPtr<NetClientClock>( new NetClientClock(name, remote_address, remote_port, base_time) );
}


Glib::PropertyProxy< Glib::ustring > NetClientClock::property_address() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "address");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > NetClientClock::property_address() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "address");
}

Glib::PropertyProxy_ReadOnly< guint64 > NetClientClock::property_base_time() const
{
  return Glib::PropertyProxy_ReadOnly< guint64 >(this, "base-time");
}

Glib::PropertyProxy< Glib::RefPtr<Gst::Bus> > NetClientClock::property_bus() 
{
  return Glib::PropertyProxy< Glib::RefPtr<Gst::Bus> >(this, "bus");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Bus> > NetClientClock::property_bus() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Bus> >(this, "bus");
}

Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Clock> > NetClientClock::property_internal_clock() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Clock> >(this, "internal-clock");
}

Glib::PropertyProxy< guint64 > NetClientClock::property_minimum_update_interval() 
{
  return Glib::PropertyProxy< guint64 >(this, "minimum-update-interval");
}

Glib::PropertyProxy_ReadOnly< guint64 > NetClientClock::property_minimum_update_interval() const
{
  return Glib::PropertyProxy_ReadOnly< guint64 >(this, "minimum-update-interval");
}

Glib::PropertyProxy< int > NetClientClock::property_port() 
{
  return Glib::PropertyProxy< int >(this, "port");
}

Glib::PropertyProxy_ReadOnly< int > NetClientClock::property_port() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "port");
}

Glib::PropertyProxy< guint64 > NetClientClock::property_round_trip_limit() 
{
  return Glib::PropertyProxy< guint64 >(this, "round-trip-limit");
}

Glib::PropertyProxy_ReadOnly< guint64 > NetClientClock::property_round_trip_limit() const
{
  return Glib::PropertyProxy_ReadOnly< guint64 >(this, "round-trip-limit");
}


} // namespace Gst


