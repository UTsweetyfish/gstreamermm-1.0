// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/error.h>
#include <gstreamermm/private/error_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gst.h>

namespace Gst
{

Glib::QueryQuark get_core_error_quark()
{
  return gst_core_error_quark();
}

Glib::QueryQuark get_library_error_quark()
{
  return gst_library_error_quark();
}

Glib::QueryQuark get_resource_error_quark()
{
  return gst_resource_error_quark();
}

Glib::QueryQuark get_stream_error_quark()
{
  return gst_stream_error_quark();
}

} // namespace Gst

namespace
{
} // anonymous namespace


Gst::CoreError::CoreError(Gst::CoreError::Code error_code, const Glib::ustring& error_message)
:
  Glib::Error (GST_CORE_ERROR, error_code, error_message)
{}

Gst::CoreError::CoreError(GError* gobject)
:
  Glib::Error (gobject)
{}

Gst::CoreError::Code Gst::CoreError::code() const
{
  return static_cast<Code>(Glib::Error::code());
}

void Gst::CoreError::throw_func(GError* gobject)
{
  throw Gst::CoreError(gobject);
}


Gst::LibraryError::LibraryError(Gst::LibraryError::Code error_code, const Glib::ustring& error_message)
:
  Glib::Error (GST_LIBRARY_ERROR, error_code, error_message)
{}

Gst::LibraryError::LibraryError(GError* gobject)
:
  Glib::Error (gobject)
{}

Gst::LibraryError::Code Gst::LibraryError::code() const
{
  return static_cast<Code>(Glib::Error::code());
}

void Gst::LibraryError::throw_func(GError* gobject)
{
  throw Gst::LibraryError(gobject);
}


Gst::ResourceError::ResourceError(Gst::ResourceError::Code error_code, const Glib::ustring& error_message)
:
  Glib::Error (GST_RESOURCE_ERROR, error_code, error_message)
{}

Gst::ResourceError::ResourceError(GError* gobject)
:
  Glib::Error (gobject)
{}

Gst::ResourceError::Code Gst::ResourceError::code() const
{
  return static_cast<Code>(Glib::Error::code());
}

void Gst::ResourceError::throw_func(GError* gobject)
{
  throw Gst::ResourceError(gobject);
}


Gst::StreamError::StreamError(Gst::StreamError::Code error_code, const Glib::ustring& error_message)
:
  Glib::Error (GST_STREAM_ERROR, error_code, error_message)
{}

Gst::StreamError::StreamError(GError* gobject)
:
  Glib::Error (gobject)
{}

Gst::StreamError::Code Gst::StreamError::code() const
{
  return static_cast<Code>(Glib::Error::code());
}

void Gst::StreamError::throw_func(GError* gobject)
{
  throw Gst::StreamError(gobject);
}


