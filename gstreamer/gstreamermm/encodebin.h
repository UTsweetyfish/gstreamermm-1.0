// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_ENCODEBIN_H
#define _GSTREAMERMM_ENCODEBIN_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/bin.h>
#include <gstreamermm/encodingprofile.h>
#include <gstreamermm/pad.h>
#include <gstreamermm/caps.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstEncodeBin = struct _GstEncodeBin;
using GstEncodeBinClass = struct _GstEncodeBinClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class EncodeBin_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/** 
 *
 * @ingroup gstreamermmEnums
 */
enum EncodeBinFlags
{
  ENCODEBIN_FLAG_NO_AUDIO_CONVERSION = 1<<0,
  ENCODEBIN_FLAG_NO_VIDEO_CONVERSION = 1<<1
};

} // namespace Gst

#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::EncodeBinFlags> : public Glib::Value_Enum<Gst::EncodeBinFlags>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gst
{


/** A Wrapper for the encodebin plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class EncodeBin
: public Gst::Bin
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = EncodeBin;
  using CppClassType = EncodeBin_Class;
  using BaseObjectType = GstEncodeBin;
  using BaseClassType = GstEncodeBinClass;

  // noncopyable
  EncodeBin(const EncodeBin&) = delete;
  EncodeBin& operator=(const EncodeBin&) = delete;

private:  friend class EncodeBin_Class;
  static CppClassType encodebin_class_;

protected:
  explicit EncodeBin(const Glib::ConstructParams& construct_params);
  explicit EncodeBin(GstEncodeBin* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  EncodeBin(EncodeBin&& src) noexcept;
  EncodeBin& operator=(EncodeBin&& src) noexcept;

  ~EncodeBin() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstEncodeBin*       gobj()       { return reinterpret_cast<GstEncodeBin*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstEncodeBin* gobj() const { return reinterpret_cast<GstEncodeBin*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstEncodeBin* gobj_copy();

private:

  
protected:
  EncodeBin();
  explicit EncodeBin(const Glib::ustring& name);

public:
  /** Creates a new encodebin plugin with a unique name.
   */
  
  static Glib::RefPtr<EncodeBin> create();


  /** Creates a new encodebin plugin with the given name.
   */
  
  static Glib::RefPtr<EncodeBin> create(const Glib::ustring& name);


  /** This is a convenience method for the action signal
   * signal_request_pad().
   */
  Glib::RefPtr<Gst::Pad> request_pad(const Glib::RefPtr<Gst::Caps>& arg0);

  /** This is a convenience method for the action signal
   * signal_request_profile_pad().
   */
  Glib::RefPtr<Gst::Pad> request_profile_pad(const Glib::ustring& arg0);


  /** The GstEncodingProfile to use.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::EncodingProfile> > property_profile() ;

/** The GstEncodingProfile to use.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::EncodingProfile> > property_profile() const;

  /** Max. number of buffers in the queue (0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_queue_buffers_max() ;

/** Max. number of buffers in the queue (0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_queue_buffers_max() const;

  /** Max. amount of data in the queue (bytes, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_queue_bytes_max() ;

/** Max. amount of data in the queue (bytes, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_queue_bytes_max() const;

  /** Max. amount of data in the queue (in ns, 0=disable).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_queue_time_max() ;

/** Max. amount of data in the queue (in ns, 0=disable).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_queue_time_max() const;

  /** Amount of timestamp jitter/imperfection to allow on audio streams before inserting/dropping samples (ns).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_audio_jitter_tolerance() ;

/** Amount of timestamp jitter/imperfection to allow on audio streams before inserting/dropping samples (ns).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_audio_jitter_tolerance() const;

  /** Whether to re-encode portions of compatible video streams that lay on segment boundaries.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_avoid_reencoding() ;

/** Whether to re-encode portions of compatible video streams that lay on segment boundaries.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_avoid_reencoding() const;

  /** Flags to control behaviour.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::EncodeBinFlags > property_flags() ;

/** Flags to control behaviour.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::EncodeBinFlags > property_flags() const;


  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, request_pad().
   *
   * @par Slot Prototype:
   * <tt>Glib::RefPtr<Gst::Pad> on_my_%request_pad(const Glib::RefPtr<Gst::Caps>& arg0)</tt>
   *
   */

  Glib::SignalProxy< Glib::RefPtr<Gst::Pad>,const Glib::RefPtr<Gst::Caps>& > signal_request_pad();


  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, request_profile_pad().
   *
   * @par Slot Prototype:
   * <tt>Glib::RefPtr<Gst::Pad> on_my_%request_profile_pad(const Glib::ustring& arg0)</tt>
   *
   */

  Glib::SignalProxy< Glib::RefPtr<Gst::Pad>,const Glib::ustring& > signal_request_profile_pad();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::EncodeBin
   */
  Glib::RefPtr<Gst::EncodeBin> wrap(GstEncodeBin* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_ENCODEBIN_H */

