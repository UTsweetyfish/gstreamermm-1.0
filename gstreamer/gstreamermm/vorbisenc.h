// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_VORBISENC_H
#define _GSTREAMERMM_VORBISENC_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/element.h>
#include <gstreamermm/tagsetter.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstVorbisEnc = struct _GstVorbisEnc;
using GstVorbisEncClass = struct _GstVorbisEncClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class VorbisEnc_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the vorbisenc plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class VorbisEnc
: public Gst::Element, public Gst::TagSetter
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = VorbisEnc;
  using CppClassType = VorbisEnc_Class;
  using BaseObjectType = GstVorbisEnc;
  using BaseClassType = GstVorbisEncClass;

  // noncopyable
  VorbisEnc(const VorbisEnc&) = delete;
  VorbisEnc& operator=(const VorbisEnc&) = delete;

private:  friend class VorbisEnc_Class;
  static CppClassType vorbisenc_class_;

protected:
  explicit VorbisEnc(const Glib::ConstructParams& construct_params);
  explicit VorbisEnc(GstVorbisEnc* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  VorbisEnc(VorbisEnc&& src) noexcept;
  VorbisEnc& operator=(VorbisEnc&& src) noexcept;

  ~VorbisEnc() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstVorbisEnc*       gobj()       { return reinterpret_cast<GstVorbisEnc*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstVorbisEnc* gobj() const { return reinterpret_cast<GstVorbisEnc*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstVorbisEnc* gobj_copy();

private:

  
protected:
  VorbisEnc();
  explicit VorbisEnc(const Glib::ustring& name);

public:
  /** Creates a new vorbisenc plugin with a unique name.
   */
  
  static Glib::RefPtr<VorbisEnc> create();


  /** Creates a new vorbisenc plugin with the given name.
   */
  
  static Glib::RefPtr<VorbisEnc> create(const Glib::ustring& name);


  /** Specify a maximum bitrate (in bps). Useful for streaming applications. (-1 == disabled).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_max_bitrate() ;

/** Specify a maximum bitrate (in bps). Useful for streaming applications. (-1 == disabled).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_max_bitrate() const;

  /** Attempt to encode at a bitrate averaging this (in bps). This uses the bitrate management engine, and is not recommended for most users. Quality is a better alternative. (-1 == disabled).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_bitrate() ;

/** Attempt to encode at a bitrate averaging this (in bps). This uses the bitrate management engine, and is not recommended for most users. Quality is a better alternative. (-1 == disabled).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_bitrate() const;

  /** Specify a minimum bitrate (in bps). Useful for encoding for a fixed-size channel. (-1 == disabled).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_min_bitrate() ;

/** Specify a minimum bitrate (in bps). Useful for encoding for a fixed-size channel. (-1 == disabled).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_min_bitrate() const;

  /** Specify quality instead of specifying a particular bitrate.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< float > property_quality() ;

/** Specify quality instead of specifying a particular bitrate.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< float > property_quality() const;

  /** Enable bitrate management engine.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_managed() ;

/** Enable bitrate management engine.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_managed() const;

  /** The last status message.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_last_message() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::VorbisEnc
   */
  Glib::RefPtr<Gst::VorbisEnc> wrap(GstVorbisEnc* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_VORBISENC_H */

