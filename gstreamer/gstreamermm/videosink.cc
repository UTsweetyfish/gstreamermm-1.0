// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/videosink.h>
#include <gstreamermm/private/videosink_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/video/gstvideosink.h>


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::VideoSink> wrap(GstVideoSink* object, bool take_copy)
{
  return Glib::RefPtr<Gst::VideoSink>( dynamic_cast<Gst::VideoSink*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& VideoSink_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &VideoSink_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_video_sink_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void VideoSink_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* VideoSink_Class::wrap_new(GObject* object)
{
  return new VideoSink((GstVideoSink*)object);
}


/* The implementation: */

GstVideoSink* VideoSink::gobj_copy()
{
  reference();
  return gobj();
}

VideoSink::VideoSink(const Glib::ConstructParams& construct_params)
:
  Gst::BaseSink(construct_params)
{

}

VideoSink::VideoSink(GstVideoSink* castitem)
:
  Gst::BaseSink((GstBaseSink*)(castitem))
{}


VideoSink::VideoSink(VideoSink&& src) noexcept
: Gst::BaseSink(std::move(src))
{}

VideoSink& VideoSink::operator=(VideoSink&& src) noexcept
{
  Gst::BaseSink::operator=(std::move(src));
  return *this;
}


VideoSink::~VideoSink() noexcept
{}


VideoSink::CppClassType VideoSink::videosink_class_; // initialize static member

GType VideoSink::get_type()
{
  return videosink_class_.init().get_type();
}


GType VideoSink::get_base_type()
{
  return gst_video_sink_get_type();
}


int VideoSink::get_height() const
{
  return gobj()->height;
}

int VideoSink::get_width() const
{
  return gobj()->width;
}

void VideoSink::center_rect(const Gst::VideoRectangle& src, const Gst::VideoRectangle& dst, Gst::VideoRectangle& result, bool scaling)
{
  gst_video_sink_center_rect(reinterpret_cast<const GstVideoRectangle&>(src), reinterpret_cast<const GstVideoRectangle&>(dst), reinterpret_cast<GstVideoRectangle*>(&result), static_cast<int>(scaling));
}


Glib::PropertyProxy< bool > VideoSink::property_show_preroll_frame() 
{
  return Glib::PropertyProxy< bool >(this, "show-preroll-frame");
}

Glib::PropertyProxy_ReadOnly< bool > VideoSink::property_show_preroll_frame() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "show-preroll-frame");
}


} // namespace Gst


