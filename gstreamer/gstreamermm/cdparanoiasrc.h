// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_CDPARANOIASRC_H
#define _GSTREAMERMM_CDPARANOIASRC_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/pushsrc.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstCdParanoiaSrc = struct _GstCdParanoiaSrc;
using GstCdParanoiaSrcClass = struct _GstCdParanoiaSrcClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class CdParanoiaSrc_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/** 
 *
 * @ingroup gstreamermmEnums
 */
enum CdParanoiaMode
{
  PARANOIA_MODE_DISABLE = 1<<0,
  PARANOIA_MODE_FRAGMENT = 1<<1,
  PARANOIA_MODE_OVERLAP = 1<<2,
  PARANOIA_MODE_SCRATCH = 1<<3,
  PARANOIA_MODE_REPAIR = 1<<4,
  PARANOIA_MODE_FULL = 0xff
};

} // namespace Gst

#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::CdParanoiaMode> : public Glib::Value_Enum<Gst::CdParanoiaMode>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gst
{


/** A Wrapper for the cdparanoiasrc plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class CdParanoiaSrc
: public Gst::PushSrc
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = CdParanoiaSrc;
  using CppClassType = CdParanoiaSrc_Class;
  using BaseObjectType = GstCdParanoiaSrc;
  using BaseClassType = GstCdParanoiaSrcClass;

  // noncopyable
  CdParanoiaSrc(const CdParanoiaSrc&) = delete;
  CdParanoiaSrc& operator=(const CdParanoiaSrc&) = delete;

private:  friend class CdParanoiaSrc_Class;
  static CppClassType cdparanoiasrc_class_;

protected:
  explicit CdParanoiaSrc(const Glib::ConstructParams& construct_params);
  explicit CdParanoiaSrc(GstCdParanoiaSrc* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  CdParanoiaSrc(CdParanoiaSrc&& src) noexcept;
  CdParanoiaSrc& operator=(CdParanoiaSrc&& src) noexcept;

  ~CdParanoiaSrc() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstCdParanoiaSrc*       gobj()       { return reinterpret_cast<GstCdParanoiaSrc*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstCdParanoiaSrc* gobj() const { return reinterpret_cast<GstCdParanoiaSrc*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstCdParanoiaSrc* gobj_copy();

private:

  
protected:
  CdParanoiaSrc();
  explicit CdParanoiaSrc(const Glib::ustring& name);

public:
  /** Creates a new cdparanoiasrc plugin with a unique name.
   */
  
  static Glib::RefPtr<CdParanoiaSrc> create();


  /** Creates a new cdparanoiasrc plugin with the given name.
   */
  
  static Glib::RefPtr<CdParanoiaSrc> create(const Glib::ustring& name);


  /** Read from device at specified speed (-1 and 0 = full speed).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_read_speed() ;

/** Read from device at specified speed (-1 and 0 = full speed).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_read_speed() const;

  /** Type of checking to perform.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::CdParanoiaMode > property_paranoia_mode() ;

/** Type of checking to perform.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::CdParanoiaMode > property_paranoia_mode() const;

  /** Force minimum overlap search during verification to n sectors.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_search_overlap() ;

/** Force minimum overlap search during verification to n sectors.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_search_overlap() const;

  /** Use specified generic scsi device.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_generic_device() ;

/** Use specified generic scsi device.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_generic_device() const;

  /** Set CD cache size to n sectors (-1 = auto).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_cache_size() ;

/** Set CD cache size to n sectors (-1 = auto).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_cache_size() const;


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%transport_error(int arg0)</tt>
   *
   */

  Glib::SignalProxy< void,int > signal_transport_error();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%uncorrected_error(int arg0)</tt>
   *
   */

  Glib::SignalProxy< void,int > signal_uncorrected_error();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::CdParanoiaSrc
   */
  Glib::RefPtr<Gst::CdParanoiaSrc> wrap(GstCdParanoiaSrc* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_CDPARANOIASRC_H */

