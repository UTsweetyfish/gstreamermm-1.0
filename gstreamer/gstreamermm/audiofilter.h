// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_AUDIOFILTER_H
#define _GSTREAMERMM_AUDIOFILTER_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/basetransform.h>
#include <gstreamermm/audioinfo.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstAudioFilter = struct _GstAudioFilter;
using GstAudioFilterClass = struct _GstAudioFilterClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class AudioFilter_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A base class for simple audio filters.
 * Gst::AudioFilter is a Gst::BaseTransform-derived base class for simple
 * audio filters, ie. those that output the same format that they get as input.
 *
 * Gst::AudioFilter will parse the input format for you (with error
 * checking) before calling your setup function. Also, elements deriving from
 * Gst::AudioFilter may use gst_audio_filter_class_add_pad_templates() from
 * their base_init function to easily configure the set of caps/formats that
 * the element is able to handle.
 *
 * Derived classes should override the Gst::AudioFilter::setup_vfunc() and
 * Gst::BaseTransform::transform_ip_vfunc() and/or
 * Gst::BaseTransform::transform_vfunc() virtual functions.
 *
 * Last reviewed on 2016-04-23 (1.8.0).
 *
 * @ingroup GstBaseClasses
 */

class AudioFilter : public Gst::BaseTransform
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = AudioFilter;
  using CppClassType = AudioFilter_Class;
  using BaseObjectType = GstAudioFilter;
  using BaseClassType = GstAudioFilterClass;

  // noncopyable
  AudioFilter(const AudioFilter&) = delete;
  AudioFilter& operator=(const AudioFilter&) = delete;

private:  friend class AudioFilter_Class;
  static CppClassType audiofilter_class_;

protected:
  explicit AudioFilter(const Glib::ConstructParams& construct_params);
  explicit AudioFilter(GstAudioFilter* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  AudioFilter(AudioFilter&& src) noexcept;
  AudioFilter& operator=(AudioFilter&& src) noexcept;

  ~AudioFilter() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstAudioFilter*       gobj()       { return reinterpret_cast<GstAudioFilter*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstAudioFilter* gobj() const { return reinterpret_cast<GstAudioFilter*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstAudioFilter* gobj_copy();

private:


public:
  /** Virtual function, called whenever the format changes.
   */
    virtual bool setup_vfunc(const Gst::AudioInfo& info);


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::AudioFilter
   */
  Glib::RefPtr<Gst::AudioFilter> wrap(GstAudioFilter* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_AUDIOFILTER_H */

