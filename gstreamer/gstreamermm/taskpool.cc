// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/taskpool.h>
#include <gstreamermm/private/taskpool_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gst.h>


namespace
{

extern "C"
{

static void TaskPool_Push_gstreamermm_callback(void* data)
{
  Gst::TaskPool::SlotPush* the_slot = static_cast<Gst::TaskPool::SlotPush*>(data);

  try
  {
    (*the_slot)();
    delete the_slot;
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
}

} // extern "C"

} // anonymous namespace

namespace Gst
{

gpointer TaskPool::push(const SlotPush& slot)
{
  GError* gerror = 0;
  SlotPush* slot_copy = new SlotPush(slot);

  gpointer ret_val = gst_task_pool_push(gobj(),
    &TaskPool_Push_gstreamermm_callback, slot_copy, &gerror);

  if(gerror)
    ::Glib::Error::throw_exception(gerror);

  return ret_val;
}

void TaskPool_Class::prepare_vfunc_callback(GstTaskPool* self, GError** error)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->prepare_vfunc();

        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->prepare)
    (*base->prepare)(self, error);

}
void Gst::TaskPool::prepare_vfunc() 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->prepare)
  {
    GError* gerror = 0;
    (*base->prepare)(gobj(),&gerror);

    if(gerror)
      ::Glib::Error::throw_exception(gerror);
  }
}
gpointer TaskPool_Class::push_vfunc_callback(GstTaskPool* self, GstTaskPoolFunction func, gpointer user_data, GError** error)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        Gst::TaskPool::SlotPush* slot =
          static_cast<Gst::TaskPool::SlotPush*>(user_data);

        return obj->push_vfunc(*slot);

      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }
  
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->push)
    return (*base->push)(self, func, user_data, error);


  typedef gpointer RType;
  return RType();
}
gpointer Gst::TaskPool::push_vfunc(const SlotPush& slot) 
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->push)
  {
    GError* gerror = 0;
    gpointer result = (*base->push)(gobj(),
      &TaskPool_Push_gstreamermm_callback, const_cast<SlotPush*>(&slot),
        &gerror);

    if(gerror)
      ::Glib::Error::throw_exception(gerror);

    return result;
  }

  typedef gpointer RType;
  return RType();
}

} //namespace Gst

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gst::TaskPool> wrap(GstTaskPool* object, bool take_copy)
{
  return Glib::RefPtr<Gst::TaskPool>( dynamic_cast<Gst::TaskPool*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gst
{


/* The *_Class implementation: */

const Glib::Class& TaskPool_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &TaskPool_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gst_task_pool_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void TaskPool_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

  klass->cleanup = &cleanup_vfunc_callback;
  klass->join = &join_vfunc_callback;
  klass->prepare = &prepare_vfunc_callback;
  klass->push = &push_vfunc_callback;
  
}

void TaskPool_Class::cleanup_vfunc_callback(GstTaskPool* self)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->cleanup_vfunc();
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->cleanup)
    (*base->cleanup)(self);
}
void TaskPool_Class::join_vfunc_callback(GstTaskPool* self, gpointer id)
{
  const auto obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    const auto obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->join_vfunc(id);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->join)
    (*base->join)(self, id);
}


Glib::ObjectBase* TaskPool_Class::wrap_new(GObject* object)
{
  return new TaskPool((GstTaskPool*)object);
}


/* The implementation: */

GstTaskPool* TaskPool::gobj_copy()
{
  reference();
  return gobj();
}

TaskPool::TaskPool(const Glib::ConstructParams& construct_params)
:
  Object(construct_params)
{

}

TaskPool::TaskPool(GstTaskPool* castitem)
:
  Object((GstObject*)(castitem))
{}


TaskPool::TaskPool(TaskPool&& src) noexcept
: Object(std::move(src))
{}

TaskPool& TaskPool::operator=(TaskPool&& src) noexcept
{
  Object::operator=(std::move(src));
  return *this;
}


TaskPool::~TaskPool() noexcept
{}


TaskPool::CppClassType TaskPool::taskpool_class_; // initialize static member

GType TaskPool::get_type()
{
  return taskpool_class_.init().get_type();
}


GType TaskPool::get_base_type()
{
  return gst_task_pool_get_type();
}


TaskPool::TaskPool()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Object(Glib::ConstructParams(taskpool_class_.init()))
{
  

}

Glib::RefPtr<TaskPool> TaskPool::create()
{
  return Glib::RefPtr<TaskPool>( new TaskPool() );
}

void TaskPool::prepare()
{
  GError* gerror = nullptr;
  gst_task_pool_prepare(gobj(), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
}

void TaskPool::join(gpointer id)
{
  gst_task_pool_join(gobj(), id);
}

void TaskPool::cleanup()
{
  gst_task_pool_cleanup(gobj());
}


void Gst::TaskPool::cleanup_vfunc() 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->cleanup)
  {
    (*base->cleanup)(gobj());
  }
}
void Gst::TaskPool::join_vfunc(gpointer id) 
{
  const auto base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->join)
  {
    (*base->join)(gobj(),id);
  }
}


} // namespace Gst


