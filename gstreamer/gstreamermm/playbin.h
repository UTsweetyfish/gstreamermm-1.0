// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_PLAYBIN_H
#define _GSTREAMERMM_PLAYBIN_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/pipeline.h>
#include <gstreamermm/element.h>
#include <gstreamermm/enums.h>
#include <gstreamermm/sample.h>
#include <gstreamermm/videoinfo.h>
#include <gstreamermm/videoinfo.h>
#include <gstreamermm/taglist.h>
#include <gstreamermm/caps.h>
#include <gstreamermm/pad.h>
#include <gstreamermm/streamvolume.h>
#include <gstreamermm/videooverlay.h>
#include <gstreamermm/navigation.h>
#include <gstreamermm/colorbalance.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstPlayBin = struct _GstPlayBin;
using GstPlayBinClass = struct _GstPlayBinClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class PlayBin_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A Wrapper for the playbin plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class PlayBin
: public Gst::Pipeline, public Gst::StreamVolume, public Gst::VideoOverlay, public Gst::Navigation, public Gst::ColorBalance
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = PlayBin;
  using CppClassType = PlayBin_Class;
  using BaseObjectType = GstPlayBin;
  using BaseClassType = GstPlayBinClass;

  // noncopyable
  PlayBin(const PlayBin&) = delete;
  PlayBin& operator=(const PlayBin&) = delete;

private:  friend class PlayBin_Class;
  static CppClassType playbin_class_;

protected:
  explicit PlayBin(const Glib::ConstructParams& construct_params);
  explicit PlayBin(GstPlayBin* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  PlayBin(PlayBin&& src) noexcept;
  PlayBin& operator=(PlayBin&& src) noexcept;

  ~PlayBin() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstPlayBin*       gobj()       { return reinterpret_cast<GstPlayBin*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstPlayBin* gobj() const { return reinterpret_cast<GstPlayBin*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstPlayBin* gobj_copy();

private:

  
protected:
  PlayBin();
  explicit PlayBin(const Glib::ustring& name);

public:
  /** Creates a new playbin plugin with a unique name.
   */
  
  static Glib::RefPtr<PlayBin> create();


  /** Creates a new playbin plugin with the given name.
   */
  
  static Glib::RefPtr<PlayBin> create(const Glib::ustring& name);


  /** This is a convenience method for the action signal
   * signal_get_video_tags().
   */
  Gst::TagList get_video_tags(int arg0);

  /** This is a convenience method for the action signal
   * signal_get_audio_tags().
   */
  Gst::TagList get_audio_tags(int arg0);

  /** This is a convenience method for the action signal
   * signal_get_text_tags().
   */
  Gst::TagList get_text_tags(int arg0);

  /** This is a convenience method for the action signal
   * signal_convert_sample().
   */
  Glib::RefPtr<Gst::Sample> convert_sample(const Glib::RefPtr<Gst::Caps>& arg0);

  /** This is a convenience method for the action signal
   * signal_get_video_pad().
   */
  Glib::RefPtr<Gst::Pad> get_video_pad(int arg0);

  /** This is a convenience method for the action signal
   * signal_get_audio_pad().
   */
  Glib::RefPtr<Gst::Pad> get_audio_pad(int arg0);

  /** This is a convenience method for the action signal
   * signal_get_text_pad().
   */
  Glib::RefPtr<Gst::Pad> get_text_pad(int arg0);


  /** URI of the media to play.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_uri() ;

/** URI of the media to play.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_uri() const;

  /** The currently playing URI.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_current_uri() const;


  /** Optional URI of a subtitle.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_suburi() ;

/** Optional URI of a subtitle.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_suburi() const;

  /** The currently playing URI of a subtitle.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_current_suburi() const;


  /** Source element.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_source() const;


  /** Flags to control behaviour.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::PlayFlags > property_flags() ;

/** Flags to control behaviour.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::PlayFlags > property_flags() const;

  /** Total number of video streams.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_n_video() const;


  /** Currently playing video stream (-1 = auto).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_current_video() ;

/** Currently playing video stream (-1 = auto).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_current_video() const;

  /** Total number of audio streams.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_n_audio() const;


  /** Currently playing audio stream (-1 = auto).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_current_audio() ;

/** Currently playing audio stream (-1 = auto).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_current_audio() const;

  /** Total number of text streams.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_n_text() const;


  /** Currently playing text stream (-1 = auto).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_current_text() ;

/** Currently playing text stream (-1 = auto).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_current_text() const;

  /** Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_subtitle_encoding() ;

/** Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_subtitle_encoding() const;

  /** the audio output element to use (NULL = default sink).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > property_audio_sink() ;

/** the audio output element to use (NULL = default sink).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_audio_sink() const;

  /** the video output element to use (NULL = default sink).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > property_video_sink() ;

/** the video output element to use (NULL = default sink).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_video_sink() const;

  /** the visualization element to use (NULL = default).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > property_vis_plugin() ;

/** the visualization element to use (NULL = default).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_vis_plugin() const;

  /** the text output element to use (NULL = default subtitleoverlay).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > property_text_sink() ;

/** the text output element to use (NULL = default subtitleoverlay).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_text_sink() const;

  /** Current video stream combiner (NULL = input-selector).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > property_video_stream_combiner() ;

/** Current video stream combiner (NULL = input-selector).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_video_stream_combiner() const;

  /** Current audio stream combiner (NULL = input-selector).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > property_audio_stream_combiner() ;

/** Current audio stream combiner (NULL = input-selector).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_audio_stream_combiner() const;

  /** Current text stream combiner (NULL = input-selector).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > property_text_stream_combiner() ;

/** Current text stream combiner (NULL = input-selector).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_text_stream_combiner() const;

  /** The audio volume, 1.0=100%.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< double > property_volume() ;

/** The audio volume, 1.0=100%.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< double > property_volume() const;

  /** Mute the audio channel without changing the volume.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_mute() ;

/** Mute the audio channel without changing the volume.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_mute() const;

  /** The last sample (NULL = no video available).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Sample> > property_sample() const;


  /** Pango font description of font to be used for subtitle rendering.
   *
   * @return A PropertyProxy_WriteOnly that allows you to set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_WriteOnly< Glib::ustring > property_subtitle_font_desc() ;


  /** Network connection speed in kbps (0 = unknown).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_connection_speed() ;

/** Network connection speed in kbps (0 = unknown).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_connection_speed() const;

  /** Buffer size when buffering network streams.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_buffer_size() ;

/** Buffer size when buffering network streams.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_buffer_size() const;

  /** Buffer duration when buffering network streams.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< gint64 > property_buffer_duration() ;

/** Buffer duration when buffering network streams.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< gint64 > property_buffer_duration() const;

  /** The synchronisation offset between audio and video in nanoseconds.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< gint64 > property_av_offset() ;

/** The synchronisation offset between audio and video in nanoseconds.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< gint64 > property_av_offset() const;

  /** Max. amount of data in the ring buffer (bytes, 0 = ring buffer disabled).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint64 > property_ring_buffer_max_size() ;

/** Max. amount of data in the ring buffer (bytes, 0 = ring buffer disabled).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint64 > property_ring_buffer_max_size() const;

  /** When enabled, scaling will respect original aspect ratio.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_force_aspect_ratio() ;

/** When enabled, scaling will respect original aspect ratio.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_force_aspect_ratio() const;

  /** the audio filter(s) to apply, if possible.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > property_audio_filter() ;

/** the audio filter(s) to apply, if possible.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_audio_filter() const;

  /** the video filter(s) to apply, if possible.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Element> > property_video_filter() ;

/** the video filter(s) to apply, if possible.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Element> > property_video_filter() const;

  /** Re-interpret a video stream as one of several frame-packed stereoscopic modes.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::VideoMultiviewFramePacking > property_video_multiview_mode() ;

/** Re-interpret a video stream as one of several frame-packed stereoscopic modes.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::VideoMultiviewFramePacking > property_video_multiview_mode() const;

  /** Override details of the multiview frame layout.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::VideoMultiviewFlags > property_video_multiview_flags() ;

/** Override details of the multiview frame layout.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::VideoMultiviewFlags > property_video_multiview_flags() const;


  /**
   * @par Slot Prototype:
   * <tt>void on_my_%about_to_finish()</tt>
   *
   */

  Glib::SignalProxy< void > signal_about_to_finish();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%video_changed()</tt>
   *
   */

  Glib::SignalProxy< void > signal_video_changed();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%audio_changed()</tt>
   *
   */

  Glib::SignalProxy< void > signal_audio_changed();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%text_changed()</tt>
   *
   */

  Glib::SignalProxy< void > signal_text_changed();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%video_tags_changed(int arg0)</tt>
   *
   */

  Glib::SignalProxy< void,int > signal_video_tags_changed();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%audio_tags_changed(int arg0)</tt>
   *
   */

  Glib::SignalProxy< void,int > signal_audio_tags_changed();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%text_tags_changed(int arg0)</tt>
   *
   */

  Glib::SignalProxy< void,int > signal_text_tags_changed();

 
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%source_setup(const Glib::RefPtr<Gst::Element>& arg0)</tt>
   *
   */

  Glib::SignalProxy< void,const Glib::RefPtr<Gst::Element>& > signal_source_setup();

 
  //gtkmmproc error: element-setup :  signal defs lookup failed

 
  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_video_tags().
   *
   * @par Slot Prototype:
   * <tt>Gst::TagList on_my_%get_video_tags(int arg0)</tt>
   *
   */

  Glib::SignalProxy< Gst::TagList,int > signal_get_video_tags();


  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_audio_tags().
   *
   * @par Slot Prototype:
   * <tt>Gst::TagList on_my_%get_audio_tags(int arg0)</tt>
   *
   */

  Glib::SignalProxy< Gst::TagList,int > signal_get_audio_tags();


  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_text_tags().
   *
   * @par Slot Prototype:
   * <tt>Gst::TagList on_my_%get_text_tags(int arg0)</tt>
   *
   */

  Glib::SignalProxy< Gst::TagList,int > signal_get_text_tags();


  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, convert_sample().
   *
   * @par Slot Prototype:
   * <tt>Glib::RefPtr<Gst::Sample> on_my_%convert_sample(const Glib::RefPtr<Gst::Caps>& arg0)</tt>
   *
   */

  Glib::SignalProxy< Glib::RefPtr<Gst::Sample>,const Glib::RefPtr<Gst::Caps>& > signal_convert_sample();


  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_video_pad().
   *
   * @par Slot Prototype:
   * <tt>Glib::RefPtr<Gst::Pad> on_my_%get_video_pad(int arg0)</tt>
   *
   */

  Glib::SignalProxy< Glib::RefPtr<Gst::Pad>,int > signal_get_video_pad();


  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_audio_pad().
   *
   * @par Slot Prototype:
   * <tt>Glib::RefPtr<Gst::Pad> on_my_%get_audio_pad(int arg0)</tt>
   *
   */

  Glib::SignalProxy< Glib::RefPtr<Gst::Pad>,int > signal_get_audio_pad();


  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, get_text_pad().
   *
   * @par Slot Prototype:
   * <tt>Glib::RefPtr<Gst::Pad> on_my_%get_text_pad(int arg0)</tt>
   *
   */

  Glib::SignalProxy< Glib::RefPtr<Gst::Pad>,int > signal_get_text_pad();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::PlayBin
   */
  Glib::RefPtr<Gst::PlayBin> wrap(GstPlayBin* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_PLAYBIN_H */

