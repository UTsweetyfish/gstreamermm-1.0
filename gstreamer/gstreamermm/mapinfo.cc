// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/mapinfo.h>
#include <gstreamermm/private/mapinfo_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2013-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/memory.h>

namespace Gst
{

static GstMapInfo empty_map_info()
{
  // TODO: GST_MAP_INFO_INIT has been fixed in the further GStreamer version (1.8.x)
  static GstMapInfo info = { NULL, (GstMapFlags) 0, NULL, 0, 0, { NULL, NULL, NULL, NULL}, {NULL, NULL, NULL, NULL}};
  return info;
}

MapInfo::MapInfo()
: m_spec(empty_map_info())
{
}

MapInfo::MapInfo(const GstMapInfo& castitem)
: m_spec(castitem)
{
}

MapInfo::MapInfo(MapInfo&& other)
{
  m_spec = other.m_spec;
  other.m_spec = empty_map_info();
}

MapInfo& MapInfo::operator=(MapInfo&& other)
{
  m_spec = other.m_spec;
  other.m_spec = empty_map_info();
  return *this;
}

}


namespace
{
} // anonymous namespace

// static
GType Glib::Value<Gst::MapFlags>::value_type()
{
  return gst_map_flags_get_type();
}


namespace Gst
{


MapFlags MapInfo::get_flags() const
{
  return ((MapFlags)(gobj()->flags));
}

guint8* MapInfo::get_data()
{
  return gobj()->data;
}

const guint8* MapInfo::get_data() const
{
  return gobj()->data;
}

gsize MapInfo::get_maxsize() const
{
  return gobj()->maxsize;
}

gsize MapInfo::get_size() const
{
  return gobj()->size;
}

Glib::RefPtr<Gst::Memory> MapInfo::get_memory()
{
  Glib::RefPtr<Gst::Memory> ref_ptr(Glib::wrap(gobj()->memory));

  if(ref_ptr)
    ref_ptr->reference();

  return ref_ptr;
}

Glib::RefPtr<const Gst::Memory> MapInfo::get_memory() const
{
  Glib::RefPtr<const Gst::Memory> ref_ptr(Glib::wrap(gobj()->memory));

  if(ref_ptr)
    ref_ptr->reference();

  return ref_ptr;
}


} // namespace Gst


