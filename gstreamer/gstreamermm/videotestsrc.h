// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_VIDEOTESTSRC_H
#define _GSTREAMERMM_VIDEOTESTSRC_H

#include <gstreamermmconfig.h>

#ifndef GSTREAMERMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/pushsrc.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstVideoTestSrc = struct _GstVideoTestSrc;
using GstVideoTestSrcClass = struct _GstVideoTestSrcClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class VideoTestSrc_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/** 
 *
 * @ingroup gstreamermmEnums
 */
enum VideoTestSrcPattern
{
  VIDEO_TEST_SRC_SMPTE,
  VIDEO_TEST_SRC_SNOW,
  VIDEO_TEST_SRC_BLACK,
  VIDEO_TEST_SRC_WHITE,
  VIDEO_TEST_SRC_RED,
  VIDEO_TEST_SRC_GREEN,
  VIDEO_TEST_SRC_BLUE,
  VIDEO_TEST_SRC_CHECKERS1,
  VIDEO_TEST_SRC_CHECKERS2,
  VIDEO_TEST_SRC_CHECKERS4,
  VIDEO_TEST_SRC_CHECKERS8,
  VIDEO_TEST_SRC_CIRCULAR,
  VIDEO_TEST_SRC_BLINK,
  VIDEO_TEST_SRC_SMPTE75,
  VIDEO_TEST_SRC_ZONE_PLATE,
  VIDEO_TEST_SRC_GAMUT,
  VIDEO_TEST_SRC_CHROMA_ZONE_PLATE,
  VIDEO_TEST_SRC_SOLID,
  VIDEO_TEST_SRC_BALL,
  VIDEO_TEST_SRC_SMPTE100,
  VIDEO_TEST_SRC_BAR,
  VIDEO_TEST_SRC_PINWHEEL,
  VIDEO_TEST_SRC_SPOKES,
  VIDEO_TEST_SRC_GRADIENT,
  VIDEO_TEST_SRC_COLORS
};

} // namespace Gst

#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::VideoTestSrcPattern> : public Glib::Value_Enum<Gst::VideoTestSrcPattern>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

namespace Gst
{


/** A Wrapper for the videotestsrc plugin.
 * Please note that not all plug-ins are available on all systems so care
 * must be taken that they exist before they are used otherwise there will
 * be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 * @deprecated Plugins API is deprecated, and should not be used in a new code.
 */

class VideoTestSrc
: public Gst::PushSrc
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = VideoTestSrc;
  using CppClassType = VideoTestSrc_Class;
  using BaseObjectType = GstVideoTestSrc;
  using BaseClassType = GstVideoTestSrcClass;

  // noncopyable
  VideoTestSrc(const VideoTestSrc&) = delete;
  VideoTestSrc& operator=(const VideoTestSrc&) = delete;

private:  friend class VideoTestSrc_Class;
  static CppClassType videotestsrc_class_;

protected:
  explicit VideoTestSrc(const Glib::ConstructParams& construct_params);
  explicit VideoTestSrc(GstVideoTestSrc* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  VideoTestSrc(VideoTestSrc&& src) noexcept;
  VideoTestSrc& operator=(VideoTestSrc&& src) noexcept;

  ~VideoTestSrc() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstVideoTestSrc*       gobj()       { return reinterpret_cast<GstVideoTestSrc*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstVideoTestSrc* gobj() const { return reinterpret_cast<GstVideoTestSrc*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstVideoTestSrc* gobj_copy();

private:

  
protected:
  VideoTestSrc();
  explicit VideoTestSrc(const Glib::ustring& name);

public:
  /** Creates a new videotestsrc plugin with a unique name.
   */
  
  static Glib::RefPtr<VideoTestSrc> create();


  /** Creates a new videotestsrc plugin with the given name.
   */
  
  static Glib::RefPtr<VideoTestSrc> create(const Glib::ustring& name);


  /** Type of test pattern to generate.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gst::VideoTestSrcPattern > property_pattern() ;

/** Type of test pattern to generate.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gst::VideoTestSrcPattern > property_pattern() const;

  /** An offset added to timestamps set on buffers (in ns).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< gint64 > property_timestamp_offset() ;

/** An offset added to timestamps set on buffers (in ns).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< gint64 > property_timestamp_offset() const;

  /** Whether to act as a live source.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< bool > property_is_live() ;

/** Whether to act as a live source.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< bool > property_is_live() const;

  /** Zoneplate zero order phase, for generating plain fields or phase offsets.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_k0() ;

/** Zoneplate zero order phase, for generating plain fields or phase offsets.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_k0() const;

  /** Zoneplate 1st order x phase, for generating constant horizontal frequencies.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_kx() ;

/** Zoneplate 1st order x phase, for generating constant horizontal frequencies.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_kx() const;

  /** Zoneplate 1st order y phase, for generating contant vertical frequencies.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_ky() ;

/** Zoneplate 1st order y phase, for generating contant vertical frequencies.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_ky() const;

  /** Zoneplate 1st order t phase, for generating phase rotation as a function of time.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_kt() ;

/** Zoneplate 1st order t phase, for generating phase rotation as a function of time.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_kt() const;

  /** Zoneplate x*t product phase, normalised to kxy/256 cycles per vertical pixel at width/2 from origin.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_kxt() ;

/** Zoneplate x*t product phase, normalised to kxy/256 cycles per vertical pixel at width/2 from origin.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_kxt() const;

  /** Zoneplate y*t product phase.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_kyt() ;

/** Zoneplate y*t product phase.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_kyt() const;

  /** Zoneplate x*y product phase.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_kxy() ;

/** Zoneplate x*y product phase.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_kxy() const;

  /** Zoneplate 2nd order x phase, normalised to kx2/256 cycles per horizontal pixel at width/2 from origin.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_kx2() ;

/** Zoneplate 2nd order x phase, normalised to kx2/256 cycles per horizontal pixel at width/2 from origin.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_kx2() const;

  /** Zoneplate 2nd order y phase, normailsed to ky2/256 cycles per vertical pixel at height/2 from origin.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_ky2() ;

/** Zoneplate 2nd order y phase, normailsed to ky2/256 cycles per vertical pixel at height/2 from origin.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_ky2() const;

  /** Zoneplate 2nd order t phase, t*t/256 cycles per picture.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_kt2() ;

/** Zoneplate 2nd order t phase, t*t/256 cycles per picture.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_kt2() const;

  /** Zoneplate 2nd order products x offset.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_xoffset() ;

/** Zoneplate 2nd order products x offset.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_xoffset() const;

  /** Zoneplate 2nd order products y offset.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_yoffset() ;

/** Zoneplate 2nd order products y offset.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_yoffset() const;

  /** Foreground color to use (big-endian ARGB).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_foreground_color() ;

/** Foreground color to use (big-endian ARGB).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_foreground_color() const;

  /** Background color to use (big-endian ARGB).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_background_color() ;

/** Background color to use (big-endian ARGB).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_background_color() const;

  /** Scroll image number of pixels per frame (positive is scroll to the left).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_horizontal_speed() ;

/** Scroll image number of pixels per frame (positive is scroll to the left).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_horizontal_speed() const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::VideoTestSrc
   */
  Glib::RefPtr<Gst::VideoTestSrc> wrap(GstVideoTestSrc* object, bool take_copy = false);
}


#endif // GSTREAMERMM_DISABLE_DEPRECATED


#endif /* _GSTREAMERMM_VIDEOTESTSRC_H */

