// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gstreamermm/videoformat.h>
#include <gstreamermm/private/videoformat_p.h>


/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2009 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Gst
{
VideoFormatInfo::VideoFormatInfo(const GstVideoFormatInfo* castitem)
{
  gobj_ = castitem;
}

VideoFormatInfo::~VideoFormatInfo()
{
}
}

namespace
{
} // anonymous namespace

// static
GType Glib::Value<Gst::VideoFormat>::value_type()
{
  return gst_video_format_get_type();
}

// static
GType Glib::Value<Gst::VideoFormatFlags>::value_type()
{
  return gst_video_format_flags_get_type();
}

// static
GType Glib::Value<Gst::VideoPackFlags>::value_type()
{
  return gst_video_pack_flags_get_type();
}


namespace Gst
{


VideoFormat VideoFormatInfo::get_format() const
{
  return ((VideoFormat)(gobj()->format));
}

Glib::ustring VideoFormatInfo::get_name() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gobj()->name);
}

Glib::ustring VideoFormatInfo::get_description() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gobj()->description);
}

VideoFormatFlags VideoFormatInfo::get_flags() const
{
  return ((VideoFormatFlags)(gobj()->flags));
}

guint VideoFormatInfo::get_bits() const
{
  return gobj()->bits;
}

guint VideoFormatInfo::get_n_components() const
{
  return gobj()->n_components;
}

guint VideoFormatInfo::get_n_planes() const
{
  return gobj()->n_planes;
}

VideoFormat VideoFormatInfo::get_unpack_format() const
{
  return ((VideoFormat)(gobj()->unpack_format));
}

gint VideoFormatInfo::get_pack_lines() const
{
  return gobj()->pack_lines;
}


} // namespace Gst


