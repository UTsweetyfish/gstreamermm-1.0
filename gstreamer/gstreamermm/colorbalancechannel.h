// Generated by gmmproc 2.50.1 -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_COLORBALANCECHANNEL_H
#define _GSTREAMERMM_COLORBALANCECHANNEL_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
using GstColorBalanceChannel = struct _GstColorBalanceChannel;
using GstColorBalanceChannelClass = struct _GstColorBalanceChannelClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Gst
{ class ColorBalanceChannel_Class; } // namespace Gst
#endif //DOXYGEN_SHOULD_SKIP_THIS

namespace Gst
{

/** A class that represents a color balance channel.
 *
 * The Gst::ColorBalanceChannel object represents a parameter for modifying the color
 * balance implemented by an element providing the Gst::ColorBalance interface.
 * For example, Hue or Saturation.
 *
 * Last reviewed on 2016-05-16 (1.8.0)
 *
 * @ingroup GstInterfaces
 */

class ColorBalanceChannel : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  using CppObjectType = ColorBalanceChannel;
  using CppClassType = ColorBalanceChannel_Class;
  using BaseObjectType = GstColorBalanceChannel;
  using BaseClassType = GstColorBalanceChannelClass;

  // noncopyable
  ColorBalanceChannel(const ColorBalanceChannel&) = delete;
  ColorBalanceChannel& operator=(const ColorBalanceChannel&) = delete;

private:  friend class ColorBalanceChannel_Class;
  static CppClassType colorbalancechannel_class_;

protected:
  explicit ColorBalanceChannel(const Glib::ConstructParams& construct_params);
  explicit ColorBalanceChannel(GstColorBalanceChannel* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:

  ColorBalanceChannel(ColorBalanceChannel&& src) noexcept;
  ColorBalanceChannel& operator=(ColorBalanceChannel&& src) noexcept;

  ~ColorBalanceChannel() noexcept override;

  /** Get the GType for this class, for use with the underlying GObject type system.
   */
  static GType get_type()      G_GNUC_CONST;

#ifndef DOXYGEN_SHOULD_SKIP_THIS


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstColorBalanceChannel*       gobj()       { return reinterpret_cast<GstColorBalanceChannel*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstColorBalanceChannel* gobj() const { return reinterpret_cast<GstColorBalanceChannel*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstColorBalanceChannel* gobj_copy();

private:


public:
  /** Get a string containing a descriptive name for this channel.
   */
  Glib::ustring get_label() const;

  /** Get the minimum valid value for this channel.
   */
  int get_min_value() const;

  /** Get the maximum valid value for this channel.
   */
  int get_max_value() const;

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%value_changed(int value)</tt>
   *
   * Fired when the value of the indicated channel has changed.
   * 
   * @param value The new value.
   */

  Glib::SignalProxy< void,int > signal_value_changed();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  /// This is a default handler for the signal signal_value_changed().
  virtual void on_value_changed(int value);


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   *
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::ColorBalanceChannel
   */
  Glib::RefPtr<Gst::ColorBalanceChannel> wrap(GstColorBalanceChannel* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_COLORBALANCECHANNEL_H */

